<?xml version="1.0"?>
<ruleset
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    name="PHP_CodeSniffer"
    xsi:noNamespaceSchemaLocation="phpcs.xsd"
>
    <description>
		The coding standard for Tabs with Recommended Posts Plugin, used for development.
	</description>

	<!--
		Excluded during development:

		Some problems will appear all the time while developing
		(Ex: uncommented functions), making the problems panel hard to use,
		and easy to ignore it completely. Excluding some rules in development
		stage will make important problems more noticed and the problems panel
		less cluttered to not be ignored.

		This file is meant to be used in the development process, and when a section
		of a code is done, use the production rules.

		This file mostly exclude rules for commenting code.
	-->

    <exclude-pattern>vendor/**</exclude-pattern>
    <exclude-pattern>node_modules/**</exclude-pattern>
	<exclude-pattern>/plugins/!(tabs-with-recommended-posts)/**</exclude-pattern>


    <rule ref="WordPress">
		<properties>
			<!-- Custom domain name. -->
			<property name="text_domain" type="array" value="twrp" />

			<!-- Prefix all globals. -->
			<property name="prefixes" type="array">
				<element value="TWRP"/>
				<element value="twrp_"/>
				<element value="_twrp_"/>
			</property>

			<!-- Minimum supported version. -->
			<property name="minimum_supported_version" value="4.9"/>

			<property name="customAutoEscapedFunctions" type="array">
				<element value="__"/>
				<element value="_x"/>
				<element value="_n"/>
				<element value="_nx"/>
			</property>
		</properties>

		<!-- We will use <?= instead of <?php echo. -->
		<exclude name="Generic.PHP.DisallowShortOpenTag.EchoFound"/>

		<!-- Sometimes is not necessary to comment a parameter. -->
		<exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/>
		<exclude name="Squiz.Commenting.FunctionComment.MissingParamTag" />

		<!-- Exclude the needed to all the things be documented. -->
		<exclude ref="WordPress-Docs" />

		<!-- We use PSR-4 -->
		<exclude name="WordPress.Files.FileName.NotHyphenatedLowercase" />
		<exclude name="WordPress.Files.FileName.InvalidClassFileName" />

		<!-- Excluded during development: -->
		<exclude name="Generic.Commenting.DocComment.MissingShort" />
		<exclude name="Squiz.Commenting.FunctionComment.Missing" />
		<exclude name="Squiz.Commenting.FileComment.Missing" />
		<exclude name="Squiz.Commenting.FunctionComment.WrongStyle" />
		<exclude name="Squiz.Commenting.ClassComment.Missing" />
		<exclude name="Squiz.Commenting.VariableComment.Missing" />
		<exclude name="Generic.Commenting.DocComment.Empty" />
		<exclude name="Squiz.WhiteSpace.SuperfluousWhitespace.EndLine" />
		<exclude name="Squiz.Commenting.VariableComment.WrongStyle" />
		<exclude name="Squiz.PHP.CommentedOutCode.Found" />
		<exclude name="Squiz.Commenting.InlineComment.InvalidEndChar" />
		<exclude name="Squiz.Commenting.ClassComment.SpacingAfter" />
    </rule>

	<!-- Check for cross-version support for PHP 7.0 and higher. -->
    <config name="testVersion" value="7.0"/>
	<rule ref="PHPCompatibilityWP"/>

	<!--
		Slevomat Rules. Those come as addition to WPCS. Removing these should make
		no difference(eg: no additional errors.)
	 -->

	<!-- Slevomat Functional - improving the safety and behaviour of code -->
	<!--
		Checks for missing parameter typehints in case they can be declared natively. If the phpDoc
		contains something that can be written as a native PHP 7.0+ typehint, this sniff reports that.
		Checks for useless @param annotations. If the native method declaration contains everything and
		the phpDoc does not add anything useful, it's reported as useless and can optionally be
		automatically removed with phpcbf.
	-->
	<rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint">
		<!-- This sniff can cause an error if you're overriding or implementing a parent method which does not have typehints. In such cases add @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint annotation to the method to have this sniff skip it. -->
		<property name="enableObjectTypeHint" value="0" />
	</rule>
	<!-- Like above, only returning. -->
	<rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint">
		<!-- Exclude typehinting of "void". -->
		<exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint" />
		<property name="enableObjectTypeHint" value="0" />
	</rule>
	<!-- Reports useless @var annotation for constants because the type of constant is always clear. -->
	<rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint"/>
	<!-- If the catch statement contained Exception on PHP 5.x, it means it should probably be rewritten to reference Throwable on PHP 7.x. This sniff enforces that. -->
	<rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly"/>
	<!-- Enforces having declare(strict_types = 1) at the top of each PHP file. -->
	<rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
		<property name="spacesCountAroundEqualsSign" value="1" />
		<exclude name="SlevomatCodingStandard.TypeHints.DeclareStrictTypes.IncorrectWhitespaceBetweenOpenTagAndDeclare" />
	</rule>
	<!-- Disallows assignments in if, elseif and do-while loop conditions. -->
	<rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>
	<!-- Disallows use of continue without integer operand in switch because it emits a warning in PHP 7.3 and higher. -->
	<rule ref="SlevomatCodingStandard.ControlStructures.DisallowContinueWithoutIntegerOperandInSwitch"/>
	<!-- Disallows using loose == and != comparison operators. Use === and !== instead, they are much more secure and predictable. -->
	<rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators"/>
	<!-- Reports ++ and - operators not used standalone. -->
	<rule ref="SlevomatCodingStandard.Operators.RequireOnlyStandaloneIncrementAndDecrementOperators"/>


	<!-- Slevomat Cleaning - detecting dead code -->
	<!-- Prohibits uses from the same namespace: namespace Foo; use Foo\Bar -->
	<rule name="SlevomatCodingStandard.Namespaces.UseFromSameNamespace" />
	<!-- This sniff finds unreachable catch blocks. -->
	<rule name="SlevomatCodingStandard.Exceptions.DeadCatch" />


	<!-- Slevomat Formatting - rules for consistent code looks -->
	<!-- Reports use of __CLASS__, get_parent_class(), get_called_class(), get_class() and get_class($this). Class names should be referenced via ::class constant when possible. -->
	<rule name="SlevomatCodingStandard.Classes.ModernClassNameReference" />
	<!-- Requires new with parentheses. -->
	<rule name="SlevomatCodingStandard.ControlStructures.NewWithParentheses" />
	<!-- Requires only one namespace in a file. -->
	<rule name="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile" />
	<!-- Enforces using shorthand scalar typehint variants in phpDocs: int instead of integer and bool instead of boolean. -->
	<rule name="SlevomatCodingStandard.TypeHints.LongTypeHints" />
	<!-- Enforces null type hint on last position in annotations. -->
	<rule name="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition" />
	<!-- Enforces using shorthand cast operators, forbids use of unset and binary cast operators. -->
	<rule name="SlevomatCodingStandard.PHP.TypeCast" />
	<!-- Checks duplicate spaces anywhere because there aren't sniffs for every part of code to check formatting. -->
	<rule name="SlevomatCodingStandard.Whitespaces.DuplicateSpaces">
		<property name="ignoreSpacesBeforeAssignment" value="1" />
		<property name="ignoreSpacesInAnnotation" value="1" />
		<property name="ignoreSpacesInComment" value="1" />
	</rule>
</ruleset>
