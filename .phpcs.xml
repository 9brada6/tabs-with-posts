<?xml version="1.0"?>
<ruleset
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    name="PHP_CodeSniffer"
    xsi:noNamespaceSchemaLocation="phpcs.xsd"
>
    <description>The coding standard for Tabs with Recommended Posts Plugin.</description>

    <exclude-pattern>vendor/**</exclude-pattern>
    <exclude-pattern>node_modules/**</exclude-pattern>
	<exclude-pattern>/plugins/!(tabs-with-recommended-posts)/**</exclude-pattern>


    <rule ref="WordPress">
		<properties>
			<!-- Custom domain name. -->
			<property name="text_domain" type="array" value="twrp" />

			<!-- Prefix all globals. -->
			<property name="prefixes" type="array">
				<element value="TWRP"/>
				<element value="twrp_"/>
				<element value="_twrp_"/>
			</property>

			<!-- Minimum supported version. -->
			<property name="minimum_supported_version" value="4.9"/>

			<property name="customAutoEscapedFunctions" type="array">
				<element value="__"/>
				<element value="_x"/>
				<element value="_n"/>
				<element value="_nx"/>
			</property>
		</properties>

		<!-- We will use <?= instead of <?php echo. -->
		<exclude name="Generic.PHP.DisallowShortOpenTag.EchoFound"/>

		<!-- Sometimes is not necessary to comment a parameter. -->
		<exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/>
		<!-- And the parameter comment alignment is not good as it takes good writing space. -->
		<exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType"/>
		<!-- Allow regional comments. So we can use Phan annotations. -->
		<exclude name="Squiz.Commenting.InlineComment.WrongStyle"/>
		<!-- If some functions don't have a comment, the phpcs think that they
		will inherit whatever is before. -->
		<exclude name="Squiz.Commenting.FunctionComment.WrongStyle" />

		<!-- We use PSR-4 -->
		<exclude name="WordPress.Files.FileName.NotHyphenatedLowercase" />
		<exclude name="WordPress.Files.FileName.InvalidClassFileName" />
		<exclude name="Squiz.Commenting.FileComment.MissingPackageTag" />

		<!-- We have Psalm which will tell which function comment is missing,
		Psalm is more accurate than PHPCS, because it inherits by default the
		comment from the extendend class, which is how should be done and is not
		implemented in PHPCS. -->
		<exclude name="Squiz.Commenting.FunctionComment.Missing" />

		<!-- The rules below are excluded during development: -->

		<!--
		<exclude name="Squiz.Commenting.FileComment.Missing" />
		<exclude name="Squiz.Commenting.ClassComment.Missing" />
		<exclude name="Squiz.Commenting.VariableComment.Missing" />
		<exclude name="Squiz.Commenting.VariableComment.WrongStyle" />
		<exclude name="Generic.Commenting.DocComment.Empty" />
		<exclude name="Squiz.WhiteSpace.SuperfluousWhitespace.EndLine" />
		<exclude name="Squiz.PHP.CommentedOutCode.Found" />
		<exclude name="Squiz.Commenting.InlineComment.InvalidEndChar" />
		<exclude name="Squiz.Commenting.ClassComment.SpacingAfter" /> -->
    </rule>

	<!-- Exclude prefix globals from template files, these files are not global files. -->
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedVariableFound">
		<exclude-pattern>*/templates/*</exclude-pattern>
	</rule>

	<!-- Exclude docblock commenting of functions/methods in tests. -->
	<rule ref="Squiz.Commenting.FunctionComment.Missing">
		<exclude-pattern>*/tests/*</exclude-pattern>
	</rule>
	<rule ref="Generic.Commenting.DocComment.MissingShort">
		<exclude-pattern>*/tests/*</exclude-pattern>
	</rule>

	<!-- Check for cross-version support for PHP 7.0 and higher. -->
    <config name="testVersion" value="5.6"/>
	<rule ref="PHPCompatibilityWP"/>

	<rule ref="Squiz.Commenting.FunctionComment.MissingReturn"/>

	<!--
		Slevomat Rules. Those come as addition to WPCS. Removing these should make
		no difference(eg: no additional errors.)
	 -->

	<!-- Slevomat Functional - improving the safety and behaviour of code -->
	<!-- Reports useless @var annotation for constants because the type of constant is always clear. -->
	<rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint"/>
	<!-- If the catch statement contained Exception on PHP 5.x, it means it should probably be rewritten to reference Throwable on PHP 7.x. This sniff enforces that. -->
	<rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly"/>
	<!-- Disallows assignments in if, elseif and do-while loop conditions. -->
	<rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>
	<!-- Disallows use of continue without integer operand in switch because it emits a warning in PHP 7.3 and higher. -->
	<rule ref="SlevomatCodingStandard.ControlStructures.DisallowContinueWithoutIntegerOperandInSwitch"/>
	<!-- Disallows using loose == and != comparison operators. Use === and !== instead, they are much more secure and predictable. -->
	<rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators"/>
	<!-- Reports ++ and - operators not used standalone. -->
	<rule ref="SlevomatCodingStandard.Operators.RequireOnlyStandaloneIncrementAndDecrementOperators"/>


	<!-- Slevomat Cleaning - detecting dead code -->
	<!-- Prohibits uses from the same namespace: namespace Foo; use Foo\Bar -->
	<rule name="SlevomatCodingStandard.Namespaces.UseFromSameNamespace" />
	<!-- This sniff finds unreachable catch blocks. -->
	<rule name="SlevomatCodingStandard.Exceptions.DeadCatch" />


	<!-- Slevomat Formatting - rules for consistent code looks -->
	<!-- Reports use of __CLASS__, get_parent_class(), get_called_class(), get_class() and get_class($this). Class names should be referenced via ::class constant when possible. -->
	<rule name="SlevomatCodingStandard.Classes.ModernClassNameReference" />
	<!-- Requires new with parentheses. -->
	<rule name="SlevomatCodingStandard.ControlStructures.NewWithParentheses" />
	<!-- Requires only one namespace in a file. -->
	<rule name="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile" />
	<!-- Enforces using shorthand scalar typehint variants in phpDocs: int instead of integer and bool instead of boolean. -->
	<rule name="SlevomatCodingStandard.TypeHints.LongTypeHints" />
	<!-- Enforces null type hint on last position in annotations. -->
	<rule name="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition" />
	<!-- Enforces using shorthand cast operators, forbids use of unset and binary cast operators. -->
	<rule name="SlevomatCodingStandard.PHP.TypeCast" />
	<!-- Checks duplicate spaces anywhere because there aren't sniffs for every part of code to check formatting. -->
	<rule name="SlevomatCodingStandard.Whitespaces.DuplicateSpaces">
		<property name="ignoreSpacesBeforeAssignment" value="1" />
		<property name="ignoreSpacesInAnnotation" value="1" />
		<property name="ignoreSpacesInComment" value="1" />
	</rule>
</ruleset>
