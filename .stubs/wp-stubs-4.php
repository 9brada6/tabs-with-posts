<?php

/**
 * Rewrite API: WP_Rewrite class
 *
 * @package WordPress
 * @subpackage Rewrite
 * @since 1.5.0
 */
/**
 * Core class used to implement a rewrite component API.
 *
 * The WordPress Rewrite class writes the rewrite module rules to the .htaccess
 * file. It also handles parsing the request to get the correct setup for the
 * WordPress Query class.
 *
 * The Rewrite along with WP class function as a front controller for WordPress.
 * You can add rules to trigger your page view and processing using this
 * component. The full functionality of a front controller does not exist,
 * meaning you can't define how the template files load based on the rewrite
 * rules.
 *
 * @since 1.5.0
 */
class WP_Rewrite
{
    /**
     * Permalink structure for posts.
     *
     * @since 1.5.0
     * @var string
     */
    public $permalink_structure;
    /**
     * Whether to add trailing slashes.
     *
     * @since 2.2.0
     * @var bool
     */
    public $use_trailing_slashes;
    /**
     * Base for the author permalink structure (example.com/$author_base/authorname).
     *
     * @since 1.5.0
     * @var string
     */
    var $author_base = 'author';
    /**
     * Permalink structure for author archives.
     *
     * @since 1.5.0
     * @var string
     */
    var $author_structure;
    /**
     * Permalink structure for date archives.
     *
     * @since 1.5.0
     * @var string
     */
    var $date_structure;
    /**
     * Permalink structure for pages.
     *
     * @since 1.5.0
     * @var string
     */
    var $page_structure;
    /**
     * Base of the search permalink structure (example.com/$search_base/query).
     *
     * @since 1.5.0
     * @var string
     */
    var $search_base = 'search';
    /**
     * Permalink structure for searches.
     *
     * @since 1.5.0
     * @var string
     */
    var $search_structure;
    /**
     * Comments permalink base.
     *
     * @since 1.5.0
     * @var string
     */
    var $comments_base = 'comments';
    /**
     * Pagination permalink base.
     *
     * @since 3.1.0
     * @var string
     */
    public $pagination_base = 'page';
    /**
     * Comments pagination permalink base.
     *
     * @since 4.2.0
     * @var string
     */
    var $comments_pagination_base = 'comment-page';
    /**
     * Feed permalink base.
     *
     * @since 1.5.0
     * @var string
     */
    var $feed_base = 'feed';
    /**
     * Comments feed permalink structure.
     *
     * @since 1.5.0
     * @var string
     */
    var $comment_feed_structure;
    /**
     * Feed request permalink structure.
     *
     * @since 1.5.0
     * @var string
     */
    var $feed_structure;
    /**
     * The static portion of the post permalink structure.
     *
     * If the permalink structure is "/archive/%post_id%" then the front
     * is "/archive/". If the permalink structure is "/%year%/%postname%/"
     * then the front is "/".
     *
     * @since 1.5.0
     * @var string
     *
     * @see WP_Rewrite::init()
     */
    public $front;
    /**
     * The prefix for all permalink structures.
     *
     * If PATHINFO/index permalinks are in use then the root is the value of
     * `WP_Rewrite::$index` with a trailing slash appended. Otherwise the root
     * will be empty.
     *
     * @since 1.5.0
     * @var string
     *
     * @see WP_Rewrite::init()
     * @see WP_Rewrite::using_index_permalinks()
     */
    public $root = '';
    /**
     * The name of the index file which is the entry point to all requests.
     *
     * @since 1.5.0
     * @var string
     */
    public $index = 'index.php';
    /**
     * Variable name to use for regex matches in the rewritten query.
     *
     * @since 1.5.0
     * @var string
     */
    var $matches = '';
    /**
     * Rewrite rules to match against the request to find the redirect or query.
     *
     * @since 1.5.0
     * @var array
     */
    var $rules;
    /**
     * Additional rules added external to the rewrite class.
     *
     * Those not generated by the class, see add_rewrite_rule().
     *
     * @since 2.1.0
     * @var array
     */
    var $extra_rules = array();
    /**
     * Additional rules that belong at the beginning to match first.
     *
     * Those not generated by the class, see add_rewrite_rule().
     *
     * @since 2.3.0
     * @var array
     */
    var $extra_rules_top = array();
    /**
     * Rules that don't redirect to WordPress' index.php.
     *
     * These rules are written to the mod_rewrite portion of the .htaccess,
     * and are added by add_external_rule().
     *
     * @since 2.1.0
     * @var array
     */
    var $non_wp_rules = array();
    /**
     * Extra permalink structures, e.g. categories, added by add_permastruct().
     *
     * @since 2.1.0
     * @var array
     */
    var $extra_permastructs = array();
    /**
     * Endpoints (like /trackback/) added by add_rewrite_endpoint().
     *
     * @since 2.1.0
     * @var array
     */
    var $endpoints;
    /**
     * Whether to write every mod_rewrite rule for WordPress into the .htaccess file.
     *
     * This is off by default, turning it on might print a lot of rewrite rules
     * to the .htaccess file.
     *
     * @since 2.0.0
     * @var bool
     *
     * @see WP_Rewrite::mod_rewrite_rules()
     */
    public $use_verbose_rules = \false;
    /**
     * Could post permalinks be confused with those of pages?
     *
     * If the first rewrite tag in the post permalink structure is one that could
     * also match a page name (e.g. %postname% or %author%) then this flag is
     * set to true. Prior to WordPress 3.3 this flag indicated that every page
     * would have a set of rules added to the top of the rewrite rules array.
     * Now it tells WP::parse_request() to check if a URL matching the page
     * permastruct is actually a page before accepting it.
     *
     * @since 2.5.0
     * @var bool
     *
     * @see WP_Rewrite::init()
     */
    public $use_verbose_page_rules = \true;
    /**
     * Rewrite tags that can be used in permalink structures.
     *
     * These are translated into the regular expressions stored in
     * `WP_Rewrite::$rewritereplace` and are rewritten to the query
     * variables listed in WP_Rewrite::$queryreplace.
     *
     * Additional tags can be added with add_rewrite_tag().
     *
     * @since 1.5.0
     * @var array
     */
    var $rewritecode = array('%year%', '%monthnum%', '%day%', '%hour%', '%minute%', '%second%', '%postname%', '%post_id%', '%author%', '%pagename%', '%search%');
    /**
     * Regular expressions to be substituted into rewrite rules in place
     * of rewrite tags, see WP_Rewrite::$rewritecode.
     *
     * @since 1.5.0
     * @var array
     */
    var $rewritereplace = array('([0-9]{4})', '([0-9]{1,2})', '([0-9]{1,2})', '([0-9]{1,2})', '([0-9]{1,2})', '([0-9]{1,2})', '([^/]+)', '([0-9]+)', '([^/]+)', '([^/]+?)', '(.+)');
    /**
     * Query variables that rewrite tags map to, see WP_Rewrite::$rewritecode.
     *
     * @since 1.5.0
     * @var array
     */
    var $queryreplace = array('year=', 'monthnum=', 'day=', 'hour=', 'minute=', 'second=', 'name=', 'p=', 'author_name=', 'pagename=', 's=');
    /**
     * Supported default feeds.
     *
     * @since 1.5.0
     * @var array
     */
    public $feeds = array('feed', 'rdf', 'rss', 'rss2', 'atom');
    /**
     * Determines whether permalinks are being used.
     *
     * This can be either rewrite module or permalink in the HTTP query string.
     *
     * @since 1.5.0
     *
     * @return bool True, if permalinks are enabled.
     */
    public function using_permalinks()
    {
    }
    /**
     * Determines whether permalinks are being used and rewrite module is not enabled.
     *
     * Means that permalink links are enabled and index.php is in the URL.
     *
     * @since 1.5.0
     *
     * @return bool Whether permalink links are enabled and index.php is in the URL.
     */
    public function using_index_permalinks()
    {
    }
    /**
     * Determines whether permalinks are being used and rewrite module is enabled.
     *
     * Using permalinks and index.php is not in the URL.
     *
     * @since 1.5.0
     *
     * @return bool Whether permalink links are enabled and index.php is NOT in the URL.
     */
    public function using_mod_rewrite_permalinks()
    {
    }
    /**
     * Indexes for matches for usage in preg_*() functions.
     *
     * The format of the string is, with empty matches property value, '$NUM'.
     * The 'NUM' will be replaced with the value in the $number parameter. With
     * the matches property not empty, the value of the returned string will
     * contain that value of the matches property. The format then will be
     * '$MATCHES[NUM]', with MATCHES as the value in the property and NUM the
     * value of the $number parameter.
     *
     * @since 1.5.0
     *
     * @param int $number Index number.
     * @return string
     */
    public function preg_index($number)
    {
    }
    /**
     * Retrieves all page and attachments for pages URIs.
     *
     * The attachments are for those that have pages as parents and will be
     * retrieved.
     *
     * @since 2.5.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @return array Array of page URIs as first element and attachment URIs as second element.
     */
    public function page_uri_index()
    {
    }
    /**
     * Retrieves all of the rewrite rules for pages.
     *
     * @since 1.5.0
     *
     * @return array Page rewrite rules.
     */
    public function page_rewrite_rules()
    {
    }
    /**
     * Retrieves date permalink structure, with year, month, and day.
     *
     * The permalink structure for the date, if not set already depends on the
     * permalink structure. It can be one of three formats. The first is year,
     * month, day; the second is day, month, year; and the last format is month,
     * day, year. These are matched against the permalink structure for which
     * one is used. If none matches, then the default will be used, which is
     * year, month, day.
     *
     * Prevents post ID and date permalinks from overlapping. In the case of
     * post_id, the date permalink will be prepended with front permalink with
     * 'date/' before the actual permalink to form the complete date permalink
     * structure.
     *
     * @since 1.5.0
     *
     * @return string|false False on no permalink structure. Date permalink structure.
     */
    public function get_date_permastruct()
    {
    }
    /**
     * Retrieves the year permalink structure without month and day.
     *
     * Gets the date permalink structure and strips out the month and day
     * permalink structures.
     *
     * @since 1.5.0
     *
     * @return false|string False on failure. Year structure on success.
     */
    public function get_year_permastruct()
    {
    }
    /**
     * Retrieves the month permalink structure without day and with year.
     *
     * Gets the date permalink structure and strips out the day permalink
     * structures. Keeps the year permalink structure.
     *
     * @since 1.5.0
     *
     * @return false|string False on failure. Year/Month structure on success.
     */
    public function get_month_permastruct()
    {
    }
    /**
     * Retrieves the day permalink structure with month and year.
     *
     * Keeps date permalink structure with all year, month, and day.
     *
     * @since 1.5.0
     *
     * @return string|false False on failure. Year/Month/Day structure on success.
     */
    public function get_day_permastruct()
    {
    }
    /**
     * Retrieves the permalink structure for categories.
     *
     * If the category_base property has no value, then the category structure
     * will have the front property value, followed by 'category', and finally
     * '%category%'. If it does, then the root property will be used, along with
     * the category_base property value.
     *
     * @since 1.5.0
     *
     * @return string|false False on failure. Category permalink structure.
     */
    public function get_category_permastruct()
    {
    }
    /**
     * Retrieve the permalink structure for tags.
     *
     * If the tag_base property has no value, then the tag structure will have
     * the front property value, followed by 'tag', and finally '%tag%'. If it
     * does, then the root property will be used, along with the tag_base
     * property value.
     *
     * @since 2.3.0
     *
     * @return string|false False on failure. Tag permalink structure.
     */
    public function get_tag_permastruct()
    {
    }
    /**
     * Retrieves an extra permalink structure by name.
     *
     * @since 2.5.0
     *
     * @param string $name Permalink structure name.
     * @return string|false False if not found. Permalink structure string.
     */
    public function get_extra_permastruct($name)
    {
    }
    /**
     * Retrieves the author permalink structure.
     *
     * The permalink structure is front property, author base, and finally
     * '/%author%'. Will set the author_structure property and then return it
     * without attempting to set the value again.
     *
     * @since 1.5.0
     *
     * @return string|false False if not found. Permalink structure string.
     */
    public function get_author_permastruct()
    {
    }
    /**
     * Retrieves the search permalink structure.
     *
     * The permalink structure is root property, search base, and finally
     * '/%search%'. Will set the search_structure property and then return it
     * without attempting to set the value again.
     *
     * @since 1.5.0
     *
     * @return string|false False if not found. Permalink structure string.
     */
    public function get_search_permastruct()
    {
    }
    /**
     * Retrieves the page permalink structure.
     *
     * The permalink structure is root property, and '%pagename%'. Will set the
     * page_structure property and then return it without attempting to set the
     * value again.
     *
     * @since 1.5.0
     *
     * @return string|false False if not found. Permalink structure string.
     */
    public function get_page_permastruct()
    {
    }
    /**
     * Retrieves the feed permalink structure.
     *
     * The permalink structure is root property, feed base, and finally
     * '/%feed%'. Will set the feed_structure property and then return it
     * without attempting to set the value again.
     *
     * @since 1.5.0
     *
     * @return string|false False if not found. Permalink structure string.
     */
    public function get_feed_permastruct()
    {
    }
    /**
     * Retrieves the comment feed permalink structure.
     *
     * The permalink structure is root property, comment base property, feed
     * base and finally '/%feed%'. Will set the comment_feed_structure property
     * and then return it without attempting to set the value again.
     *
     * @since 1.5.0
     *
     * @return string|false False if not found. Permalink structure string.
     */
    public function get_comment_feed_permastruct()
    {
    }
    /**
     * Adds or updates existing rewrite tags (e.g. %postname%).
     *
     * If the tag already exists, replace the existing pattern and query for
     * that tag, otherwise add the new tag.
     *
     * @since 1.5.0
     *
     * @see WP_Rewrite::$rewritecode
     * @see WP_Rewrite::$rewritereplace
     * @see WP_Rewrite::$queryreplace
     *
     * @param string $tag   Name of the rewrite tag to add or update.
     * @param string $regex Regular expression to substitute the tag for in rewrite rules.
     * @param string $query String to append to the rewritten query. Must end in '='.
     */
    public function add_rewrite_tag($tag, $regex, $query)
    {
    }
    /**
     * Removes an existing rewrite tag.
     *
     * @since 4.5.0
     *
     * @see WP_Rewrite::$rewritecode
     * @see WP_Rewrite::$rewritereplace
     * @see WP_Rewrite::$queryreplace
     *
     * @param string $tag Name of the rewrite tag to remove.
     */
    public function remove_rewrite_tag($tag)
    {
    }
    /**
     * Generates rewrite rules from a permalink structure.
     *
     * The main WP_Rewrite function for building the rewrite rule list. The
     * contents of the function is a mix of black magic and regular expressions,
     * so best just ignore the contents and move to the parameters.
     *
     * @since 1.5.0
     *
     * @param string $permalink_structure The permalink structure.
     * @param int    $ep_mask             Optional. Endpoint mask defining what endpoints are added to the structure.
     *                                    Accepts `EP_NONE`, `EP_PERMALINK`, `EP_ATTACHMENT`, `EP_DATE`, `EP_YEAR`,
     *                                    `EP_MONTH`, `EP_DAY`, `EP_ROOT`, `EP_COMMENTS`, `EP_SEARCH`, `EP_CATEGORIES`,
     *                                    `EP_TAGS`, `EP_AUTHORS`, `EP_PAGES`, `EP_ALL_ARCHIVES`, and `EP_ALL`.
     *                                    Default `EP_NONE`.
     * @param bool   $paged               Optional. Whether archive pagination rules should be added for the structure.
     *                                    Default true.
     * @param bool   $feed                Optional Whether feed rewrite rules should be added for the structure.
     *                                    Default true.
     * @param bool   $forcomments         Optional. Whether the feed rules should be a query for a comments feed.
     *                                    Default false.
     * @param bool   $walk_dirs           Optional. Whether the 'directories' making up the structure should be walked
     *                                    over and rewrite rules built for each in-turn. Default true.
     * @param bool   $endpoints           Optional. Whether endpoints should be applied to the generated rewrite rules.
     *                                    Default true.
     * @return array Rewrite rule list.
     */
    public function generate_rewrite_rules($permalink_structure, $ep_mask = \EP_NONE, $paged = \true, $feed = \true, $forcomments = \false, $walk_dirs = \true, $endpoints = \true)
    {
    }
    /**
     * Generates rewrite rules with permalink structure and walking directory only.
     *
     * Shorten version of WP_Rewrite::generate_rewrite_rules() that allows for shorter
     * list of parameters. See the method for longer description of what generating
     * rewrite rules does.
     *
     * @since 1.5.0
     *
     * @see WP_Rewrite::generate_rewrite_rules() See for long description and rest of parameters.
     *
     * @param string $permalink_structure The permalink structure to generate rules.
     * @param bool   $walk_dirs           Optional, default is false. Whether to create list of directories to walk over.
     * @return array
     */
    public function generate_rewrite_rule($permalink_structure, $walk_dirs = \false)
    {
    }
    /**
     * Constructs rewrite matches and queries from permalink structure.
     *
     * Runs the action {@see 'generate_rewrite_rules'} with the parameter that is an
     * reference to the current WP_Rewrite instance to further manipulate the
     * permalink structures and rewrite rules. Runs the {@see 'rewrite_rules_array'}
     * filter on the full rewrite rule array.
     *
     * There are two ways to manipulate the rewrite rules, one by hooking into
     * the {@see 'generate_rewrite_rules'} action and gaining full control of the
     * object or just manipulating the rewrite rule array before it is passed
     * from the function.
     *
     * @since 1.5.0
     *
     * @return array An associate array of matches and queries.
     */
    public function rewrite_rules()
    {
    }
    /**
     * Retrieves the rewrite rules.
     *
     * The difference between this method and WP_Rewrite::rewrite_rules() is that
     * this method stores the rewrite rules in the 'rewrite_rules' option and retrieves
     * it. This prevents having to process all of the permalinks to get the rewrite rules
     * in the form of caching.
     *
     * @since 1.5.0
     *
     * @return array Rewrite rules.
     */
    public function wp_rewrite_rules()
    {
    }
    /**
     * Retrieves mod_rewrite-formatted rewrite rules to write to .htaccess.
     *
     * Does not actually write to the .htaccess file, but creates the rules for
     * the process that will.
     *
     * Will add the non_wp_rules property rules to the .htaccess file before
     * the WordPress rewrite rules one.
     *
     * @since 1.5.0
     *
     * @return string
     */
    public function mod_rewrite_rules()
    {
    }
    /**
     * Retrieves IIS7 URL Rewrite formatted rewrite rules to write to web.config file.
     *
     * Does not actually write to the web.config file, but creates the rules for
     * the process that will.
     *
     * @since 2.8.0
     *
     * @param bool $add_parent_tags Optional. Whether to add parent tags to the rewrite rule sets.
     *                              Default false.
     * @return string IIS7 URL rewrite rule sets.
     */
    public function iis7_url_rewrite_rules($add_parent_tags = \false)
    {
    }
    /**
     * Adds a rewrite rule that transforms a URL structure to a set of query vars.
     *
     * Any value in the $after parameter that isn't 'bottom' will result in the rule
     * being placed at the top of the rewrite rules.
     *
     * @since 2.1.0
     * @since 4.4.0 Array support was added to the `$query` parameter.
     *
     * @param string       $regex Regular expression to match request against.
     * @param string|array $query The corresponding query vars for this rewrite rule.
     * @param string       $after Optional. Priority of the new rule. Accepts 'top'
     *                            or 'bottom'. Default 'bottom'.
     */
    public function add_rule($regex, $query, $after = 'bottom')
    {
    }
    /**
     * Adds a rewrite rule that doesn't correspond to index.php.
     *
     * @since 2.1.0
     *
     * @param string $regex Regular expression to match request against.
     * @param string $query The corresponding query vars for this rewrite rule.
     */
    public function add_external_rule($regex, $query)
    {
    }
    /**
     * Adds an endpoint, like /trackback/.
     *
     * @since 2.1.0
     * @since 3.9.0 $query_var parameter added.
     * @since 4.3.0 Added support for skipping query var registration by passing `false` to `$query_var`.
     *
     * @see add_rewrite_endpoint() for full documentation.
     * @global WP $wp
     *
     * @param string      $name      Name of the endpoint.
     * @param int         $places    Endpoint mask describing the places the endpoint should be added.
     * @param string|bool $query_var Optional. Name of the corresponding query variable. Pass `false` to
     *                               skip registering a query_var for this endpoint. Defaults to the
     *                               value of `$name`.
     */
    public function add_endpoint($name, $places, $query_var = \true)
    {
    }
    /**
     * Adds a new permalink structure.
     *
     * A permalink structure (permastruct) is an abstract definition of a set of rewrite rules;
     * it is an easy way of expressing a set of regular expressions that rewrite to a set of
     * query strings. The new permastruct is added to the WP_Rewrite::$extra_permastructs array.
     *
     * When the rewrite rules are built by WP_Rewrite::rewrite_rules(), all of these extra
     * permastructs are passed to WP_Rewrite::generate_rewrite_rules() which transforms them
     * into the regular expressions that many love to hate.
     *
     * The `$args` parameter gives you control over how WP_Rewrite::generate_rewrite_rules()
     * works on the new permastruct.
     *
     * @since 2.5.0
     *
     * @param string $name   Name for permalink structure.
     * @param string $struct Permalink structure (e.g. category/%category%)
     * @param array  $args   {
     *     Optional. Arguments for building rewrite rules based on the permalink structure.
     *     Default empty array.
     *
     *     @type bool $with_front  Whether the structure should be prepended with `WP_Rewrite::$front`.
     *                             Default true.
     *     @type int  $ep_mask     The endpoint mask defining which endpoints are added to the structure.
     *                             Accepts `EP_NONE`, `EP_PERMALINK`, `EP_ATTACHMENT`, `EP_DATE`, `EP_YEAR`,
     *                             `EP_MONTH`, `EP_DAY`, `EP_ROOT`, `EP_COMMENTS`, `EP_SEARCH`, `EP_CATEGORIES`,
     *                             `EP_TAGS`, `EP_AUTHORS`, `EP_PAGES`, `EP_ALL_ARCHIVES`, and `EP_ALL`.
     *                             Default `EP_NONE`.
     *     @type bool $paged       Whether archive pagination rules should be added for the structure.
     *                             Default true.
     *     @type bool $feed        Whether feed rewrite rules should be added for the structure. Default true.
     *     @type bool $forcomments Whether the feed rules should be a query for a comments feed. Default false.
     *     @type bool $walk_dirs   Whether the 'directories' making up the structure should be walked over
     *                             and rewrite rules built for each in-turn. Default true.
     *     @type bool $endpoints   Whether endpoints should be applied to the generated rules. Default true.
     * }
     */
    public function add_permastruct($name, $struct, $args = array())
    {
    }
    /**
     * Removes a permalink structure.
     *
     * @since 4.5.0
     *
     * @param string $name Name for permalink structure.
     */
    public function remove_permastruct($name)
    {
    }
    /**
     * Removes rewrite rules and then recreate rewrite rules.
     *
     * Calls WP_Rewrite::wp_rewrite_rules() after removing the 'rewrite_rules' option.
     * If the function named 'save_mod_rewrite_rules' exists, it will be called.
     *
     * @since 2.0.1
     *
     * @staticvar bool $do_hard_later
     *
     * @param bool $hard Whether to update .htaccess (hard flush) or just update rewrite_rules option (soft flush). Default is true (hard).
     */
    public function flush_rules($hard = \true)
    {
    }
    /**
     * Sets up the object's properties.
     *
     * The 'use_verbose_page_rules' object property will be set to true if the
     * permalink structure begins with one of the following: '%postname%', '%category%',
     * '%tag%', or '%author%'.
     *
     * @since 1.5.0
     */
    public function init()
    {
    }
    /**
     * Sets the main permalink structure for the site.
     *
     * Will update the 'permalink_structure' option, if there is a difference
     * between the current permalink structure and the parameter value. Calls
     * WP_Rewrite::init() after the option is updated.
     *
     * Fires the {@see 'permalink_structure_changed'} action once the init call has
     * processed passing the old and new values
     *
     * @since 1.5.0
     *
     * @param string $permalink_structure Permalink structure.
     */
    public function set_permalink_structure($permalink_structure)
    {
    }
    /**
     * Sets the category base for the category permalink.
     *
     * Will update the 'category_base' option, if there is a difference between
     * the current category base and the parameter value. Calls WP_Rewrite::init()
     * after the option is updated.
     *
     * @since 1.5.0
     *
     * @param string $category_base Category permalink structure base.
     */
    public function set_category_base($category_base)
    {
    }
    /**
     * Sets the tag base for the tag permalink.
     *
     * Will update the 'tag_base' option, if there is a difference between the
     * current tag base and the parameter value. Calls WP_Rewrite::init() after
     * the option is updated.
     *
     * @since 2.3.0
     *
     * @param string $tag_base Tag permalink structure base.
     */
    public function set_tag_base($tag_base)
    {
    }
    /**
     * Constructor - Calls init(), which runs setup.
     *
     * @since 1.5.0
     *
     */
    public function __construct()
    {
    }
}
/**
 * User API: WP_Role class
 *
 * @package WordPress
 * @subpackage Users
 * @since 4.4.0
 */
/**
 * Core class used to extend the user roles API.
 *
 * @since 2.0.0
 */
class WP_Role
{
    /**
     * Role name.
     *
     * @since 2.0.0
     * @var string
     */
    public $name;
    /**
     * List of capabilities the role contains.
     *
     * @since 2.0.0
     * @var array
     */
    public $capabilities;
    /**
     * Constructor - Set up object properties.
     *
     * The list of capabilities, must have the key as the name of the capability
     * and the value a boolean of whether it is granted to the role.
     *
     * @since 2.0.0
     *
     * @param string $role Role name.
     * @param array $capabilities List of capabilities.
     */
    public function __construct($role, $capabilities)
    {
    }
    /**
     * Assign role a capability.
     *
     * @since 2.0.0
     *
     * @param string $cap Capability name.
     * @param bool $grant Whether role has capability privilege.
     */
    public function add_cap($cap, $grant = \true)
    {
    }
    /**
     * Removes a capability from a role.
     *
     * This is a container for WP_Roles::remove_cap() to remove the
     * capability from the role. That is to say, that WP_Roles::remove_cap()
     * implements the functionality, but it also makes sense to use this class,
     * because you don't need to enter the role name.
     *
     * @since 2.0.0
     *
     * @param string $cap Capability name.
     */
    public function remove_cap($cap)
    {
    }
    /**
     * Determines whether the role has the given capability.
     *
     * The capabilities is passed through the {@see 'role_has_cap'} filter.
     * The first parameter for the hook is the list of capabilities the class
     * has assigned. The second parameter is the capability name to look for.
     * The third and final parameter for the hook is the role name.
     *
     * @since 2.0.0
     *
     * @param string $cap Capability name.
     * @return bool True if the role has the given capability. False otherwise.
     */
    public function has_cap($cap)
    {
    }
}
/**
 * User API: WP_Roles class
 *
 * @package WordPress
 * @subpackage Users
 * @since 4.4.0
 */
/**
 * Core class used to implement a user roles API.
 *
 * The role option is simple, the structure is organized by role name that store
 * the name in value of the 'name' key. The capabilities are stored as an array
 * in the value of the 'capability' key.
 *
 *     array (
 *    		'rolename' => array (
 *    			'name' => 'rolename',
 *    			'capabilities' => array()
 *    		)
 *     )
 *
 * @since 2.0.0
 */
class WP_Roles
{
    /**
     * List of roles and capabilities.
     *
     * @since 2.0.0
     * @var array
     */
    public $roles;
    /**
     * List of the role objects.
     *
     * @since 2.0.0
     * @var array
     */
    public $role_objects = array();
    /**
     * List of role names.
     *
     * @since 2.0.0
     * @var array
     */
    public $role_names = array();
    /**
     * Option name for storing role list.
     *
     * @since 2.0.0
     * @var string
     */
    public $role_key;
    /**
     * Whether to use the database for retrieval and storage.
     *
     * @since 2.1.0
     * @var bool
     */
    public $use_db = \true;
    /**
     * The site ID the roles are initialized for.
     *
     * @since 4.9.0
     * @var int
     */
    protected $site_id = 0;
    /**
     * Constructor
     *
     * @since 2.0.0
     * @since 4.9.0 The $site_id argument was added.
     *
     * @global array $wp_user_roles Used to set the 'roles' property value.
     *
     * @param int $site_id Site ID to initialize roles for. Default is the current site.
     */
    public function __construct($site_id = \null)
    {
    }
    /**
     * Make private/protected methods readable for backward compatibility.
     *
     * @since 4.0.0
     *
     * @param callable $name      Method to call.
     * @param array    $arguments Arguments to pass when calling.
     * @return mixed|false Return value of the callback, false otherwise.
     */
    public function __call($name, $arguments)
    {
    }
    /**
     * Set up the object properties.
     *
     * The role key is set to the current prefix for the $wpdb object with
     * 'user_roles' appended. If the $wp_user_roles global is set, then it will
     * be used and the role option will not be updated or used.
     *
     * @since 2.1.0
     * @deprecated 4.9.0 Use WP_Roles::for_site()
     */
    protected function _init()
    {
    }
    /**
     * Reinitialize the object
     *
     * Recreates the role objects. This is typically called only by switch_to_blog()
     * after switching wpdb to a new site ID.
     *
     * @since 3.5.0
     * @deprecated 4.7.0 Use WP_Roles::for_site()
     */
    public function reinit()
    {
    }
    /**
     * Add role name with capabilities to list.
     *
     * Updates the list of roles, if the role doesn't already exist.
     *
     * The capabilities are defined in the following format `array( 'read' => true );`
     * To explicitly deny a role a capability you set the value for that capability to false.
     *
     * @since 2.0.0
     *
     * @param string $role Role name.
     * @param string $display_name Role display name.
     * @param array $capabilities List of role capabilities in the above format.
     * @return WP_Role|void WP_Role object, if role is added.
     */
    public function add_role($role, $display_name, $capabilities = array())
    {
    }
    /**
     * Remove role by name.
     *
     * @since 2.0.0
     *
     * @param string $role Role name.
     */
    public function remove_role($role)
    {
    }
    /**
     * Add capability to role.
     *
     * @since 2.0.0
     *
     * @param string $role Role name.
     * @param string $cap Capability name.
     * @param bool $grant Optional, default is true. Whether role is capable of performing capability.
     */
    public function add_cap($role, $cap, $grant = \true)
    {
    }
    /**
     * Remove capability from role.
     *
     * @since 2.0.0
     *
     * @param string $role Role name.
     * @param string $cap Capability name.
     */
    public function remove_cap($role, $cap)
    {
    }
    /**
     * Retrieve role object by name.
     *
     * @since 2.0.0
     *
     * @param string $role Role name.
     * @return WP_Role|null WP_Role object if found, null if the role does not exist.
     */
    public function get_role($role)
    {
    }
    /**
     * Retrieve list of role names.
     *
     * @since 2.0.0
     *
     * @return array List of role names.
     */
    public function get_names()
    {
    }
    /**
     * Whether role name is currently in the list of available roles.
     *
     * @since 2.0.0
     *
     * @param string $role Role name to look up.
     * @return bool
     */
    public function is_role($role)
    {
    }
    /**
     * Initializes all of the available roles.
     *
     * @since 4.9.0
     */
    public function init_roles()
    {
    }
    /**
     * Sets the site to operate on. Defaults to the current site.
     *
     * @since 4.9.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param int $site_id Site ID to initialize roles for. Default is the current site.
     */
    public function for_site($site_id = \null)
    {
    }
    /**
     * Gets the ID of the site for which roles are currently initialized.
     *
     * @since 4.9.0
     *
     * @return int Site ID.
     */
    public function get_site_id()
    {
    }
    /**
     * Gets the available roles data.
     *
     * @since 4.9.0
     *
     * @global array $wp_user_roles Used to set the 'roles' property value.
     *
     * @return array Roles array.
     */
    protected function get_roles_data()
    {
    }
}
/**
 * Session API: WP_Session_Tokens class
 *
 * @package WordPress
 * @subpackage Session
 * @since 4.7.0
 */
/**
 * Abstract class for managing user session tokens.
 *
 * @since 4.0.0
 */
abstract class WP_Session_Tokens
{
    /**
     * User ID.
     *
     * @since 4.0.0
     * @var int User ID.
     */
    protected $user_id;
    /**
     * Protected constructor.
     *
     * @since 4.0.0
     *
     * @param int $user_id User whose session to manage.
     */
    protected function __construct($user_id)
    {
    }
    /**
     * Retrieves a session token manager instance for a user.
     *
     * This method contains a {@see 'session_token_manager'} filter, allowing a plugin to swap out
     * the session manager for a subclass of `WP_Session_Tokens`.
     *
     * @since 4.0.0
     * @static
     *
     * @param int $user_id User whose session to manage.
     * @return WP_User_Meta_Session_Tokens WP_User_Meta_Session_Tokens class instance by default.
     */
    public static final function get_instance($user_id)
    {
    }
    /**
     * Hashes a session token for storage.
     *
     * @since 4.0.0
     *
     * @param string $token Session token to hash.
     * @return string A hash of the session token (a verifier).
     */
    private final function hash_token($token)
    {
    }
    /**
     * Get a user's session.
     *
     * @since 4.0.0
     *
     * @param string $token Session token
     * @return array User session
     */
    public final function get($token)
    {
    }
    /**
     * Validate a user's session token as authentic.
     *
     * Checks that the given token is present and hasn't expired.
     *
     * @since 4.0.0
     *
     * @param string $token Token to verify.
     * @return bool Whether the token is valid for the user.
     */
    public final function verify($token)
    {
    }
    /**
     * Generate a session token and attach session information to it.
     *
     * A session token is a long, random string. It is used in a cookie
     * link that cookie to an expiration time and to ensure the cookie
     * becomes invalidated upon logout.
     *
     * This function generates a token and stores it with the associated
     * expiration time (and potentially other session information via the
     * {@see 'attach_session_information'} filter).
     *
     * @since 4.0.0
     *
     * @param int $expiration Session expiration timestamp.
     * @return string Session token.
     */
    public final function create($expiration)
    {
    }
    /**
     * Update a session token.
     *
     * @since 4.0.0
     *
     * @param string $token Session token to update.
     * @param array  $session Session information.
     */
    public final function update($token, $session)
    {
    }
    /**
     * Destroy a session token.
     *
     * @since 4.0.0
     *
     * @param string $token Session token to destroy.
     */
    public final function destroy($token)
    {
    }
    /**
     * Destroy all session tokens for this user,
     * except a single token, presumably the one in use.
     *
     * @since 4.0.0
     *
     * @param string $token_to_keep Session token to keep.
     */
    public final function destroy_others($token_to_keep)
    {
    }
    /**
     * Determine whether a session token is still valid,
     * based on expiration.
     *
     * @since 4.0.0
     *
     * @param array $session Session to check.
     * @return bool Whether session is valid.
     */
    protected final function is_still_valid($session)
    {
    }
    /**
     * Destroy all session tokens for a user.
     *
     * @since 4.0.0
     */
    public final function destroy_all()
    {
    }
    /**
     * Destroy all session tokens for all users.
     *
     * @since 4.0.0
     * @static
     */
    public static final function destroy_all_for_all_users()
    {
    }
    /**
     * Retrieve all sessions of a user.
     *
     * @since 4.0.0
     *
     * @return array Sessions of a user.
     */
    public final function get_all()
    {
    }
    /**
     * This method should retrieve all sessions of a user, keyed by verifier.
     *
     * @since 4.0.0
     *
     * @return array Sessions of a user, keyed by verifier.
     */
    protected abstract function get_sessions();
    /**
     * This method should look up a session by its verifier (token hash).
     *
     * @since 4.0.0
     *
     * @param string $verifier Verifier of the session to retrieve.
     * @return array|null The session, or null if it does not exist.
     */
    protected abstract function get_session($verifier);
    /**
     * This method should update a session by its verifier.
     *
     * Omitting the second argument should destroy the session.
     *
     * @since 4.0.0
     *
     * @param string $verifier Verifier of the session to update.
     * @param array  $session  Optional. Session. Omitting this argument destroys the session.
     */
    protected abstract function update_session($verifier, $session = \null);
    /**
     * This method should destroy all session tokens for this user,
     * except a single session passed.
     *
     * @since 4.0.0
     *
     * @param string $verifier Verifier of the session to keep.
     */
    protected abstract function destroy_other_sessions($verifier);
    /**
     * This method should destroy all sessions for a user.
     *
     * @since 4.0.0
     */
    protected abstract function destroy_all_sessions();
    /**
     * This static method should destroy all session tokens for all users.
     *
     * @since 4.0.0
     * @static
     */
    public static function drop_sessions()
    {
    }
}
/**
 * Feed API: WP_SimplePie_File class
 *
 * @package WordPress
 * @subpackage Feed
 * @since 4.7.0
 */
/**
 * Core class for fetching remote files and reading local files with SimplePie.
 *
 * @since 2.8.0
 *
 * @see SimplePie_File
 */
class WP_SimplePie_File extends \SimplePie_File
{
    /**
     * Constructor.
     *
     * @since 2.8.0
     * @since 3.2.0 Updated to use a PHP5 constructor.
     *
     * @param string       $url             Remote file URL.
     * @param integer      $timeout         Optional. How long the connection should stay open in seconds.
     *                                      Default 10.
     * @param integer      $redirects       Optional. The number of allowed redirects. Default 5.
     * @param string|array $headers         Optional. Array or string of headers to send with the request.
     *                                      Default null.
     * @param string       $useragent       Optional. User-agent value sent. Default null.
     * @param boolean      $force_fsockopen Optional. Whether to force opening internet or unix domain socket
     *                                      connection or not. Default false.
     */
    public function __construct($url, $timeout = 10, $redirects = 5, $headers = \null, $useragent = \null, $force_fsockopen = \false)
    {
    }
}
/**
 * Feed API: WP_SimplePie_Sanitize_KSES class
 *
 * @package WordPress
 * @subpackage Feed
 * @since 4.7.0
 */
/**
 * Core class used to implement SimpliePie feed sanitization.
 *
 * Extends the SimplePie_Sanitize class to use KSES, because
 * we cannot universally count on DOMDocument being available.
 *
 * @since 3.5.0
 *
 * @see SimplePie_Sanitize
 */
class WP_SimplePie_Sanitize_KSES extends \SimplePie_Sanitize
{
    /**
     * WordPress SimplePie sanitization using KSES.
     *
     * Sanitizes the incoming data, to ensure that it matches the type of data expected, using KSES.
     *
     * @since 3.5.0
     *
     * @param mixed   $data The data that needs to be sanitized.
     * @param integer $type The type of data that it's supposed to be.
     * @param string  $base Optional. The `xml:base` value to use when converting relative
     *                      URLs to absolute ones. Default empty.
     * @return mixed Sanitized data.
     */
    public function sanitize($data, $type, $base = '')
    {
    }
}
/**
 * Site API: WP_Site_Query class
 *
 * @package WordPress
 * @subpackage Sites
 * @since 4.6.0
 */
/**
 * Core class used for querying sites.
 *
 * @since 4.6.0
 *
 * @see WP_Site_Query::__construct() for accepted arguments.
 */
class WP_Site_Query
{
    /**
     * SQL for database query.
     *
     * @since 4.6.0
     * @var string
     */
    public $request;
    /**
     * SQL query clauses.
     *
     * @since 4.6.0
     * @var array
     */
    protected $sql_clauses = array('select' => '', 'from' => '', 'where' => array(), 'groupby' => '', 'orderby' => '', 'limits' => '');
    /**
     * Date query container.
     *
     * @since 4.6.0
     * @var object WP_Date_Query
     */
    public $date_query = \false;
    /**
     * Query vars set by the user.
     *
     * @since 4.6.0
     * @var array
     */
    public $query_vars;
    /**
     * Default values for query vars.
     *
     * @since 4.6.0
     * @var array
     */
    public $query_var_defaults;
    /**
     * List of sites located by the query.
     *
     * @since 4.6.0
     * @var array
     */
    public $sites;
    /**
     * The amount of found sites for the current query.
     *
     * @since 4.6.0
     * @var int
     */
    public $found_sites = 0;
    /**
     * The number of pages.
     *
     * @since 4.6.0
     * @var int
     */
    public $max_num_pages = 0;
    /**
     * Sets up the site query, based on the query vars passed.
     *
     * @since 4.6.0
     * @since 4.8.0 Introduced the 'lang_id', 'lang__in', and 'lang__not_in' parameters.
     *
     * @param string|array $query {
     *     Optional. Array or query string of site query parameters. Default empty.
     *
     *     @type array        $site__in          Array of site IDs to include. Default empty.
     *     @type array        $site__not_in      Array of site IDs to exclude. Default empty.
     *     @type bool         $count             Whether to return a site count (true) or array of site objects.
     *                                           Default false.
     *     @type array        $date_query        Date query clauses to limit sites by. See WP_Date_Query.
     *                                           Default null.
     *     @type string       $fields            Site fields to return. Accepts 'ids' (returns an array of site IDs)
     *                                           or empty (returns an array of complete site objects). Default empty.
     *     @type int          $ID                A site ID to only return that site. Default empty.
     *     @type int          $number            Maximum number of sites to retrieve. Default 100.
     *     @type int          $offset            Number of sites to offset the query. Used to build LIMIT clause.
     *                                           Default 0.
     *     @type bool         $no_found_rows     Whether to disable the `SQL_CALC_FOUND_ROWS` query. Default true.
     *     @type string|array $orderby           Site status or array of statuses. Accepts 'id', 'domain', 'path',
     *                                           'network_id', 'last_updated', 'registered', 'domain_length',
     *                                           'path_length', 'site__in' and 'network__in'. Also accepts false,
     *                                           an empty array, or 'none' to disable `ORDER BY` clause.
     *                                           Default 'id'.
     *     @type string       $order             How to order retrieved sites. Accepts 'ASC', 'DESC'. Default 'ASC'.
     *     @type int          $network_id        Limit results to those affiliated with a given network ID. If 0,
     *                                           include all networks. Default 0.
     *     @type array        $network__in       Array of network IDs to include affiliated sites for. Default empty.
     *     @type array        $network__not_in   Array of network IDs to exclude affiliated sites for. Default empty.
     *     @type string       $domain            Limit results to those affiliated with a given domain. Default empty.
     *     @type array        $domain__in        Array of domains to include affiliated sites for. Default empty.
     *     @type array        $domain__not_in    Array of domains to exclude affiliated sites for. Default empty.
     *     @type string       $path              Limit results to those affiliated with a given path. Default empty.
     *     @type array        $path__in          Array of paths to include affiliated sites for. Default empty.
     *     @type array        $path__not_in      Array of paths to exclude affiliated sites for. Default empty.
     *     @type int          $public            Limit results to public sites. Accepts '1' or '0'. Default empty.
     *     @type int          $archived          Limit results to archived sites. Accepts '1' or '0'. Default empty.
     *     @type int          $mature            Limit results to mature sites. Accepts '1' or '0'. Default empty.
     *     @type int          $spam              Limit results to spam sites. Accepts '1' or '0'. Default empty.
     *     @type int          $deleted           Limit results to deleted sites. Accepts '1' or '0'. Default empty.
     *     @type int          $lang_id           Limit results to a language ID. Default empty.
     *     @type array        $lang__in          Array of language IDs to include affiliated sites for. Default empty.
     *     @type array        $lang__not_in      Array of language IDs to exclude affiliated sites for. Default empty.
     *     @type string       $search            Search term(s) to retrieve matching sites for. Default empty.
     *     @type array        $search_columns    Array of column names to be searched. Accepts 'domain' and 'path'.
     *                                           Default empty array.
     *     @type bool         $update_site_cache Whether to prime the cache for found sites. Default true.
     * }
     */
    public function __construct($query = '')
    {
    }
    /**
     * Parses arguments passed to the site query with default query parameters.
     *
     * @since 4.6.0
     *
     * @see WP_Site_Query::__construct()
     *
     * @param string|array $query Array or string of WP_Site_Query arguments. See WP_Site_Query::__construct().
     */
    public function parse_query($query = '')
    {
    }
    /**
     * Sets up the WordPress query for retrieving sites.
     *
     * @since 4.6.0
     *
     * @param string|array $query Array or URL query string of parameters.
     * @return array|int List of WP_Site objects, a list of site ids when 'fields' is set to 'ids',
     *                   or the number of sites when 'count' is passed as a query var.
     */
    public function query($query)
    {
    }
    /**
     * Retrieves a list of sites matching the query vars.
     *
     * @since 4.6.0
     *
     * @return array|int List of WP_Site objects, a list of site ids when 'fields' is set to 'ids',
     *                   or the number of sites when 'count' is passed as a query var.
     */
    public function get_sites()
    {
    }
    /**
     * Used internally to get a list of site IDs matching the query vars.
     *
     * @since 4.6.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @return int|array A single count of site IDs if a count query. An array of site IDs if a full query.
     */
    protected function get_site_ids()
    {
    }
    /**
     * Populates found_sites and max_num_pages properties for the current query
     * if the limit clause was used.
     *
     * @since 4.6.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    private function set_found_sites()
    {
    }
    /**
     * Used internally to generate an SQL string for searching across multiple columns.
     *
     * @since 4.6.0
     *
     * @global wpdb  $wpdb WordPress database abstraction object.
     *
     * @param string $string  Search string.
     * @param array  $columns Columns to search.
     * @return string Search SQL.
     */
    protected function get_search_sql($string, $columns)
    {
    }
    /**
     * Parses and sanitizes 'orderby' keys passed to the site query.
     *
     * @since 4.6.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param string $orderby Alias for the field to order by.
     * @return string|false Value to used in the ORDER clause. False otherwise.
     */
    protected function parse_orderby($orderby)
    {
    }
    /**
     * Parses an 'order' query variable and cast it to 'ASC' or 'DESC' as necessary.
     *
     * @since 4.6.0
     *
     * @param string $order The 'order' query variable.
     * @return string The sanitized 'order' query variable.
     */
    protected function parse_order($order)
    {
    }
}
/**
 * Site API: WP_Site class
 *
 * @package WordPress
 * @subpackage Multisite
 * @since 4.5.0
 */
/**
 * Core class used for interacting with a multisite site.
 *
 * This class is used during load to populate the `$current_blog` global and
 * setup the current site.
 *
 * @since 4.5.0
 *
 * @property int    $id
 * @property int    $network_id
 * @property string $blogname
 * @property string $siteurl
 * @property int    $post_count
 * @property string $home
 */
final class WP_Site
{
    /**
     * Site ID.
     *
     * A numeric string, for compatibility reasons.
     *
     * @since 4.5.0
     * @var string
     */
    public $blog_id;
    /**
     * Domain of the site.
     *
     * @since 4.5.0
     * @var string
     */
    public $domain = '';
    /**
     * Path of the site.
     *
     * @since 4.5.0
     * @var string
     */
    public $path = '';
    /**
     * The ID of the site's parent network.
     *
     * Named "site" vs. "network" for legacy reasons. An individual site's "site" is
     * its network.
     *
     * A numeric string, for compatibility reasons.
     *
     * @since 4.5.0
     * @var string
     */
    public $site_id = '0';
    /**
     * The date on which the site was created or registered.
     *
     * @since 4.5.0
     * @var string Date in MySQL's datetime format.
     */
    public $registered = '0000-00-00 00:00:00';
    /**
     * The date and time on which site settings were last updated.
     *
     * @since 4.5.0
     * @var string Date in MySQL's datetime format.
     */
    public $last_updated = '0000-00-00 00:00:00';
    /**
     * Whether the site should be treated as public.
     *
     * A numeric string, for compatibility reasons.
     *
     * @since 4.5.0
     * @var string
     */
    public $public = '1';
    /**
     * Whether the site should be treated as archived.
     *
     * A numeric string, for compatibility reasons.
     *
     * @since 4.5.0
     * @var string
     */
    public $archived = '0';
    /**
     * Whether the site should be treated as mature.
     *
     * Handling for this does not exist throughout WordPress core, but custom
     * implementations exist that require the property to be present.
     *
     * A numeric string, for compatibility reasons.
     *
     * @since 4.5.0
     * @var string
     */
    public $mature = '0';
    /**
     * Whether the site should be treated as spam.
     *
     * A numeric string, for compatibility reasons.
     *
     * @since 4.5.0
     * @var string
     */
    public $spam = '0';
    /**
     * Whether the site should be treated as deleted.
     *
     * A numeric string, for compatibility reasons.
     *
     * @since 4.5.0
     * @var string
     */
    public $deleted = '0';
    /**
     * The language pack associated with this site.
     *
     * A numeric string, for compatibility reasons.
     *
     * @since 4.5.0
     * @var string
     */
    public $lang_id = '0';
    /**
     * Retrieves a site from the database by its ID.
     *
     * @static
     * @since 4.5.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param int $site_id The ID of the site to retrieve.
     * @return WP_Site|false The site's object if found. False if not.
     */
    public static function get_instance($site_id)
    {
    }
    /**
     * Creates a new WP_Site object.
     *
     * Will populate object properties from the object provided and assign other
     * default properties based on that information.
     *
     * @since 4.5.0
     *
     * @param WP_Site|object $site A site object.
     */
    public function __construct($site)
    {
    }
    /**
     * Converts an object to array.
     *
     * @since 4.6.0
     *
     * @return array Object as array.
     */
    public function to_array()
    {
    }
    /**
     * Getter.
     *
     * Allows current multisite naming conventions when getting properties.
     * Allows access to extended site properties.
     *
     * @since 4.6.0
     *
     * @param string $key Property to get.
     * @return mixed Value of the property. Null if not available.
     */
    public function __get($key)
    {
    }
    /**
     * Isset-er.
     *
     * Allows current multisite naming conventions when checking for properties.
     * Checks for extended site properties.
     *
     * @since 4.6.0
     *
     * @param string $key Property to check if set.
     * @return bool Whether the property is set.
     */
    public function __isset($key)
    {
    }
    /**
     * Setter.
     *
     * Allows current multisite naming conventions while setting properties.
     *
     * @since 4.6.0
     *
     * @param string $key   Property to set.
     * @param mixed  $value Value to assign to the property.
     */
    public function __set($key, $value)
    {
    }
    /**
     * Retrieves the details for this site.
     *
     * This method is used internally to lazy-load the extended properties of a site.
     *
     * @since 4.6.0
     *
     * @see WP_Site::__get()
     *
     * @return stdClass A raw site object with all details included.
     */
    private function get_details()
    {
    }
}
/**
 * Taxonomy API: WP_Tax_Query class
 *
 * @package WordPress
 * @subpackage Taxonomy
 * @since 4.4.0
 */
/**
 * Core class used to implement taxonomy queries for the Taxonomy API.
 *
 * Used for generating SQL clauses that filter a primary query according to object
 * taxonomy terms.
 *
 * WP_Tax_Query is a helper that allows primary query classes, such as WP_Query, to filter
 * their results by object metadata, by generating `JOIN` and `WHERE` subclauses to be
 * attached to the primary SQL query string.
 *
 * @since 3.1.0
 */
class WP_Tax_Query
{
    /**
     * Array of taxonomy queries.
     *
     * See WP_Tax_Query::__construct() for information on tax query arguments.
     *
     * @since 3.1.0
     * @var array
     */
    public $queries = array();
    /**
     * The relation between the queries. Can be one of 'AND' or 'OR'.
     *
     * @since 3.1.0
     * @var string
     */
    public $relation;
    /**
     * Standard response when the query should not return any rows.
     *
     * @since 3.2.0
     *
     * @static
     * @var string
     */
    private static $no_results = array('join' => array(''), 'where' => array('0 = 1'));
    /**
     * A flat list of table aliases used in the JOIN clauses.
     *
     * @since 4.1.0
     * @var array
     */
    protected $table_aliases = array();
    /**
     * Terms and taxonomies fetched by this query.
     *
     * We store this data in a flat array because they are referenced in a
     * number of places by WP_Query.
     *
     * @since 4.1.0
     * @var array
     */
    public $queried_terms = array();
    /**
     * Database table that where the metadata's objects are stored (eg $wpdb->users).
     *
     * @since 4.1.0
     * @var string
     */
    public $primary_table;
    /**
     * Column in 'primary_table' that represents the ID of the object.
     *
     * @since 4.1.0
     * @var string
     */
    public $primary_id_column;
    /**
     * Constructor.
     *
     * @since 3.1.0
     * @since 4.1.0 Added support for `$operator` 'NOT EXISTS' and 'EXISTS' values.
     *
     * @param array $tax_query {
     *     Array of taxonomy query clauses.
     *
     *     @type string $relation Optional. The MySQL keyword used to join
     *                            the clauses of the query. Accepts 'AND', or 'OR'. Default 'AND'.
     *     @type array {
     *         Optional. An array of first-order clause parameters, or another fully-formed tax query.
     *
     *         @type string           $taxonomy         Taxonomy being queried. Optional when field=term_taxonomy_id.
     *         @type string|int|array $terms            Term or terms to filter by.
     *         @type string           $field            Field to match $terms against. Accepts 'term_id', 'slug',
     *                                                 'name', or 'term_taxonomy_id'. Default: 'term_id'.
     *         @type string           $operator         MySQL operator to be used with $terms in the WHERE clause.
     *                                                  Accepts 'AND', 'IN', 'NOT IN', 'EXISTS', 'NOT EXISTS'.
     *                                                  Default: 'IN'.
     *         @type bool             $include_children Optional. Whether to include child terms.
     *                                                  Requires a $taxonomy. Default: true.
     *     }
     * }
     */
    public function __construct($tax_query)
    {
    }
    /**
     * Ensure the 'tax_query' argument passed to the class constructor is well-formed.
     *
     * Ensures that each query-level clause has a 'relation' key, and that
     * each first-order clause contains all the necessary keys from `$defaults`.
     *
     * @since 4.1.0
     *
     * @param array $queries Array of queries clauses.
     * @return array Sanitized array of query clauses.
     */
    public function sanitize_query($queries)
    {
    }
    /**
     * Sanitize a 'relation' operator.
     *
     * @since 4.1.0
     *
     * @param string $relation Raw relation key from the query argument.
     * @return string Sanitized relation ('AND' or 'OR').
     */
    public function sanitize_relation($relation)
    {
    }
    /**
     * Determine whether a clause is first-order.
     *
     * A "first-order" clause is one that contains any of the first-order
     * clause keys ('terms', 'taxonomy', 'include_children', 'field',
     * 'operator'). An empty clause also counts as a first-order clause,
     * for backward compatibility. Any clause that doesn't meet this is
     * determined, by process of elimination, to be a higher-order query.
     *
     * @since 4.1.0
     *
     * @static
     *
     * @param array $query Tax query arguments.
     * @return bool Whether the query clause is a first-order clause.
     */
    protected static function is_first_order_clause($query)
    {
    }
    /**
     * Generates SQL clauses to be appended to a main query.
     *
     * @since 3.1.0
     *
     * @static
     *
     * @param string $primary_table     Database table where the object being filtered is stored (eg wp_users).
     * @param string $primary_id_column ID column for the filtered object in $primary_table.
     * @return array {
     *     Array containing JOIN and WHERE SQL clauses to append to the main query.
     *
     *     @type string $join  SQL fragment to append to the main JOIN clause.
     *     @type string $where SQL fragment to append to the main WHERE clause.
     * }
     */
    public function get_sql($primary_table, $primary_id_column)
    {
    }
    /**
     * Generate SQL clauses to be appended to a main query.
     *
     * Called by the public WP_Tax_Query::get_sql(), this method
     * is abstracted out to maintain parity with the other Query classes.
     *
     * @since 4.1.0
     *
     * @return array {
     *     Array containing JOIN and WHERE SQL clauses to append to the main query.
     *
     *     @type string $join  SQL fragment to append to the main JOIN clause.
     *     @type string $where SQL fragment to append to the main WHERE clause.
     * }
     */
    protected function get_sql_clauses()
    {
    }
    /**
     * Generate SQL clauses for a single query array.
     *
     * If nested subqueries are found, this method recurses the tree to
     * produce the properly nested SQL.
     *
     * @since 4.1.0
     *
     * @param array $query Query to parse (passed by reference).
     * @param int   $depth Optional. Number of tree levels deep we currently are.
     *                     Used to calculate indentation. Default 0.
     * @return array {
     *     Array containing JOIN and WHERE SQL clauses to append to a single query array.
     *
     *     @type string $join  SQL fragment to append to the main JOIN clause.
     *     @type string $where SQL fragment to append to the main WHERE clause.
     * }
     */
    protected function get_sql_for_query(&$query, $depth = 0)
    {
    }
    /**
     * Generate SQL JOIN and WHERE clauses for a "first-order" query clause.
     *
     * @since 4.1.0
     *
     * @global wpdb $wpdb The WordPress database abstraction object.
     *
     * @param array $clause       Query clause (passed by reference).
     * @param array $parent_query Parent query array.
     * @return array {
     *     Array containing JOIN and WHERE SQL clauses to append to a first-order query.
     *
     *     @type string $join  SQL fragment to append to the main JOIN clause.
     *     @type string $where SQL fragment to append to the main WHERE clause.
     * }
     */
    public function get_sql_for_clause(&$clause, $parent_query)
    {
    }
    /**
     * Identify an existing table alias that is compatible with the current query clause.
     *
     * We avoid unnecessary table joins by allowing each clause to look for
     * an existing table alias that is compatible with the query that it
     * needs to perform.
     *
     * An existing alias is compatible if (a) it is a sibling of `$clause`
     * (ie, it's under the scope of the same relation), and (b) the combination
     * of operator and relation between the clauses allows for a shared table
     * join. In the case of WP_Tax_Query, this only applies to 'IN'
     * clauses that are connected by the relation 'OR'.
     *
     * @since 4.1.0
     *
     * @param array       $clause       Query clause.
     * @param array       $parent_query Parent query of $clause.
     * @return string|false Table alias if found, otherwise false.
     */
    protected function find_compatible_table_alias($clause, $parent_query)
    {
    }
    /**
     * Validates a single query.
     *
     * @since 3.2.0
     *
     * @param array $query The single query. Passed by reference.
     */
    private function clean_query(&$query)
    {
    }
    /**
     * Transforms a single query, from one field to another.
     *
     * Operates on the `$query` object by reference. In the case of error,
     * `$query` is converted to a WP_Error object.
     *
     * @since 3.2.0
     *
     * @global wpdb $wpdb The WordPress database abstraction object.
     *
     * @param array  $query           The single query. Passed by reference.
     * @param string $resulting_field The resulting field. Accepts 'slug', 'name', 'term_taxonomy_id',
     *                                or 'term_id'. Default 'term_id'.
     */
    public function transform_query(&$query, $resulting_field)
    {
    }
}
/**
 * Taxonomy API: WP_Taxonomy class
 *
 * @package WordPress
 * @subpackage Taxonomy
 * @since 4.7.0
 */
/**
 * Core class used for interacting with taxonomies.
 *
 * @since 4.7.0
 */
final class WP_Taxonomy
{
    /**
     * Taxonomy key.
     *
     * @since 4.7.0
     * @var string
     */
    public $name;
    /**
     * Name of the taxonomy shown in the menu. Usually plural.
     *
     * @since 4.7.0
     * @var string
     */
    public $label;
    /**
     * An array of labels for this taxonomy.
     *
     * @since 4.7.0
     * @var object
     */
    public $labels = array();
    /**
     * A short descriptive summary of what the taxonomy is for.
     *
     * @since 4.7.0
     * @var string
     */
    public $description = '';
    /**
     * Whether a taxonomy is intended for use publicly either via the admin interface or by front-end users.
     *
     * @since 4.7.0
     * @var bool
     */
    public $public = \true;
    /**
     * Whether the taxonomy is publicly queryable.
     *
     * @since 4.7.0
     * @var bool
     */
    public $publicly_queryable = \true;
    /**
     * Whether the taxonomy is hierarchical.
     *
     * @since 4.7.0
     * @var bool
     */
    public $hierarchical = \false;
    /**
     * Whether to generate and allow a UI for managing terms in this taxonomy in the admin.
     *
     * @since 4.7.0
     * @var bool
     */
    public $show_ui = \true;
    /**
     * Whether to show the taxonomy in the admin menu.
     *
     * If true, the taxonomy is shown as a submenu of the object type menu. If false, no menu is shown.
     *
     * @since 4.7.0
     * @var bool
     */
    public $show_in_menu = \true;
    /**
     * Whether the taxonomy is available for selection in navigation menus.
     *
     * @since 4.7.0
     * @var bool
     */
    public $show_in_nav_menus = \true;
    /**
     * Whether to list the taxonomy in the tag cloud widget controls.
     *
     * @since 4.7.0
     * @var bool
     */
    public $show_tagcloud = \true;
    /**
     * Whether to show the taxonomy in the quick/bulk edit panel.
     *
     * @since 4.7.0
     * @var bool
     */
    public $show_in_quick_edit = \true;
    /**
     * Whether to display a column for the taxonomy on its post type listing screens.
     *
     * @since 4.7.0
     * @var bool
     */
    public $show_admin_column = \false;
    /**
     * The callback function for the meta box display.
     *
     * @since 4.7.0
     * @var bool|callable
     */
    public $meta_box_cb = \null;
    /**
     * An array of object types this taxonomy is registered for.
     *
     * @since 4.7.0
     * @var array
     */
    public $object_type = \null;
    /**
     * Capabilities for this taxonomy.
     *
     * @since 4.7.0
     * @var array
     */
    public $cap;
    /**
     * Rewrites information for this taxonomy.
     *
     * @since 4.7.0
     * @var array|false
     */
    public $rewrite;
    /**
     * Query var string for this taxonomy.
     *
     * @since 4.7.0
     * @var string|false
     */
    public $query_var;
    /**
     * Function that will be called when the count is updated.
     *
     * @since 4.7.0
     * @var callable
     */
    public $update_count_callback;
    /**
     * Whether this taxonomy should appear in the REST API.
     *
     * Default false. If true, standard endpoints will be registered with
     * respect to $rest_base and $rest_controller_class.
     *
     * @since 4.7.4
     * @var bool $show_in_rest
     */
    public $show_in_rest;
    /**
     * The base path for this taxonomy's REST API endpoints.
     *
     * @since 4.7.4
     * @var string|bool $rest_base
     */
    public $rest_base;
    /**
     * The controller for this taxonomy's REST API endpoints.
     *
     * Custom controllers must extend WP_REST_Controller.
     *
     * @since 4.7.4
     * @var string|bool $rest_controller_class
     */
    public $rest_controller_class;
    /**
     * Whether it is a built-in taxonomy.
     *
     * @since 4.7.0
     * @var bool
     */
    public $_builtin;
    /**
     * Constructor.
     *
     * @since 4.7.0
     *
     * @global WP $wp WP instance.
     *
     * @param string       $taxonomy    Taxonomy key, must not exceed 32 characters.
     * @param array|string $object_type Name of the object type for the taxonomy object.
     * @param array|string $args        Optional. Array or query string of arguments for registering a taxonomy.
     *                                  Default empty array.
     */
    public function __construct($taxonomy, $object_type, $args = array())
    {
    }
    /**
     * Sets taxonomy properties.
     *
     * @since 4.7.0
     *
     * @param array|string $object_type Name of the object type for the taxonomy object.
     * @param array|string $args        Array or query string of arguments for registering a taxonomy.
     */
    public function set_props($object_type, $args)
    {
    }
    /**
     * Adds the necessary rewrite rules for the taxonomy.
     *
     * @since 4.7.0
     *
     * @global WP $wp Current WordPress environment instance.
     */
    public function add_rewrite_rules()
    {
    }
    /**
     * Removes any rewrite rules, permastructs, and rules for the taxonomy.
     *
     * @since 4.7.0
     *
     * @global WP $wp Current WordPress environment instance.
     */
    public function remove_rewrite_rules()
    {
    }
    /**
     * Registers the ajax callback for the meta box.
     *
     * @since 4.7.0
     */
    public function add_hooks()
    {
    }
    /**
     * Removes the ajax callback for the meta box.
     *
     * @since 4.7.0
     */
    public function remove_hooks()
    {
    }
}
/**
 * Taxonomy API: WP_Term_Query class.
 *
 * @package WordPress
 * @subpackage Taxonomy
 * @since 4.6.0
 */
/**
 * Class used for querying terms.
 *
 * @since 4.6.0
 *
 * @see WP_Term_Query::__construct() for accepted arguments.
 */
class WP_Term_Query
{
    /**
     * SQL string used to perform database query.
     *
     * @since 4.6.0
     * @var string
     */
    public $request;
    /**
     * Metadata query container.
     *
     * @since 4.6.0
     * @var object WP_Meta_Query
     */
    public $meta_query = \false;
    /**
     * Metadata query clauses.
     *
     * @since 4.6.0
     * @var array
     */
    protected $meta_query_clauses;
    /**
     * SQL query clauses.
     *
     * @since 4.6.0
     * @var array
     */
    protected $sql_clauses = array('select' => '', 'from' => '', 'where' => array(), 'orderby' => '', 'limits' => '');
    /**
     * Query vars set by the user.
     *
     * @since 4.6.0
     * @var array
     */
    public $query_vars;
    /**
     * Default values for query vars.
     *
     * @since 4.6.0
     * @var array
     */
    public $query_var_defaults;
    /**
     * List of terms located by the query.
     *
     * @since 4.6.0
     * @var array
     */
    public $terms;
    /**
     * Constructor.
     *
     * Sets up the term query, based on the query vars passed.
     *
     * @since 4.6.0
     * @since 4.6.0 Introduced 'term_taxonomy_id' parameter.
     * @since 4.7.0 Introduced 'object_ids' parameter.
     * @since 4.9.0 Added 'slug__in' support for 'orderby'.
     *
     * @param string|array $query {
     *     Optional. Array or query string of term query parameters. Default empty.
     *
     *     @type string|array $taxonomy               Taxonomy name, or array of taxonomies, to which results should
     *                                                be limited.
     *     @type int|array    $object_ids             Optional. Object ID, or array of object IDs. Results will be
     *                                                limited to terms associated with these objects.
     *     @type string       $orderby                Field(s) to order terms by. Accepts term fields ('name',
     *                                                'slug', 'term_group', 'term_id', 'id', 'description', 'parent'),
     *                                                'count' for term taxonomy count, 'include' to match the
     *                                                'order' of the $include param, 'slug__in' to match the
     *                                                'order' of the $slug param, 'meta_value', 'meta_value_num',
     *                                                the value of `$meta_key`, the array keys of `$meta_query`, or
     *                                                'none' to omit the ORDER BY clause. Defaults to 'name'.
     *     @type string       $order                  Whether to order terms in ascending or descending order.
     *                                                Accepts 'ASC' (ascending) or 'DESC' (descending).
     *                                                Default 'ASC'.
     *     @type bool|int     $hide_empty             Whether to hide terms not assigned to any posts. Accepts
     *                                                1|true or 0|false. Default 1|true.
     *     @type array|string $include                Array or comma/space-separated string of term ids to include.
     *                                                Default empty array.
     *     @type array|string $exclude                Array or comma/space-separated string of term ids to exclude.
     *                                                If $include is non-empty, $exclude is ignored.
     *                                                Default empty array.
     *     @type array|string $exclude_tree           Array or comma/space-separated string of term ids to exclude
     *                                                along with all of their descendant terms. If $include is
     *                                                non-empty, $exclude_tree is ignored. Default empty array.
     *     @type int|string   $number                 Maximum number of terms to return. Accepts ''|0 (all) or any
     *                                                positive number. Default ''|0 (all). Note that $number may
     *                                                not return accurate results when coupled with $object_ids.
     *                                                See #41796 for details.
     *     @type int          $offset                 The number by which to offset the terms query. Default empty.
     *     @type string       $fields                 Term fields to query for. Accepts 'all' (returns an array of
     *                                                complete term objects), 'all_with_object_id' (returns an
     *                                                array of term objects with the 'object_id' param; only works
     *                                                when the `$fields` parameter is 'object_ids' ), 'ids'
     *                                                (returns an array of ids), 'tt_ids' (returns an array of
     *                                                term taxonomy ids), 'id=>parent' (returns an associative
     *                                                array with ids as keys, parent term IDs as values), 'names'
     *                                                (returns an array of term names), 'count' (returns the number
     *                                                of matching terms), 'id=>name' (returns an associative array
     *                                                with ids as keys, term names as values), or 'id=>slug'
     *                                                (returns an associative array with ids as keys, term slugs
     *                                                as values). Default 'all'.
     *     @type bool         $count                  Whether to return a term count (true) or array of term objects
     *                                                (false). Will take precedence over `$fields` if true.
     *                                                Default false.
     *     @type string|array $name                   Optional. Name or array of names to return term(s) for.
     *                                                Default empty.
     *     @type string|array $slug                   Optional. Slug or array of slugs to return term(s) for.
     *                                                Default empty.
     *     @type int|array    $term_taxonomy_id       Optional. Term taxonomy ID, or array of term taxonomy IDs,
     *                                                to match when querying terms.
     *     @type bool         $hierarchical           Whether to include terms that have non-empty descendants (even
     *                                                if $hide_empty is set to true). Default true.
     *     @type string       $search                 Search criteria to match terms. Will be SQL-formatted with
     *                                                wildcards before and after. Default empty.
     *     @type string       $name__like             Retrieve terms with criteria by which a term is LIKE
     *                                                `$name__like`. Default empty.
     *     @type string       $description__like      Retrieve terms where the description is LIKE
     *                                                `$description__like`. Default empty.
     *     @type bool         $pad_counts             Whether to pad the quantity of a term's children in the
     *                                                quantity of each term's "count" object variable.
     *                                                Default false.
     *     @type string       $get                    Whether to return terms regardless of ancestry or whether the
     *                                                terms are empty. Accepts 'all' or empty (disabled).
     *                                                Default empty.
     *     @type int          $child_of               Term ID to retrieve child terms of. If multiple taxonomies
     *                                                are passed, $child_of is ignored. Default 0.
     *     @type int|string   $parent                 Parent term ID to retrieve direct-child terms of.
     *                                                Default empty.
     *     @type bool         $childless              True to limit results to terms that have no children.
     *                                                This parameter has no effect on non-hierarchical taxonomies.
     *                                                Default false.
     *     @type string       $cache_domain           Unique cache key to be produced when this query is stored in
     *                                                an object cache. Default is 'core'.
     *     @type bool         $update_term_meta_cache Whether to prime meta caches for matched terms. Default true.
     *     @type array        $meta_query             Optional. Meta query clauses to limit retrieved terms by.
     *                                                See `WP_Meta_Query`. Default empty.
     *     @type string       $meta_key               Limit terms to those matching a specific metadata key.
     *                                                Can be used in conjunction with `$meta_value`. Default empty.
     *     @type string       $meta_value             Limit terms to those matching a specific metadata value.
     *                                                Usually used in conjunction with `$meta_key`. Default empty.
     *     @type string       $meta_type              MySQL data type that the `$meta_value` will be CAST to for
     *                                                comparisons. Default empty.
     *     @type string       $meta_compare           Comparison operator to test the 'meta_value'. Default empty.
     * }
     */
    public function __construct($query = '')
    {
    }
    /**
     * Parse arguments passed to the term query with default query parameters.
     *
     * @since 4.6.0
     *
     * @param string|array $query WP_Term_Query arguments. See WP_Term_Query::__construct()
     */
    public function parse_query($query = '')
    {
    }
    /**
     * Sets up the query for retrieving terms.
     *
     * @since 4.6.0
     *
     * @param string|array $query Array or URL query string of parameters.
     * @return array|int List of terms, or number of terms when 'count' is passed as a query var.
     */
    public function query($query)
    {
    }
    /**
     * Get terms, based on query_vars.
     *
     * @since 4.6.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @return array List of terms.
     */
    public function get_terms()
    {
    }
    /**
     * Parse and sanitize 'orderby' keys passed to the term query.
     *
     * @since 4.6.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param string $orderby_raw Alias for the field to order by.
     * @return string|false Value to used in the ORDER clause. False otherwise.
     */
    protected function parse_orderby($orderby_raw)
    {
    }
    /**
     * Generate the ORDER BY clause for an 'orderby' param that is potentially related to a meta query.
     *
     * @since 4.6.0
     *
     * @param string $orderby_raw Raw 'orderby' value passed to WP_Term_Query.
     * @return string ORDER BY clause.
     */
    protected function parse_orderby_meta($orderby_raw)
    {
    }
    /**
     * Parse an 'order' query variable and cast it to ASC or DESC as necessary.
     *
     * @since 4.6.0
     *
     * @param string $order The 'order' query variable.
     * @return string The sanitized 'order' query variable.
     */
    protected function parse_order($order)
    {
    }
    /**
     * Used internally to generate a SQL string related to the 'search' parameter.
     *
     * @since 4.6.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param string $string
     * @return string
     */
    protected function get_search_sql($string)
    {
    }
    /**
     * Creates an array of term objects from an array of term IDs.
     *
     * Also discards invalid term objects.
     *
     * @since 4.9.8
     *
     * @param array $term_ids Term IDs.
     * @return array
     */
    protected function populate_terms($term_ids)
    {
    }
}
/**
 * Taxonomy API: WP_Term class
 *
 * @package WordPress
 * @subpackage Taxonomy
 * @since 4.4.0
 */
/**
 * Core class used to implement the WP_Term object.
 *
 * @since 4.4.0
 *
 * @property-read object $data Sanitized term data.
 */
final class WP_Term
{
    /**
     * Term ID.
     *
     * @since 4.4.0
     * @var int
     */
    public $term_id;
    /**
     * The term's name.
     *
     * @since 4.4.0
     * @var string
     */
    public $name = '';
    /**
     * The term's slug.
     *
     * @since 4.4.0
     * @var string
     */
    public $slug = '';
    /**
     * The term's term_group.
     *
     * @since 4.4.0
     * @var string
     */
    public $term_group = '';
    /**
     * Term Taxonomy ID.
     *
     * @since 4.4.0
     * @var int
     */
    public $term_taxonomy_id = 0;
    /**
     * The term's taxonomy name.
     *
     * @since 4.4.0
     * @var string
     */
    public $taxonomy = '';
    /**
     * The term's description.
     *
     * @since 4.4.0
     * @var string
     */
    public $description = '';
    /**
     * ID of a term's parent term.
     *
     * @since 4.4.0
     * @var int
     */
    public $parent = 0;
    /**
     * Cached object count for this term.
     *
     * @since 4.4.0
     * @var int
     */
    public $count = 0;
    /**
     * Stores the term object's sanitization level.
     *
     * Does not correspond to a database field.
     *
     * @since 4.4.0
     * @var string
     */
    public $filter = 'raw';
    /**
     * Retrieve WP_Term instance.
     *
     * @since 4.4.0
     * @static
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param int    $term_id  Term ID.
     * @param string $taxonomy Optional. Limit matched terms to those matching `$taxonomy`. Only used for
     *                         disambiguating potentially shared terms.
     * @return WP_Term|WP_Error|false Term object, if found. WP_Error if `$term_id` is shared between taxonomies and
     *                                there's insufficient data to distinguish which term is intended.
     *                                False for other failures.
     */
    public static function get_instance($term_id, $taxonomy = \null)
    {
    }
    /**
     * Constructor.
     *
     * @since 4.4.0
     *
     * @param WP_Term|object $term Term object.
     */
    public function __construct($term)
    {
    }
    /**
     * Sanitizes term fields, according to the filter type provided.
     *
     * @since 4.4.0
     *
     * @param string $filter Filter context. Accepts 'edit', 'db', 'display', 'attribute', 'js', 'raw'.
     */
    public function filter($filter)
    {
    }
    /**
     * Converts an object to array.
     *
     * @since 4.4.0
     *
     * @return array Object as array.
     */
    public function to_array()
    {
    }
    /**
     * Getter.
     *
     * @since 4.4.0
     *
     * @param string $key Property to get.
     * @return mixed Property value.
     */
    public function __get($key)
    {
    }
}
/**
 * Diff API: WP_Text_Diff_Renderer_inline class
 *
 * @package WordPress
 * @subpackage Diff
 * @since 4.7.0
 */
/**
 * Better word splitting than the PEAR package provides.
 *
 * @since 2.6.0
 * @uses Text_Diff_Renderer_inline Extends
 */
class WP_Text_Diff_Renderer_inline extends \Text_Diff_Renderer_inline
{
    /**
     * @ignore
     * @since 2.6.0
     *
     * @param string $string
     * @param string $newlineEscape
     * @return string
     */
    public function _splitOnWords($string, $newlineEscape = "\n")
    {
    }
}
/**
 * Diff API: WP_Text_Diff_Renderer_Table class
 *
 * @package WordPress
 * @subpackage Diff
 * @since 4.7.0
 */
/**
 * Table renderer to display the diff lines.
 *
 * @since 2.6.0
 * @uses Text_Diff_Renderer Extends
 */
class WP_Text_Diff_Renderer_Table extends \Text_Diff_Renderer
{
    /**
     * @see Text_Diff_Renderer::_leading_context_lines
     * @var int
     * @since 2.6.0
     */
    public $_leading_context_lines = 10000;
    /**
     * @see Text_Diff_Renderer::_trailing_context_lines
     * @var int
     * @since 2.6.0
     */
    public $_trailing_context_lines = 10000;
    /**
     * Threshold for when a diff should be saved or omitted.
     *
     * @var float
     * @since 2.6.0
     */
    protected $_diff_threshold = 0.6;
    /**
     * Inline display helper object name.
     *
     * @var string
     * @since 2.6.0
     */
    protected $inline_diff_renderer = 'WP_Text_Diff_Renderer_inline';
    /**
     * Should we show the split view or not
     *
     * @var string
     * @since 3.6.0
     */
    protected $_show_split_view = \true;
    protected $compat_fields = array('_show_split_view', 'inline_diff_renderer', '_diff_threshold');
    /**
     * Constructor - Call parent constructor with params array.
     *
     * This will set class properties based on the key value pairs in the array.
     *
     * @since 2.6.0
     *
     * @param array $params
     */
    public function __construct($params = array())
    {
    }
    /**
     * @ignore
     *
     * @param string $header
     * @return string
     */
    public function _startBlock($header)
    {
    }
    /**
     * @ignore
     *
     * @param array $lines
     * @param string $prefix
     */
    public function _lines($lines, $prefix = ' ')
    {
    }
    /**
     * @ignore
     *
     * @param string $line HTML-escape the value.
     * @return string
     */
    public function addedLine($line)
    {
    }
    /**
     * @ignore
     *
     * @param string $line HTML-escape the value.
     * @return string
     */
    public function deletedLine($line)
    {
    }
    /**
     * @ignore
     *
     * @param string $line HTML-escape the value.
     * @return string
     */
    public function contextLine($line)
    {
    }
    /**
     * @ignore
     *
     * @return string
     */
    public function emptyLine()
    {
    }
    /**
     * @ignore
     *
     * @param array $lines
     * @param bool $encode
     * @return string
     */
    public function _added($lines, $encode = \true)
    {
    }
    /**
     * @ignore
     *
     * @param array $lines
     * @param bool $encode
     * @return string
     */
    public function _deleted($lines, $encode = \true)
    {
    }
    /**
     * @ignore
     *
     * @param array $lines
     * @param bool $encode
     * @return string
     */
    public function _context($lines, $encode = \true)
    {
    }
    /**
     * Process changed lines to do word-by-word diffs for extra highlighting.
     *
     * (TRAC style) sometimes these lines can actually be deleted or added rows.
     * We do additional processing to figure that out
     *
     * @since 2.6.0
     *
     * @param array $orig
     * @param array $final
     * @return string
     */
    public function _changed($orig, $final)
    {
    }
    /**
     * Takes changed blocks and matches which rows in orig turned into which rows in final.
     *
     * @since 2.6.0
     *
     * @param array $orig  Lines of the original version of the text.
     * @param array $final Lines of the final version of the text.
     * @return array {
     *    Array containing results of comparing the original text to the final text.
     *
     *    @type array $orig_matches  Associative array of original matches. Index == row
     *                               number of `$orig`, value == corresponding row number
     *                               of that same line in `$final` or 'x' if there is no
     *                               corresponding row (indicating it is a deleted line).
     *    @type array $final_matches Associative array of final matches. Index == row
     *                               number of `$final`, value == corresponding row number
     *                               of that same line in `$orig` or 'x' if there is no
     *                               corresponding row (indicating it is a new line).
     *    @type array $orig_rows     Associative array of interleaved rows of `$orig` with
     *                               blanks to keep matches aligned with side-by-side diff
     *                               of `$final`. A value >= 0 corresponds to index of `$orig`.
     *                               Value < 0 indicates a blank row.
     *    @type array $final_rows    Associative array of interleaved rows of `$final` with
     *                               blanks to keep matches aligned with side-by-side diff
     *                               of `$orig`. A value >= 0 corresponds to index of `$final`.
     *                               Value < 0 indicates a blank row.
     * }
     */
    public function interleave_changed_lines($orig, $final)
    {
    }
    /**
     * Computes a number that is intended to reflect the "distance" between two strings.
     *
     * @since 2.6.0
     *
     * @param string $string1
     * @param string $string2
     * @return int
     */
    public function compute_string_distance($string1, $string2)
    {
    }
    /**
     * @ignore
     * @since 2.6.0
     *
     * @param int $a
     * @param int $b
     * @return int
     */
    public function difference($a, $b)
    {
    }
    /**
     * Make private properties readable for backward compatibility.
     *
     * @since 4.0.0
     *
     * @param string $name Property to get.
     * @return mixed Property.
     */
    public function __get($name)
    {
    }
    /**
     * Make private properties settable for backward compatibility.
     *
     * @since 4.0.0
     *
     * @param string $name  Property to check if set.
     * @param mixed  $value Property value.
     * @return mixed Newly-set property.
     */
    public function __set($name, $value)
    {
    }
    /**
     * Make private properties checkable for backward compatibility.
     *
     * @since 4.0.0
     *
     * @param string $name Property to check if set.
     * @return bool Whether the property is set.
     */
    public function __isset($name)
    {
    }
    /**
     * Make private properties un-settable for backward compatibility.
     *
     * @since 4.0.0
     *
     * @param string $name Property to unset.
     */
    public function __unset($name)
    {
    }
}
/**
 * WP_Theme Class
 *
 * @package WordPress
 * @subpackage Theme
 * @since 3.4.0
 */
final class WP_Theme implements \ArrayAccess
{
    /**
     * Whether the theme has been marked as updateable.
     *
     * @since 4.4.0
     * @var bool
     *
     * @see WP_MS_Themes_List_Table
     */
    public $update = \false;
    /**
     * Headers for style.css files.
     *
     * @static
     * @var array
     */
    private static $file_headers = array('Name' => 'Theme Name', 'ThemeURI' => 'Theme URI', 'Description' => 'Description', 'Author' => 'Author', 'AuthorURI' => 'Author URI', 'Version' => 'Version', 'Template' => 'Template', 'Status' => 'Status', 'Tags' => 'Tags', 'TextDomain' => 'Text Domain', 'DomainPath' => 'Domain Path');
    /**
     * Default themes.
     *
     * @static
     * @var array
     */
    private static $default_themes = array('classic' => 'WordPress Classic', 'default' => 'WordPress Default', 'twentyten' => 'Twenty Ten', 'twentyeleven' => 'Twenty Eleven', 'twentytwelve' => 'Twenty Twelve', 'twentythirteen' => 'Twenty Thirteen', 'twentyfourteen' => 'Twenty Fourteen', 'twentyfifteen' => 'Twenty Fifteen', 'twentysixteen' => 'Twenty Sixteen', 'twentyseventeen' => 'Twenty Seventeen');
    /**
     * Renamed theme tags.
     *
     * @static
     * @var array
     */
    private static $tag_map = array('fixed-width' => 'fixed-layout', 'flexible-width' => 'fluid-layout');
    /**
     * Absolute path to the theme root, usually wp-content/themes
     *
     * @var string
     */
    private $theme_root;
    /**
     * Header data from the theme's style.css file.
     *
     * @var array
     */
    private $headers = array();
    /**
     * Header data from the theme's style.css file after being sanitized.
     *
     * @var array
     */
    private $headers_sanitized;
    /**
     * Header name from the theme's style.css after being translated.
     *
     * Cached due to sorting functions running over the translated name.
     *
     * @var string
     */
    private $name_translated;
    /**
     * Errors encountered when initializing the theme.
     *
     * @var WP_Error
     */
    private $errors;
    /**
     * The directory name of the theme's files, inside the theme root.
     *
     * In the case of a child theme, this is directory name of the child theme.
     * Otherwise, 'stylesheet' is the same as 'template'.
     *
     * @var string
     */
    private $stylesheet;
    /**
     * The directory name of the theme's files, inside the theme root.
     *
     * In the case of a child theme, this is the directory name of the parent theme.
     * Otherwise, 'template' is the same as 'stylesheet'.
     *
     * @var string
     */
    private $template;
    /**
     * A reference to the parent theme, in the case of a child theme.
     *
     * @var WP_Theme
     */
    private $parent;
    /**
     * URL to the theme root, usually an absolute URL to wp-content/themes
     *
     * @var string
     */
    private $theme_root_uri;
    /**
     * Flag for whether the theme's textdomain is loaded.
     *
     * @var bool
     */
    private $textdomain_loaded;
    /**
     * Stores an md5 hash of the theme root, to function as the cache key.
     *
     * @var string
     */
    private $cache_hash;
    /**
     * Flag for whether the themes cache bucket should be persistently cached.
     *
     * Default is false. Can be set with the {@see 'wp_cache_themes_persistently'} filter.
     *
     * @static
     * @var bool
     */
    private static $persistently_cache;
    /**
     * Expiration time for the themes cache bucket.
     *
     * By default the bucket is not cached, so this value is useless.
     *
     * @static
     * @var bool
     */
    private static $cache_expiration = 1800;
    /**
     * Constructor for WP_Theme.
     *
     * @since  3.4.0
     *
     * @global array $wp_theme_directories
     *
     * @param string $theme_dir Directory of the theme within the theme_root.
     * @param string $theme_root Theme root.
     * @param WP_Error|void $_child If this theme is a parent theme, the child may be passed for validation purposes.
     */
    public function __construct($theme_dir, $theme_root, $_child = \null)
    {
    }
    /**
     * When converting the object to a string, the theme name is returned.
     *
     * @since  3.4.0
     *
     * @return string Theme name, ready for display (translated)
     */
    public function __toString()
    {
    }
    /**
     * __isset() magic method for properties formerly returned by current_theme_info()
     *
     * @staticvar array $properties
     *
     * @since  3.4.0
     *
     * @param string $offset Property to check if set.
     * @return bool Whether the given property is set.
     */
    public function __isset($offset)
    {
    }
    /**
     * __get() magic method for properties formerly returned by current_theme_info()
     *
     * @since  3.4.0
     *
     * @param string $offset Property to get.
     * @return mixed Property value.
     */
    public function __get($offset)
    {
    }
    /**
     * Method to implement ArrayAccess for keys formerly returned by get_themes()
     *
     * @since  3.4.0
     *
     * @param mixed $offset
     * @param mixed $value
     */
    public function offsetSet($offset, $value)
    {
    }
    /**
     * Method to implement ArrayAccess for keys formerly returned by get_themes()
     *
     * @since  3.4.0
     *
     * @param mixed $offset
     */
    public function offsetUnset($offset)
    {
    }
    /**
     * Method to implement ArrayAccess for keys formerly returned by get_themes()
     *
     * @staticvar array $keys
     *
     * @since  3.4.0
     *
     * @param mixed $offset
     * @return bool
     */
    public function offsetExists($offset)
    {
    }
    /**
     * Method to implement ArrayAccess for keys formerly returned by get_themes().
     *
     * Author, Author Name, Author URI, and Description did not previously return
     * translated data. We are doing so now as it is safe to do. However, as
     * Name and Title could have been used as the key for get_themes(), both remain
     * untranslated for back compatibility. This means that ['Name'] is not ideal,
     * and care should be taken to use `$theme::display( 'Name' )` to get a properly
     * translated header.
     *
     * @since  3.4.0
     *
     * @param mixed $offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
    }
    /**
     * Returns errors property.
     *
     * @since 3.4.0
     *
     * @return WP_Error|false WP_Error if there are errors, or false.
     */
    public function errors()
    {
    }
    /**
     * Whether the theme exists.
     *
     * A theme with errors exists. A theme with the error of 'theme_not_found',
     * meaning that the theme's directory was not found, does not exist.
     *
     * @since 3.4.0
     *
     * @return bool Whether the theme exists.
     */
    public function exists()
    {
    }
    /**
     * Returns reference to the parent theme.
     *
     * @since 3.4.0
     *
     * @return WP_Theme|false Parent theme, or false if the current theme is not a child theme.
     */
    public function parent()
    {
    }
    /**
     * Adds theme data to cache.
     *
     * Cache entries keyed by the theme and the type of data.
     *
     * @since 3.4.0
     *
     * @param string $key Type of data to store (theme, screenshot, headers, post_templates)
     * @param string $data Data to store
     * @return bool Return value from wp_cache_add()
     */
    private function cache_add($key, $data)
    {
    }
    /**
     * Gets theme data from cache.
     *
     * Cache entries are keyed by the theme and the type of data.
     *
     * @since 3.4.0
     *
     * @param string $key Type of data to retrieve (theme, screenshot, headers, post_templates)
     * @return mixed Retrieved data
     */
    private function cache_get($key)
    {
    }
    /**
     * Clears the cache for the theme.
     *
     * @since 3.4.0
     */
    public function cache_delete()
    {
    }
    /**
     * Get a raw, unformatted theme header.
     *
     * The header is sanitized, but is not translated, and is not marked up for display.
     * To get a theme header for display, use the display() method.
     *
     * Use the get_template() method, not the 'Template' header, for finding the template.
     * The 'Template' header is only good for what was written in the style.css, while
     * get_template() takes into account where WordPress actually located the theme and
     * whether it is actually valid.
     *
     * @since 3.4.0
     *
     * @param string $header Theme header. Name, Description, Author, Version, ThemeURI, AuthorURI, Status, Tags.
     * @return string|false String on success, false on failure.
     */
    public function get($header)
    {
    }
    /**
     * Gets a theme header, formatted and translated for display.
     *
     * @since 3.4.0
     *
     * @param string $header Theme header. Name, Description, Author, Version, ThemeURI, AuthorURI, Status, Tags.
     * @param bool $markup Optional. Whether to mark up the header. Defaults to true.
     * @param bool $translate Optional. Whether to translate the header. Defaults to true.
     * @return string|false Processed header, false on failure.
     */
    public function display($header, $markup = \true, $translate = \true)
    {
    }
    /**
     * Sanitize a theme header.
     *
     * @since 3.4.0
     *
     * @staticvar array $header_tags
     * @staticvar array $header_tags_with_a
     *
     * @param string $header Theme header. Name, Description, Author, Version, ThemeURI, AuthorURI, Status, Tags.
     * @param string $value Value to sanitize.
     * @return mixed
     */
    private function sanitize_header($header, $value)
    {
    }
    /**
     * Mark up a theme header.
     *
     * @since 3.4.0
     *
     * @staticvar string $comma
     *
     * @param string $header Theme header. Name, Description, Author, Version, ThemeURI, AuthorURI, Status, Tags.
     * @param string $value Value to mark up.
     * @param string $translate Whether the header has been translated.
     * @return string Value, marked up.
     */
    private function markup_header($header, $value, $translate)
    {
    }
    /**
     * Translate a theme header.
     *
     * @since 3.4.0
     *
     * @staticvar array $tags_list
     *
     * @param string $header Theme header. Name, Description, Author, Version, ThemeURI, AuthorURI, Status, Tags.
     * @param string $value Value to translate.
     * @return string Translated value.
     */
    private function translate_header($header, $value)
    {
    }
    /**
     * The directory name of the theme's "stylesheet" files, inside the theme root.
     *
     * In the case of a child theme, this is directory name of the child theme.
     * Otherwise, get_stylesheet() is the same as get_template().
     *
     * @since 3.4.0
     *
     * @return string Stylesheet
     */
    public function get_stylesheet()
    {
    }
    /**
     * The directory name of the theme's "template" files, inside the theme root.
     *
     * In the case of a child theme, this is the directory name of the parent theme.
     * Otherwise, the get_template() is the same as get_stylesheet().
     *
     * @since 3.4.0
     *
     * @return string Template
     */
    public function get_template()
    {
    }
    /**
     * Returns the absolute path to the directory of a theme's "stylesheet" files.
     *
     * In the case of a child theme, this is the absolute path to the directory
     * of the child theme's files.
     *
     * @since 3.4.0
     *
     * @return string Absolute path of the stylesheet directory.
     */
    public function get_stylesheet_directory()
    {
    }
    /**
     * Returns the absolute path to the directory of a theme's "template" files.
     *
     * In the case of a child theme, this is the absolute path to the directory
     * of the parent theme's files.
     *
     * @since 3.4.0
     *
     * @return string Absolute path of the template directory.
     */
    public function get_template_directory()
    {
    }
    /**
     * Returns the URL to the directory of a theme's "stylesheet" files.
     *
     * In the case of a child theme, this is the URL to the directory of the
     * child theme's files.
     *
     * @since 3.4.0
     *
     * @return string URL to the stylesheet directory.
     */
    public function get_stylesheet_directory_uri()
    {
    }
    /**
     * Returns the URL to the directory of a theme's "template" files.
     *
     * In the case of a child theme, this is the URL to the directory of the
     * parent theme's files.
     *
     * @since 3.4.0
     *
     * @return string URL to the template directory.
     */
    public function get_template_directory_uri()
    {
    }
    /**
     * The absolute path to the directory of the theme root.
     *
     * This is typically the absolute path to wp-content/themes.
     *
     * @since 3.4.0
     *
     * @return string Theme root.
     */
    public function get_theme_root()
    {
    }
    /**
     * Returns the URL to the directory of the theme root.
     *
     * This is typically the absolute URL to wp-content/themes. This forms the basis
     * for all other URLs returned by WP_Theme, so we pass it to the public function
     * get_theme_root_uri() and allow it to run the {@see 'theme_root_uri'} filter.
     *
     * @since 3.4.0
     *
     * @return string Theme root URI.
     */
    public function get_theme_root_uri()
    {
    }
    /**
     * Returns the main screenshot file for the theme.
     *
     * The main screenshot is called screenshot.png. gif and jpg extensions are also allowed.
     *
     * Screenshots for a theme must be in the stylesheet directory. (In the case of child
     * themes, parent theme screenshots are not inherited.)
     *
     * @since 3.4.0
     *
     * @param string $uri Type of URL to return, either 'relative' or an absolute URI. Defaults to absolute URI.
     * @return string|false Screenshot file. False if the theme does not have a screenshot.
     */
    public function get_screenshot($uri = 'uri')
    {
    }
    /**
     * Return files in the theme's directory.
     *
     * @since 3.4.0
     *
     * @param mixed $type Optional. Array of extensions to return. Defaults to all files (null).
     * @param int $depth Optional. How deep to search for files. Defaults to a flat scan (0 depth). -1 depth is infinite.
     * @param bool $search_parent Optional. Whether to return parent files. Defaults to false.
     * @return array Array of files, keyed by the path to the file relative to the theme's directory, with the values
     *               being absolute paths.
     */
    public function get_files($type = \null, $depth = 0, $search_parent = \false)
    {
    }
    /**
     * Returns the theme's post templates.
     *
     * @since 4.7.0
     *
     * @return array Array of page templates, keyed by filename and post type,
     *               with the value of the translated header name.
     */
    public function get_post_templates()
    {
    }
    /**
     * Returns the theme's post templates for a given post type.
     *
     * @since 3.4.0
     * @since 4.7.0 Added the `$post_type` parameter.
     *
     * @param WP_Post|null $post      Optional. The post being edited, provided for context.
     * @param string       $post_type Optional. Post type to get the templates for. Default 'page'.
     *                                If a post is provided, its post type is used.
     * @return array Array of page templates, keyed by filename, with the value of the translated header name.
     */
    public function get_page_templates($post = \null, $post_type = 'page')
    {
    }
    /**
     * Scans a directory for files of a certain extension.
     *
     * @since 3.4.0
     *
     * @static
     *
     * @param string            $path          Absolute path to search.
     * @param array|string|null $extensions    Optional. Array of extensions to find, string of a single extension,
     *                                         or null for all extensions. Default null.
     * @param int               $depth         Optional. How many levels deep to search for files. Accepts 0, 1+, or
     *                                         -1 (infinite depth). Default 0.
     * @param string            $relative_path Optional. The basename of the absolute path. Used to control the
     *                                         returned path for the found files, particularly when this function
     *                                         recurses to lower depths. Default empty.
     * @return array|false Array of files, keyed by the path to the file relative to the `$path` directory prepended
     *                     with `$relative_path`, with the values being absolute paths. False otherwise.
     */
    private static function scandir($path, $extensions = \null, $depth = 0, $relative_path = '')
    {
    }
    /**
     * Loads the theme's textdomain.
     *
     * Translation files are not inherited from the parent theme. Todo: if this fails for the
     * child theme, it should probably try to load the parent theme's translations.
     *
     * @since 3.4.0
     *
     * @return bool True if the textdomain was successfully loaded or has already been loaded.
     * 	False if no textdomain was specified in the file headers, or if the domain could not be loaded.
     */
    public function load_textdomain()
    {
    }
    /**
     * Whether the theme is allowed (multisite only).
     *
     * @since 3.4.0
     *
     * @param string $check Optional. Whether to check only the 'network'-wide settings, the 'site'
     * 	settings, or 'both'. Defaults to 'both'.
     * @param int $blog_id Optional. Ignored if only network-wide settings are checked. Defaults to current site.
     * @return bool Whether the theme is allowed for the network. Returns true in single-site.
     */
    public function is_allowed($check = 'both', $blog_id = \null)
    {
    }
    /**
     * Determines the latest WordPress default theme that is installed.
     *
     * This hits the filesystem.
     *
     * @since  4.4.0
     *
     * @return WP_Theme|false Object, or false if no theme is installed, which would be bad.
     */
    public static function get_core_default_theme()
    {
    }
    /**
     * Returns array of stylesheet names of themes allowed on the site or network.
     *
     * @since 3.4.0
     *
     * @static
     *
     * @param int $blog_id Optional. ID of the site. Defaults to the current site.
     * @return array Array of stylesheet names.
     */
    public static function get_allowed($blog_id = \null)
    {
    }
    /**
     * Returns array of stylesheet names of themes allowed on the network.
     *
     * @since 3.4.0
     *
     * @static
     *
     * @staticvar array $allowed_themes
     *
     * @return array Array of stylesheet names.
     */
    public static function get_allowed_on_network()
    {
    }
    /**
     * Returns array of stylesheet names of themes allowed on the site.
     *
     * @since 3.4.0
     *
     * @static
     *
     * @staticvar array $allowed_themes
     *
     * @param int $blog_id Optional. ID of the site. Defaults to the current site.
     * @return array Array of stylesheet names.
     */
    public static function get_allowed_on_site($blog_id = \null)
    {
    }
    /**
     * Enables a theme for all sites on the current network.
     *
     * @since 4.6.0
     * @static
     *
     * @param string|array $stylesheets Stylesheet name or array of stylesheet names.
     */
    public static function network_enable_theme($stylesheets)
    {
    }
    /**
     * Disables a theme for all sites on the current network.
     *
     * @since 4.6.0
     * @static
     *
     * @param string|array $stylesheets Stylesheet name or array of stylesheet names.
     */
    public static function network_disable_theme($stylesheets)
    {
    }
    /**
     * Sorts themes by name.
     *
     * @since 3.4.0
     *
     * @static
     *
     * @param array $themes Array of themes to sort (passed by reference).
     */
    public static function sort_by_name(&$themes)
    {
    }
    /**
     * Callback function for usort() to naturally sort themes by name.
     *
     * Accesses the Name header directly from the class for maximum speed.
     * Would choke on HTML but we don't care enough to slow it down with strip_tags().
     *
     * @since 3.4.0
     *
     * @static
     *
     * @param string $a First name.
     * @param string $b Second name.
     * @return int Negative if `$a` falls lower in the natural order than `$b`. Zero if they fall equally.
     *             Greater than 0 if `$a` falls higher in the natural order than `$b`. Used with usort().
     */
    private static function _name_sort($a, $b)
    {
    }
    /**
     * Name sort (with translation).
     *
     * @since 3.4.0
     *
     * @static
     *
     * @param string $a First name.
     * @param string $b Second name.
     * @return int Negative if `$a` falls lower in the natural order than `$b`. Zero if they fall equally.
     *             Greater than 0 if `$a` falls higher in the natural order than `$b`. Used with usort().
     */
    private static function _name_sort_i18n($a, $b)
    {
    }
}
/**
 * Session API: WP_User_Meta_Session_Tokens class
 *
 * @package WordPress
 * @subpackage Session
 * @since 4.7.0
 */
/**
 * Meta-based user sessions token manager.
 *
 * @since 4.0.0
 */
class WP_User_Meta_Session_Tokens extends \WP_Session_Tokens
{
    /**
     * Get all sessions of a user.
     *
     * @since 4.0.0
     *
     * @return array Sessions of a user.
     */
    protected function get_sessions()
    {
    }
    /**
     * Converts an expiration to an array of session information.
     *
     * @param mixed $session Session or expiration.
     * @return array Session.
     */
    protected function prepare_session($session)
    {
    }
    /**
     * Retrieve a session by its verifier (token hash).
     *
     * @since 4.0.0
     *
     * @param string $verifier Verifier of the session to retrieve.
     * @return array|null The session, or null if it does not exist
     */
    protected function get_session($verifier)
    {
    }
    /**
     * Update a session by its verifier.
     *
     * @since 4.0.0
     *
     * @param string $verifier Verifier of the session to update.
     * @param array  $session  Optional. Session. Omitting this argument destroys the session.
     */
    protected function update_session($verifier, $session = \null)
    {
    }
    /**
     * Update a user's sessions in the usermeta table.
     *
     * @since 4.0.0
     *
     * @param array $sessions Sessions.
     */
    protected function update_sessions($sessions)
    {
    }
    /**
     * Destroy all session tokens for a user, except a single session passed.
     *
     * @since 4.0.0
     *
     * @param string $verifier Verifier of the session to keep.
     */
    protected function destroy_other_sessions($verifier)
    {
    }
    /**
     * Destroy all session tokens for a user.
     *
     * @since 4.0.0
     */
    protected function destroy_all_sessions()
    {
    }
    /**
     * Destroy all session tokens for all users.
     *
     * @since 4.0.0
     * @static
     */
    public static function drop_sessions()
    {
    }
}
/**
 * User API: WP_User_Query class
 *
 * @package WordPress
 * @subpackage Users
 * @since 4.4.0
 */
/**
 * Core class used for querying users.
 *
 * @since 3.1.0
 *
 * @see WP_User_Query::prepare_query() for information on accepted arguments.
 */
class WP_User_Query
{
    /**
     * Query vars, after parsing
     *
     * @since 3.5.0
     * @var array
     */
    public $query_vars = array();
    /**
     * List of found user ids
     *
     * @since 3.1.0
     * @var array
     */
    private $results;
    /**
     * Total number of found users for the current query
     *
     * @since 3.1.0
     * @var int
     */
    private $total_users = 0;
    /**
     * Metadata query container.
     *
     * @since 4.2.0
     * @var WP_Meta_Query
     */
    public $meta_query = \false;
    /**
     * The SQL query used to fetch matching users.
     *
     * @since 4.4.0
     * @var string
     */
    public $request;
    private $compat_fields = array('results', 'total_users');
    // SQL clauses
    public $query_fields;
    public $query_from;
    public $query_where;
    public $query_orderby;
    public $query_limit;
    /**
     * PHP5 constructor.
     *
     * @since 3.1.0
     *
     * @param null|string|array $query Optional. The query variables.
     */
    public function __construct($query = \null)
    {
    }
    /**
     * Fills in missing query variables with default values.
     *
     * @since 4.4.0
     *
     * @param array $args Query vars, as passed to `WP_User_Query`.
     * @return array Complete query variables with undefined ones filled in with defaults.
     */
    public static function fill_query_vars($args)
    {
    }
    /**
     * Prepare the query variables.
     *
     * @since 3.1.0
     * @since 4.1.0 Added the ability to order by the `include` value.
     * @since 4.2.0 Added 'meta_value_num' support for `$orderby` parameter. Added multi-dimensional array syntax
     *              for `$orderby` parameter.
     * @since 4.3.0 Added 'has_published_posts' parameter.
     * @since 4.4.0 Added 'paged', 'role__in', and 'role__not_in' parameters. The 'role' parameter was updated to
     *              permit an array or comma-separated list of values. The 'number' parameter was updated to support
     *              querying for all users with using -1.
     * @since 4.7.0 Added 'nicename', 'nicename__in', 'nicename__not_in', 'login', 'login__in',
     *              and 'login__not_in' parameters.
     *
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     * @global int  $blog_id
     *
     * @param string|array $query {
     *     Optional. Array or string of Query parameters.
     *
     *     @type int          $blog_id             The site ID. Default is the current site.
     *     @type string|array $role                An array or a comma-separated list of role names that users must match
     *                                             to be included in results. Note that this is an inclusive list: users
     *                                             must match *each* role. Default empty.
     *     @type array        $role__in            An array of role names. Matched users must have at least one of these
     *                                             roles. Default empty array.
     *     @type array        $role__not_in        An array of role names to exclude. Users matching one or more of these
     *                                             roles will not be included in results. Default empty array.
     *     @type string       $meta_key            User meta key. Default empty.
     *     @type string       $meta_value          User meta value. Default empty.
     *     @type string       $meta_compare        Comparison operator to test the `$meta_value`. Accepts '=', '!=',
     *                                             '>', '>=', '<', '<=', 'LIKE', 'NOT LIKE', 'IN', 'NOT IN',
     *                                             'BETWEEN', 'NOT BETWEEN', 'EXISTS', 'NOT EXISTS', 'REGEXP',
     *                                             'NOT REGEXP', or 'RLIKE'. Default '='.
     *     @type array        $include             An array of user IDs to include. Default empty array.
     *     @type array        $exclude             An array of user IDs to exclude. Default empty array.
     *     @type string       $search              Search keyword. Searches for possible string matches on columns.
     *                                             When `$search_columns` is left empty, it tries to determine which
     *                                             column to search in based on search string. Default empty.
     *     @type array        $search_columns      Array of column names to be searched. Accepts 'ID', 'login',
     *                                             'nicename', 'email', 'url'. Default empty array.
     *     @type string|array $orderby             Field(s) to sort the retrieved users by. May be a single value,
     *                                             an array of values, or a multi-dimensional array with fields as
     *                                             keys and orders ('ASC' or 'DESC') as values. Accepted values are
     *                                             'ID', 'display_name' (or 'name'), 'include', 'user_login'
     *                                             (or 'login'), 'login__in', 'user_nicename' (or 'nicename'),
     *                                             'nicename__in', 'user_email (or 'email'), 'user_url' (or 'url'),
     *                                             'user_registered' (or 'registered'), 'post_count', 'meta_value',
     *                                             'meta_value_num', the value of `$meta_key`, or an array key of
     *                                             `$meta_query`. To use 'meta_value' or 'meta_value_num', `$meta_key`
     *                                             must be also be defined. Default 'user_login'.
     *     @type string       $order               Designates ascending or descending order of users. Order values
     *                                             passed as part of an `$orderby` array take precedence over this
     *                                             parameter. Accepts 'ASC', 'DESC'. Default 'ASC'.
     *     @type int          $offset              Number of users to offset in retrieved results. Can be used in
     *                                             conjunction with pagination. Default 0.
     *     @type int          $number              Number of users to limit the query for. Can be used in
     *                                             conjunction with pagination. Value -1 (all) is supported, but
     *                                             should be used with caution on larger sites.
     *                                             Default empty (all users).
     *     @type int          $paged               When used with number, defines the page of results to return.
     *                                             Default 1.
     *     @type bool         $count_total         Whether to count the total number of users found. If pagination
     *                                             is not needed, setting this to false can improve performance.
     *                                             Default true.
     *     @type string|array $fields              Which fields to return. Single or all fields (string), or array
     *                                             of fields. Accepts 'ID', 'display_name', 'user_login',
     *                                             'user_nicename', 'user_email', 'user_url', 'user_registered'.
     *                                             Use 'all' for all fields and 'all_with_meta' to include
     *                                             meta fields. Default 'all'.
     *     @type string       $who                 Type of users to query. Accepts 'authors'.
     *                                             Default empty (all users).
     *     @type bool|array   $has_published_posts Pass an array of post types to filter results to users who have
     *                                             published posts in those post types. `true` is an alias for all
     *                                             public post types.
     *     @type string       $nicename            The user nicename. Default empty.
     *     @type array        $nicename__in        An array of nicenames to include. Users matching one of these
     *                                             nicenames will be included in results. Default empty array.
     *     @type array        $nicename__not_in    An array of nicenames to exclude. Users matching one of these
     *                                             nicenames will not be included in results. Default empty array.
     *     @type string       $login               The user login. Default empty.
     *     @type array        $login__in           An array of logins to include. Users matching one of these
     *                                             logins will be included in results. Default empty array.
     *     @type array        $login__not_in       An array of logins to exclude. Users matching one of these
     *                                             logins will not be included in results. Default empty array.
     * }
     */
    public function prepare_query($query = array())
    {
    }
    /**
     * Execute the query, with the current variables.
     *
     * @since 3.1.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    public function query()
    {
    }
    /**
     * Retrieve query variable.
     *
     * @since 3.5.0
     *
     * @param string $query_var Query variable key.
     * @return mixed
     */
    public function get($query_var)
    {
    }
    /**
     * Set query variable.
     *
     * @since 3.5.0
     *
     * @param string $query_var Query variable key.
     * @param mixed $value Query variable value.
     */
    public function set($query_var, $value)
    {
    }
    /**
     * Used internally to generate an SQL string for searching across multiple columns
     *
     * @since 3.1.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param string $string
     * @param array  $cols
     * @param bool   $wild   Whether to allow wildcard searches. Default is false for Network Admin, true for single site.
     *                       Single site allows leading and trailing wildcards, Network Admin only trailing.
     * @return string
     */
    protected function get_search_sql($string, $cols, $wild = \false)
    {
    }
    /**
     * Return the list of users.
     *
     * @since 3.1.0
     *
     * @return array Array of results.
     */
    public function get_results()
    {
    }
    /**
     * Return the total number of users for the current query.
     *
     * @since 3.1.0
     *
     * @return int Number of total users.
     */
    public function get_total()
    {
    }
    /**
     * Parse and sanitize 'orderby' keys passed to the user query.
     *
     * @since 4.2.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param string $orderby Alias for the field to order by.
     * @return string Value to used in the ORDER clause, if `$orderby` is valid.
     */
    protected function parse_orderby($orderby)
    {
    }
    /**
     * Parse an 'order' query variable and cast it to ASC or DESC as necessary.
     *
     * @since 4.2.0
     *
     * @param string $order The 'order' query variable.
     * @return string The sanitized 'order' query variable.
     */
    protected function parse_order($order)
    {
    }
    /**
     * Make private properties readable for backward compatibility.
     *
     * @since 4.0.0
     *
     * @param string $name Property to get.
     * @return mixed Property.
     */
    public function __get($name)
    {
    }
    /**
     * Make private properties settable for backward compatibility.
     *
     * @since 4.0.0
     *
     * @param string $name  Property to check if set.
     * @param mixed  $value Property value.
     * @return mixed Newly-set property.
     */
    public function __set($name, $value)
    {
    }
    /**
     * Make private properties checkable for backward compatibility.
     *
     * @since 4.0.0
     *
     * @param string $name Property to check if set.
     * @return bool Whether the property is set.
     */
    public function __isset($name)
    {
    }
    /**
     * Make private properties un-settable for backward compatibility.
     *
     * @since 4.0.0
     *
     * @param string $name Property to unset.
     */
    public function __unset($name)
    {
    }
    /**
     * Make private/protected methods readable for backward compatibility.
     *
     * @since 4.0.0
     *
     * @param callable $name      Method to call.
     * @param array    $arguments Arguments to pass when calling.
     * @return mixed Return value of the callback, false otherwise.
     */
    public function __call($name, $arguments)
    {
    }
}
/**
 * User API: WP_User class
 *
 * @package WordPress
 * @subpackage Users
 * @since 4.4.0
 */
/**
 * Core class used to implement the WP_User object.
 *
 * @since 2.0.0
 *
 * @property string $nickname
 * @property string $description
 * @property string $user_description
 * @property string $first_name
 * @property string $user_firstname
 * @property string $last_name
 * @property string $user_lastname
 * @property string $user_login
 * @property string $user_pass
 * @property string $user_nicename
 * @property string $user_email
 * @property string $user_url
 * @property string $user_registered
 * @property string $user_activation_key
 * @property string $user_status
 * @property int    $user_level
 * @property string $display_name
 * @property string $spam
 * @property string $deleted
 * @property string $locale
 * @property string $rich_editing
 * @property string $syntax_highlighting
 */
class WP_User
{
    /**
     * User data container.
     *
     * @since 2.0.0
     * @var object
     */
    public $data;
    /**
     * The user's ID.
     *
     * @since 2.1.0
     * @var int
     */
    public $ID = 0;
    /**
     * The individual capabilities the user has been given.
     *
     * @since 2.0.0
     * @var array
     */
    public $caps = array();
    /**
     * User metadata option name.
     *
     * @since 2.0.0
     * @var string
     */
    public $cap_key;
    /**
     * The roles the user is part of.
     *
     * @since 2.0.0
     * @var array
     */
    public $roles = array();
    /**
     * All capabilities the user has, including individual and role based.
     *
     * @since 2.0.0
     * @var array
     */
    public $allcaps = array();
    /**
     * The filter context applied to user data fields.
     *
     * @since 2.9.0
     * @var string
     */
    public $filter = \null;
    /**
     * The site ID the capabilities of this user are initialized for.
     *
     * @since 4.9.0
     * @var int
     */
    private $site_id = 0;
    /**
     * @static
     * @since 3.3.0
     * @var array
     */
    private static $back_compat_keys;
    /**
     * Constructor.
     *
     * Retrieves the userdata and passes it to WP_User::init().
     *
     * @since 2.0.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param int|string|stdClass|WP_User $id User's ID, a WP_User object, or a user object from the DB.
     * @param string $name Optional. User's username
     * @param int $site_id Optional Site ID, defaults to current site.
     */
    public function __construct($id = 0, $name = '', $site_id = '')
    {
    }
    /**
     * Sets up object properties, including capabilities.
     *
     * @since  3.3.0
     *
     * @param object $data    User DB row object.
     * @param int    $site_id Optional. The site ID to initialize for.
     */
    public function init($data, $site_id = '')
    {
    }
    /**
     * Return only the main user fields
     *
     * @since 3.3.0
     * @since 4.4.0 Added 'ID' as an alias of 'id' for the `$field` parameter.
     *
     * @static
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param string $field The field to query against: 'id', 'ID', 'slug', 'email' or 'login'.
     * @param string|int $value The field value
     * @return object|false Raw user object
     */
    public static function get_data_by($field, $value)
    {
    }
    /**
     * Magic method for checking the existence of a certain custom field.
     *
     * @since 3.3.0
     *
     * @param string $key User meta key to check if set.
     * @return bool Whether the given user meta key is set.
     */
    public function __isset($key)
    {
    }
    /**
     * Magic method for accessing custom fields.
     *
     * @since 3.3.0
     *
     * @param string $key User meta key to retrieve.
     * @return mixed Value of the given user meta key (if set). If `$key` is 'id', the user ID.
     */
    public function __get($key)
    {
    }
    /**
     * Magic method for setting custom user fields.
     *
     * This method does not update custom fields in the database. It only stores
     * the value on the WP_User instance.
     *
     * @since 3.3.0
     *
     * @param string $key   User meta key.
     * @param mixed  $value User meta value.
     */
    public function __set($key, $value)
    {
    }
    /**
     * Magic method for unsetting a certain custom field.
     *
     * @since 4.4.0
     *
     * @param string $key User meta key to unset.
     */
    public function __unset($key)
    {
    }
    /**
     * Determine whether the user exists in the database.
     *
     * @since 3.4.0
     *
     * @return bool True if user exists in the database, false if not.
     */
    public function exists()
    {
    }
    /**
     * Retrieve the value of a property or meta key.
     *
     * Retrieves from the users and usermeta table.
     *
     * @since 3.3.0
     *
     * @param string $key Property
     * @return mixed
     */
    public function get($key)
    {
    }
    /**
     * Determine whether a property or meta key is set
     *
     * Consults the users and usermeta tables.
     *
     * @since 3.3.0
     *
     * @param string $key Property
     * @return bool
     */
    public function has_prop($key)
    {
    }
    /**
     * Return an array representation.
     *
     * @since 3.5.0
     *
     * @return array Array representation.
     */
    public function to_array()
    {
    }
    /**
     * Makes private/protected methods readable for backward compatibility.
     *
     * @since 4.3.0
     *
     * @param callable $name      Method to call.
     * @param array    $arguments Arguments to pass when calling.
     * @return mixed|false Return value of the callback, false otherwise.
     */
    public function __call($name, $arguments)
    {
    }
    /**
     * Set up capability object properties.
     *
     * Will set the value for the 'cap_key' property to current database table
     * prefix, followed by 'capabilities'. Will then check to see if the
     * property matching the 'cap_key' exists and is an array. If so, it will be
     * used.
     *
     * @since 2.1.0
     * @deprecated 4.9.0 Use WP_User::for_site()
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param string $cap_key Optional capability key
     */
    protected function _init_caps($cap_key = '')
    {
    }
    /**
     * Retrieve all of the role capabilities and merge with individual capabilities.
     *
     * All of the capabilities of the roles the user belongs to are merged with
     * the users individual roles. This also means that the user can be denied
     * specific roles that their role might have, but the specific user isn't
     * granted permission to.
     *
     * @since 2.0.0
     *
     * @return array List of all capabilities for the user.
     */
    public function get_role_caps()
    {
    }
    /**
     * Add role to user.
     *
     * Updates the user's meta data option with capabilities and roles.
     *
     * @since 2.0.0
     *
     * @param string $role Role name.
     */
    public function add_role($role)
    {
    }
    /**
     * Remove role from user.
     *
     * @since 2.0.0
     *
     * @param string $role Role name.
     */
    public function remove_role($role)
    {
    }
    /**
     * Set the role of the user.
     *
     * This will remove the previous roles of the user and assign the user the
     * new one. You can set the role to an empty string and it will remove all
     * of the roles from the user.
     *
     * @since 2.0.0
     *
     * @param string $role Role name.
     */
    public function set_role($role)
    {
    }
    /**
     * Choose the maximum level the user has.
     *
     * Will compare the level from the $item parameter against the $max
     * parameter. If the item is incorrect, then just the $max parameter value
     * will be returned.
     *
     * Used to get the max level based on the capabilities the user has. This
     * is also based on roles, so if the user is assigned the Administrator role
     * then the capability 'level_10' will exist and the user will get that
     * value.
     *
     * @since 2.0.0
     *
     * @param int $max Max level of user.
     * @param string $item Level capability name.
     * @return int Max Level.
     */
    public function level_reduction($max, $item)
    {
    }
    /**
     * Update the maximum user level for the user.
     *
     * Updates the 'user_level' user metadata (includes prefix that is the
     * database table prefix) with the maximum user level. Gets the value from
     * the all of the capabilities that the user has.
     *
     * @since 2.0.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    public function update_user_level_from_caps()
    {
    }
    /**
     * Add capability and grant or deny access to capability.
     *
     * @since 2.0.0
     *
     * @param string $cap Capability name.
     * @param bool $grant Whether to grant capability to user.
     */
    public function add_cap($cap, $grant = \true)
    {
    }
    /**
     * Remove capability from user.
     *
     * @since 2.0.0
     *
     * @param string $cap Capability name.
     */
    public function remove_cap($cap)
    {
    }
    /**
     * Remove all of the capabilities of the user.
     *
     * @since 2.1.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     */
    public function remove_all_caps()
    {
    }
    /**
     * Whether the user has a specific capability.
     *
     * While checking against a role in place of a capability is supported in part, this practice is discouraged as it
     * may produce unreliable results.
     *
     * @since 2.0.0
     *
     * @see map_meta_cap()
     *
     * @param string $cap           Capability name.
     * @param int    $object_id,... Optional. ID of a specific object to check against if `$cap` is a "meta" capability.
     *                              Meta capabilities such as `edit_post` and `edit_user` are capabilities used by
     *                              by the `map_meta_cap()` function to map to primitive capabilities that a user or
     *                              role has, such as `edit_posts` and `edit_others_posts`.
     * @return bool Whether the user has the given capability, or, if `$object_id` is passed, whether the user has
     *              the given capability for that object.
     */
    public function has_cap($cap)
    {
    }
    /**
     * Convert numeric level to level capability name.
     *
     * Prepends 'level_' to level number.
     *
     * @since 2.0.0
     *
     * @param int $level Level number, 1 to 10.
     * @return string
     */
    public function translate_level_to_cap($level)
    {
    }
    /**
     * Set the site to operate on. Defaults to the current site.
     *
     * @since 3.0.0
     * @deprecated 4.9.0 Use WP_User::for_site()
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param int $blog_id Optional. Site ID, defaults to current site.
     */
    public function for_blog($blog_id = '')
    {
    }
    /**
     * Sets the site to operate on. Defaults to the current site.
     *
     * @since 4.9.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param int $site_id Site ID to initialize user capabilities for. Default is the current site.
     */
    public function for_site($site_id = '')
    {
    }
    /**
     * Gets the ID of the site for which the user's capabilities are currently initialized.
     *
     * @since 4.9.0
     *
     * @return int Site ID.
     */
    public function get_site_id()
    {
    }
    /**
     * Gets the available user capabilities data.
     *
     * @since 4.9.0
     *
     * @return array User capabilities array.
     */
    private function get_caps_data()
    {
    }
}
/**
 * Widget API: WP_Widget_Factory class
 *
 * @package WordPress
 * @subpackage Widgets
 * @since 4.4.0
 */
/**
 * Singleton that registers and instantiates WP_Widget classes.
 *
 * @since 2.8.0
 * @since 4.4.0 Moved to its own file from wp-includes/widgets.php
 */
class WP_Widget_Factory
{
    /**
     * Widgets array.
     *
     * @since 2.8.0
     * @var array
     */
    public $widgets = array();
    /**
     * PHP5 constructor.
     *
     * @since 4.3.0
     */
    public function __construct()
    {
    }
    /**
     * PHP4 constructor.
     *
     * @since 2.8.0
     */
    public function WP_Widget_Factory()
    {
    }
    /**
     * Memory for the number of times unique class instances have been hashed.
     *
     * This can be eliminated in favor of straight spl_object_hash() when 5.3
     * is the minimum requirement for PHP.
     *
     * @since 4.6.0
     * @var array
     *
     * @see WP_Widget_Factory::hash_object()
     */
    private $hashed_class_counts = array();
    /**
     * Hashes an object, doing fallback of `spl_object_hash()` if not available.
     *
     * This can be eliminated in favor of straight spl_object_hash() when 5.3
     * is the minimum requirement for PHP.
     *
     * @since 4.6.0
     *
     * @param WP_Widget $widget Widget.
     * @return string Object hash.
     */
    private function hash_object($widget)
    {
    }
    /**
     * Registers a widget subclass.
     *
     * @since 2.8.0
     * @since 4.6.0 Updated the `$widget` parameter to also accept a WP_Widget instance object
     *              instead of simply a `WP_Widget` subclass name.
     *
     * @param string|WP_Widget $widget Either the name of a `WP_Widget` subclass or an instance of a `WP_Widget` subclass.
     */
    public function register($widget)
    {
    }
    /**
     * Un-registers a widget subclass.
     *
     * @since 2.8.0
     * @since 4.6.0 Updated the `$widget` parameter to also accept a WP_Widget instance object
     *              instead of simply a `WP_Widget` subclass name.
     *
     * @param string|WP_Widget $widget Either the name of a `WP_Widget` subclass or an instance of a `WP_Widget` subclass.
     */
    public function unregister($widget)
    {
    }
    /**
     * Serves as a utility method for adding widgets to the registered widgets global.
     *
     * @since 2.8.0
     *
     * @global array $wp_registered_widgets
     */
    public function _register_widgets()
    {
    }
}
/**
 * Widget API: WP_Widget base class
 *
 * @package WordPress
 * @subpackage Widgets
 * @since 4.4.0
 */
/**
 * Core base class extended to register widgets.
 *
 * This class must be extended for each widget, and WP_Widget::widget() must be overridden.
 *
 * If adding widget options, WP_Widget::update() and WP_Widget::form() should also be overridden.
 *
 * @since 2.8.0
 * @since 4.4.0 Moved to its own file from wp-includes/widgets.php
 */
class WP_Widget
{
    /**
     * Root ID for all widgets of this type.
     *
     * @since 2.8.0
     * @var mixed|string
     */
    public $id_base;
    /**
     * Name for this widget type.
     *
     * @since 2.8.0
     * @var string
     */
    public $name;
    /**
     * Option name for this widget type.
     *
     * @since 2.8.0
     * @var string
     */
    public $option_name;
    /**
     * Alt option name for this widget type.
     *
     * @since 2.8.0
     * @var string
     */
    public $alt_option_name;
    /**
     * Option array passed to wp_register_sidebar_widget().
     *
     * @since 2.8.0
     * @var array
     */
    public $widget_options;
    /**
     * Option array passed to wp_register_widget_control().
     *
     * @since 2.8.0
     * @var array
     */
    public $control_options;
    /**
     * Unique ID number of the current instance.
     *
     * @since 2.8.0
     * @var bool|int
     */
    public $number = \false;
    /**
     * Unique ID string of the current instance (id_base-number).
     *
     * @since 2.8.0
     * @var bool|string
     */
    public $id = \false;
    /**
     * Whether the widget data has been updated.
     *
     * Set to true when the data is updated after a POST submit - ensures it does
     * not happen twice.
     *
     * @since 2.8.0
     * @var bool
     */
    public $updated = \false;
    //
    // Member functions that must be overridden by subclasses.
    //
    /**
     * Echoes the widget content.
     *
     * Sub-classes should over-ride this function to generate their widget code.
     *
     * @since 2.8.0
     *
     * @param array $args     Display arguments including 'before_title', 'after_title',
     *                        'before_widget', and 'after_widget'.
     * @param array $instance The settings for the particular instance of the widget.
     */
    public function widget($args, $instance)
    {
    }
    /**
     * Updates a particular instance of a widget.
     *
     * This function should check that `$new_instance` is set correctly. The newly-calculated
     * value of `$instance` should be returned. If false is returned, the instance won't be
     * saved/updated.
     *
     * @since 2.8.0
     *
     * @param array $new_instance New settings for this instance as input by the user via
     *                            WP_Widget::form().
     * @param array $old_instance Old settings for this instance.
     * @return array Settings to save or bool false to cancel saving.
     */
    public function update($new_instance, $old_instance)
    {
    }
    /**
     * Outputs the settings update form.
     *
     * @since 2.8.0
     *
     * @param array $instance Current settings.
     * @return string Default return is 'noform'.
     */
    public function form($instance)
    {
    }
    // Functions you'll need to call.
    /**
     * PHP5 constructor.
     *
     * @since 2.8.0
     *
     * @param string $id_base         Optional Base ID for the widget, lowercase and unique. If left empty,
     *                                a portion of the widget's class name will be used Has to be unique.
     * @param string $name            Name for the widget displayed on the configuration page.
     * @param array  $widget_options  Optional. Widget options. See wp_register_sidebar_widget() for information
     *                                on accepted arguments. Default empty array.
     * @param array  $control_options Optional. Widget control options. See wp_register_widget_control() for
     *                                information on accepted arguments. Default empty array.
     */
    public function __construct($id_base, $name, $widget_options = array(), $control_options = array())
    {
    }
    /**
     * PHP4 constructor.
     *
     * @since 2.8.0
     *
     * @see __construct()
     *
     * @param string $id_base         Optional Base ID for the widget, lowercase and unique. If left empty,
     *                                a portion of the widget's class name will be used Has to be unique.
     * @param string $name            Name for the widget displayed on the configuration page.
     * @param array  $widget_options  Optional. Widget options. See wp_register_sidebar_widget() for information
     *                                on accepted arguments. Default empty array.
     * @param array  $control_options Optional. Widget control options. See wp_register_widget_control() for
     *                                information on accepted arguments. Default empty array.
     */
    public function WP_Widget($id_base, $name, $widget_options = array(), $control_options = array())
    {
    }
    /**
     * Constructs name attributes for use in form() fields
     *
     * This function should be used in form() methods to create name attributes for fields
     * to be saved by update()
     *
     * @since 2.8.0
     * @since 4.4.0 Array format field names are now accepted.
     *
     * @param string $field_name Field name
     * @return string Name attribute for $field_name
     */
    public function get_field_name($field_name)
    {
    }
    /**
     * Constructs id attributes for use in WP_Widget::form() fields.
     *
     * This function should be used in form() methods to create id attributes
     * for fields to be saved by WP_Widget::update().
     *
     * @since 2.8.0
     * @since 4.4.0 Array format field IDs are now accepted.
     *
     * @param string $field_name Field name.
     * @return string ID attribute for `$field_name`.
     */
    public function get_field_id($field_name)
    {
    }
    /**
     * Register all widget instances of this widget class.
     *
     * @since 2.8.0
     */
    public function _register()
    {
    }
    /**
     * Sets the internal order number for the widget instance.
     *
     * @since 2.8.0
     *
     * @param int $number The unique order number of this widget instance compared to other
     *                    instances of the same class.
     */
    public function _set($number)
    {
    }
    /**
     * Retrieves the widget display callback.
     *
     * @since 2.8.0
     *
     * @return callable Display callback.
     */
    public function _get_display_callback()
    {
    }
    /**
     * Retrieves the widget update callback.
     *
     * @since 2.8.0
     *
     * @return callable Update callback.
     */
    public function _get_update_callback()
    {
    }
    /**
     * Retrieves the form callback.
     *
     * @since 2.8.0
     *
     * @return callable Form callback.
     */
    public function _get_form_callback()
    {
    }
    /**
     * Determines whether the current request is inside the Customizer preview.
     *
     * If true -- the current request is inside the Customizer preview, then
     * the object cache gets suspended and widgets should check this to decide
     * whether they should store anything persistently to the object cache,
     * to transients, or anywhere else.
     *
     * @since 3.9.0
     *
     * @global WP_Customize_Manager $wp_customize
     *
     * @return bool True if within the Customizer preview, false if not.
     */
    public function is_preview()
    {
    }
    /**
     * Generates the actual widget content (Do NOT override).
     *
     * Finds the instance and calls WP_Widget::widget().
     *
     * @since 2.8.0
     *
     * @param array     $args        Display arguments. See WP_Widget::widget() for information
     *                               on accepted arguments.
     * @param int|array $widget_args {
     *     Optional. Internal order number of the widget instance, or array of multi-widget arguments.
     *     Default 1.
     *
     *     @type int $number Number increment used for multiples of the same widget.
     * }
     */
    public function display_callback($args, $widget_args = 1)
    {
    }
    /**
     * Handles changed settings (Do NOT override).
     *
     * @since 2.8.0
     *
     * @global array $wp_registered_widgets
     *
     * @param int $deprecated Not used.
     */
    public function update_callback($deprecated = 1)
    {
    }
    /**
     * Generates the widget control form (Do NOT override).
     *
     * @since 2.8.0
     *
     * @param int|array $widget_args {
     *     Optional. Internal order number of the widget instance, or array of multi-widget arguments.
     *     Default 1.
     *
     *     @type int $number Number increment used for multiples of the same widget.
     * }
     * @return string|null
     */
    public function form_callback($widget_args = 1)
    {
    }
    /**
     * Registers an instance of the widget class.
     *
     * @since 2.8.0
     *
     * @param integer $number Optional. The unique order number of this widget instance
     *                        compared to other instances of the same class. Default -1.
     */
    public function _register_one($number = -1)
    {
    }
    /**
     * Saves the settings for all instances of the widget class.
     *
     * @since 2.8.0
     *
     * @param array $settings Multi-dimensional array of widget instance settings.
     */
    public function save_settings($settings)
    {
    }
    /**
     * Retrieves the settings for all instances of the widget class.
     *
     * @since 2.8.0
     *
     * @return array Multi-dimensional array of widget instance settings.
     */
    public function get_settings()
    {
    }
}
/**
 * XML-RPC protocol support for WordPress
 *
 * @package WordPress
 * @subpackage Publishing
 */
/**
 * WordPress XMLRPC server implementation.
 *
 * Implements compatibility for Blogger API, MetaWeblog API, MovableType, and
 * pingback. Additional WordPress API for managing comments, pages, posts,
 * options, etc.
 *
 * As of WordPress 3.5.0, XML-RPC is enabled by default. It can be disabled
 * via the {@see 'xmlrpc_enabled'} filter found in wp_xmlrpc_server::login().
 *
 * @since 1.5.0
 *
 * @see IXR_Server
 */
class wp_xmlrpc_server extends \IXR_Server
{
    /**
     * Methods.
     *
     * @var array
     */
    public $methods;
    /**
     * Blog options.
     *
     * @var array
     */
    public $blog_options;
    /**
     * IXR_Error instance.
     *
     * @var IXR_Error
     */
    public $error;
    /**
     * Flags that the user authentication has failed in this instance of wp_xmlrpc_server.
     *
     * @var bool
     */
    protected $auth_failed = \false;
    /**
     * Registers all of the XMLRPC methods that XMLRPC server understands.
     *
     * Sets up server and method property. Passes XMLRPC
     * methods through the {@see 'xmlrpc_methods'} filter to allow plugins to extend
     * or replace XML-RPC methods.
     *
     * @since 1.5.0
     */
    public function __construct()
    {
    }
    /**
     * Make private/protected methods readable for backward compatibility.
     *
     * @since 4.0.0
     *
     * @param callable $name      Method to call.
     * @param array    $arguments Arguments to pass when calling.
     * @return array|IXR_Error|false Return value of the callback, false otherwise.
     */
    public function __call($name, $arguments)
    {
    }
    /**
     * Serves the XML-RPC request.
     *
     * @since 2.9.0
     */
    public function serve_request()
    {
    }
    /**
     * Test XMLRPC API by saying, "Hello!" to client.
     *
     * @since 1.5.0
     *
     * @return string Hello string response.
     */
    public function sayHello()
    {
    }
    /**
     * Test XMLRPC API by adding two numbers for client.
     *
     * @since 1.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int $number1 A number to add.
     *     @type int $number2 A second number to add.
     * }
     * @return int Sum of the two given numbers.
     */
    public function addTwoNumbers($args)
    {
    }
    /**
     * Log user in.
     *
     * @since 2.8.0
     *
     * @param string $username User's username.
     * @param string $password User's password.
     * @return WP_User|bool WP_User object if authentication passed, false otherwise
     */
    public function login($username, $password)
    {
    }
    /**
     * Check user's credentials. Deprecated.
     *
     * @since 1.5.0
     * @deprecated 2.8.0 Use wp_xmlrpc_server::login()
     * @see wp_xmlrpc_server::login()
     *
     * @param string $username User's username.
     * @param string $password User's password.
     * @return bool Whether authentication passed.
     */
    public function login_pass_ok($username, $password)
    {
    }
    /**
     * Escape string or array of strings for database.
     *
     * @since 1.5.2
     *
     * @param string|array $data Escape single string or array of strings.
     * @return string|void Returns with string is passed, alters by-reference
     *                     when array is passed.
     */
    public function escape(&$data)
    {
    }
    /**
     * Retrieve custom fields for post.
     *
     * @since 2.5.0
     *
     * @param int $post_id Post ID.
     * @return array Custom fields, if exist.
     */
    public function get_custom_fields($post_id)
    {
    }
    /**
     * Set custom fields for post.
     *
     * @since 2.5.0
     *
     * @param int $post_id Post ID.
     * @param array $fields Custom fields.
     */
    public function set_custom_fields($post_id, $fields)
    {
    }
    /**
     * Retrieve custom fields for a term.
     *
     * @since 4.9.0
     *
     * @param int $term_id Term ID.
     * @return array Array of custom fields, if they exist.
     */
    public function get_term_custom_fields($term_id)
    {
    }
    /**
     * Set custom fields for a term.
     *
     * @since 4.9.0
     *
     * @param int $term_id Term ID.
     * @param array $fields Custom fields.
     */
    public function set_term_custom_fields($term_id, $fields)
    {
    }
    /**
     * Set up blog options property.
     *
     * Passes property through {@see 'xmlrpc_blog_options'} filter.
     *
     * @since 2.6.0
     */
    public function initialise_blog_option_info()
    {
    }
    /**
     * Retrieve the blogs of the user.
     *
     * @since 2.6.0
     *
     * @param array $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type string $username Username.
     *     @type string $password Password.
     * }
     * @return array|IXR_Error Array contains:
     *  - 'isAdmin'
     *  - 'isPrimary' - whether the blog is the user's primary blog
     *  - 'url'
     *  - 'blogid'
     *  - 'blogName'
     *  - 'xmlrpc' - url of xmlrpc endpoint
     */
    public function wp_getUsersBlogs($args)
    {
    }
    /**
     * Checks if the method received at least the minimum number of arguments.
     *
     * @since 3.4.0
     *
     * @param string|array $args Sanitize single string or array of strings.
     * @param int $count         Minimum number of arguments.
     * @return bool if `$args` contains at least $count arguments.
     */
    protected function minimum_args($args, $count)
    {
    }
    /**
     * Prepares taxonomy data for return in an XML-RPC object.
     *
     *
     * @param object $taxonomy The unprepared taxonomy data.
     * @param array $fields    The subset of taxonomy fields to return.
     * @return array The prepared taxonomy data.
     */
    protected function _prepare_taxonomy($taxonomy, $fields)
    {
    }
    /**
     * Prepares term data for return in an XML-RPC object.
     *
     *
     * @param array|object $term The unprepared term data.
     * @return array The prepared term data.
     */
    protected function _prepare_term($term)
    {
    }
    /**
     * Convert a WordPress date string to an IXR_Date object.
     *
     *
     * @param string $date Date string to convert.
     * @return IXR_Date IXR_Date object.
     */
    protected function _convert_date($date)
    {
    }
    /**
     * Convert a WordPress GMT date string to an IXR_Date object.
     *
     *
     * @param string $date_gmt WordPress GMT date string.
     * @param string $date     Date string.
     * @return IXR_Date IXR_Date object.
     */
    protected function _convert_date_gmt($date_gmt, $date)
    {
    }
    /**
     * Prepares post data for return in an XML-RPC object.
     *
     *
     * @param array $post   The unprepared post data.
     * @param array $fields The subset of post type fields to return.
     * @return array The prepared post data.
     */
    protected function _prepare_post($post, $fields)
    {
    }
    /**
     * Prepares post data for return in an XML-RPC object.
     *
     * @since 3.4.0
     * @since 4.6.0 Converted the `$post_type` parameter to accept a WP_Post_Type object.
     *
     * @param WP_Post_Type $post_type Post type object.
     * @param array        $fields    The subset of post fields to return.
     * @return array The prepared post type data.
     */
    protected function _prepare_post_type($post_type, $fields)
    {
    }
    /**
     * Prepares media item data for return in an XML-RPC object.
     *
     *
     * @param object $media_item     The unprepared media item data.
     * @param string $thumbnail_size The image size to use for the thumbnail URL.
     * @return array The prepared media item data.
     */
    protected function _prepare_media_item($media_item, $thumbnail_size = 'thumbnail')
    {
    }
    /**
     * Prepares page data for return in an XML-RPC object.
     *
     *
     * @param object $page The unprepared page data.
     * @return array The prepared page data.
     */
    protected function _prepare_page($page)
    {
    }
    /**
     * Prepares comment data for return in an XML-RPC object.
     *
     *
     * @param object $comment The unprepared comment data.
     * @return array The prepared comment data.
     */
    protected function _prepare_comment($comment)
    {
    }
    /**
     * Prepares user data for return in an XML-RPC object.
     *
     *
     * @param WP_User $user   The unprepared user object.
     * @param array   $fields The subset of user fields to return.
     * @return array The prepared user data.
     */
    protected function _prepare_user($user, $fields)
    {
    }
    /**
     * Create a new post for any registered post type.
     *
     * @since 3.4.0
     *
     * @link https://en.wikipedia.org/wiki/RSS_enclosure for information on RSS enclosures.
     *
     * @param array  $args {
     *     Method arguments. Note: top-level arguments must be ordered as documented.
     *
     *     @type int    $blog_id        Blog ID (unused).
     *     @type string $username       Username.
     *     @type string $password       Password.
     *     @type array  $content_struct {
     *         Content struct for adding a new post. See wp_insert_post() for information on
     *         additional post fields
     *
     *         @type string $post_type      Post type. Default 'post'.
     *         @type string $post_status    Post status. Default 'draft'
     *         @type string $post_title     Post title.
     *         @type int    $post_author    Post author ID.
     *         @type string $post_excerpt   Post excerpt.
     *         @type string $post_content   Post content.
     *         @type string $post_date_gmt  Post date in GMT.
     *         @type string $post_date      Post date.
     *         @type string $post_password  Post password (20-character limit).
     *         @type string $comment_status Post comment enabled status. Accepts 'open' or 'closed'.
     *         @type string $ping_status    Post ping status. Accepts 'open' or 'closed'.
     *         @type bool   $sticky         Whether the post should be sticky. Automatically false if
     *                                      `$post_status` is 'private'.
     *         @type int    $post_thumbnail ID of an image to use as the post thumbnail/featured image.
     *         @type array  $custom_fields  Array of meta key/value pairs to add to the post.
     *         @type array  $terms          Associative array with taxonomy names as keys and arrays
     *                                      of term IDs as values.
     *         @type array  $terms_names    Associative array with taxonomy names as keys and arrays
     *                                      of term names as values.
     *         @type array  $enclosure      {
     *             Array of feed enclosure data to add to post meta.
     *
     *             @type string $url    URL for the feed enclosure.
     *             @type int    $length Size in bytes of the enclosure.
     *             @type string $type   Mime-type for the enclosure.
     *         }
     *     }
     * }
     * @return int|IXR_Error Post ID on success, IXR_Error instance otherwise.
     */
    public function wp_newPost($args)
    {
    }
    /**
     * Helper method for filtering out elements from an array.
     *
     * @since 3.4.0
     *
     * @param int $count Number to compare to one.
     */
    private function _is_greater_than_one($count)
    {
    }
    /**
     * Encapsulate the logic for sticking a post
     * and determining if the user has permission to do so
     *
     * @since 4.3.0
     *
     * @param array $post_data
     * @param bool  $update
     * @return void|IXR_Error
     */
    private function _toggle_sticky($post_data, $update = \false)
    {
    }
    /**
     * Helper method for wp_newPost() and wp_editPost(), containing shared logic.
     *
     * @since 3.4.0
     *
     * @see wp_insert_post()
     *
     * @param WP_User         $user           The post author if post_author isn't set in $content_struct.
     * @param array|IXR_Error $content_struct Post data to insert.
     * @return IXR_Error|string
     */
    protected function _insert_post($user, $content_struct)
    {
    }
    /**
     * Edit a post for any registered post type.
     *
     * The $content_struct parameter only needs to contain fields that
     * should be changed. All other fields will retain their existing values.
     *
     * @since 3.4.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id        Blog ID (unused).
     *     @type string $username       Username.
     *     @type string $password       Password.
     *     @type int    $post_id        Post ID.
     *     @type array  $content_struct Extra content arguments.
     * }
     * @return true|IXR_Error True on success, IXR_Error on failure.
     */
    public function wp_editPost($args)
    {
    }
    /**
     * Delete a post for any registered post type.
     *
     * @since 3.4.0
     *
     * @see wp_delete_post()
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id  Blog ID (unused).
     *     @type string $username Username.
     *     @type string $password Password.
     *     @type int    $post_id  Post ID.
     * }
     * @return true|IXR_Error True on success, IXR_Error instance on failure.
     */
    public function wp_deletePost($args)
    {
    }
    /**
     * Retrieve a post.
     *
     * @since 3.4.0
     *
     * The optional $fields parameter specifies what fields will be included
     * in the response array. This should be a list of field names. 'post_id' will
     * always be included in the response regardless of the value of $fields.
     *
     * Instead of, or in addition to, individual field names, conceptual group
     * names can be used to specify multiple fields. The available conceptual
     * groups are 'post' (all basic fields), 'taxonomies', 'custom_fields',
     * and 'enclosure'.
     *
     * @see get_post()
     *
     * @param array $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id  Blog ID (unused).
     *     @type string $username Username.
     *     @type string $password Password.
     *     @type int    $post_id  Post ID.
     *     @type array  $fields   The subset of post type fields to return.
     * }
     * @return array|IXR_Error Array contains (based on $fields parameter):
     *  - 'post_id'
     *  - 'post_title'
     *  - 'post_date'
     *  - 'post_date_gmt'
     *  - 'post_modified'
     *  - 'post_modified_gmt'
     *  - 'post_status'
     *  - 'post_type'
     *  - 'post_name'
     *  - 'post_author'
     *  - 'post_password'
     *  - 'post_excerpt'
     *  - 'post_content'
     *  - 'link'
     *  - 'comment_status'
     *  - 'ping_status'
     *  - 'sticky'
     *  - 'custom_fields'
     *  - 'terms'
     *  - 'categories'
     *  - 'tags'
     *  - 'enclosure'
     */
    public function wp_getPost($args)
    {
    }
    /**
     * Retrieve posts.
     *
     * @since 3.4.0
     *
     * @see wp_get_recent_posts()
     * @see wp_getPost() for more on `$fields`
     * @see get_posts() for more on `$filter` values
     *
     * @param array $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id  Blog ID (unused).
     *     @type string $username Username.
     *     @type string $password Password.
     *     @type array  $filter   Optional. Modifies the query used to retrieve posts. Accepts 'post_type',
     *                            'post_status', 'number', 'offset', 'orderby', 's', and 'order'.
     *                            Default empty array.
     *     @type array  $fields   Optional. The subset of post type fields to return in the response array.
     * }
     * @return array|IXR_Error Array contains a collection of posts.
     */
    public function wp_getPosts($args)
    {
    }
    /**
     * Create a new term.
     *
     * @since 3.4.0
     *
     * @see wp_insert_term()
     *
     * @param array $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id        Blog ID (unused).
     *     @type string $username       Username.
     *     @type string $password       Password.
     *     @type array  $content_struct Content struct for adding a new term. The struct must contain
     *                                  the term 'name' and 'taxonomy'. Optional accepted values include
     *                                  'parent', 'description', and 'slug'.
     * }
     * @return int|IXR_Error The term ID on success, or an IXR_Error object on failure.
     */
    public function wp_newTerm($args)
    {
    }
    /**
     * Edit a term.
     *
     * @since 3.4.0
     *
     * @see wp_update_term()
     *
     * @param array $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id        Blog ID (unused).
     *     @type string $username       Username.
     *     @type string $password       Password.
     *     @type int    $term_id        Term ID.
     *     @type array  $content_struct Content struct for editing a term. The struct must contain the
     *                                  term ''taxonomy'. Optional accepted values include 'name', 'parent',
     *                                  'description', and 'slug'.
     * }
     * @return true|IXR_Error True on success, IXR_Error instance on failure.
     */
    public function wp_editTerm($args)
    {
    }
    /**
     * Delete a term.
     *
     * @since 3.4.0
     *
     * @see wp_delete_term()
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id      Blog ID (unused).
     *     @type string $username     Username.
     *     @type string $password     Password.
     *     @type string $taxnomy_name Taxonomy name.
     *     @type int    $term_id      Term ID.
     * }
     * @return bool|IXR_Error True on success, IXR_Error instance on failure.
     */
    public function wp_deleteTerm($args)
    {
    }
    /**
     * Retrieve a term.
     *
     * @since 3.4.0
     *
     * @see get_term()
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id  Blog ID (unused).
     *     @type string $username Username.
     *     @type string $password Password.
     *     @type string $taxnomy  Taxonomy name.
     *     @type string $term_id  Term ID.
     * }
     * @return array|IXR_Error IXR_Error on failure, array on success, containing:
     *  - 'term_id'
     *  - 'name'
     *  - 'slug'
     *  - 'term_group'
     *  - 'term_taxonomy_id'
     *  - 'taxonomy'
     *  - 'description'
     *  - 'parent'
     *  - 'count'
     */
    public function wp_getTerm($args)
    {
    }
    /**
     * Retrieve all terms for a taxonomy.
     *
     * @since 3.4.0
     *
     * The optional $filter parameter modifies the query used to retrieve terms.
     * Accepted keys are 'number', 'offset', 'orderby', 'order', 'hide_empty', and 'search'.
     *
     * @see get_terms()
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id  Blog ID (unused).
     *     @type string $username Username.
     *     @type string $password Password.
     *     @type string $taxnomy  Taxonomy name.
     *     @type array  $filter   Optional. Modifies the query used to retrieve posts. Accepts 'number',
     *                            'offset', 'orderby', 'order', 'hide_empty', and 'search'. Default empty array.
     * }
     * @return array|IXR_Error An associative array of terms data on success, IXR_Error instance otherwise.
     */
    public function wp_getTerms($args)
    {
    }
    /**
     * Retrieve a taxonomy.
     *
     * @since 3.4.0
     *
     * @see get_taxonomy()
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id  Blog ID (unused).
     *     @type string $username Username.
     *     @type string $password Password.
     *     @type string $taxnomy  Taxonomy name.
     *     @type array  $fields   Optional. Array of taxonomy fields to limit to in the return.
     *                            Accepts 'labels', 'cap', 'menu', and 'object_type'.
     *                            Default empty array.
     * }
     * @return array|IXR_Error An array of taxonomy data on success, IXR_Error instance otherwise.
     */
    public function wp_getTaxonomy($args)
    {
    }
    /**
     * Retrieve all taxonomies.
     *
     * @since 3.4.0
     *
     * @see get_taxonomies()
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id  Blog ID (unused).
     *     @type string $username Username.
     *     @type string $password Password.
     *     @type array  $filter   Optional. An array of arguments for retrieving taxonomies.
     *     @type array  $fields   Optional. The subset of taxonomy fields to return.
     * }
     * @return array|IXR_Error An associative array of taxonomy data with returned fields determined
     *                         by `$fields`, or an IXR_Error instance on failure.
     */
    public function wp_getTaxonomies($args)
    {
    }
    /**
     * Retrieve a user.
     *
     * The optional $fields parameter specifies what fields will be included
     * in the response array. This should be a list of field names. 'user_id' will
     * always be included in the response regardless of the value of $fields.
     *
     * Instead of, or in addition to, individual field names, conceptual group
     * names can be used to specify multiple fields. The available conceptual
     * groups are 'basic' and 'all'.
     *
     * @uses get_userdata()
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type int    $user_id
     *     @type array  $fields (optional)
     * }
     * @return array|IXR_Error Array contains (based on $fields parameter):
     *  - 'user_id'
     *  - 'username'
     *  - 'first_name'
     *  - 'last_name'
     *  - 'registered'
     *  - 'bio'
     *  - 'email'
     *  - 'nickname'
     *  - 'nicename'
     *  - 'url'
     *  - 'display_name'
     *  - 'roles'
     */
    public function wp_getUser($args)
    {
    }
    /**
     * Retrieve users.
     *
     * The optional $filter parameter modifies the query used to retrieve users.
     * Accepted keys are 'number' (default: 50), 'offset' (default: 0), 'role',
     * 'who', 'orderby', and 'order'.
     *
     * The optional $fields parameter specifies what fields will be included
     * in the response array.
     *
     * @uses get_users()
     * @see wp_getUser() for more on $fields and return values
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type array  $filter (optional)
     *     @type array  $fields (optional)
     * }
     * @return array|IXR_Error users data
     */
    public function wp_getUsers($args)
    {
    }
    /**
     * Retrieve information about the requesting user.
     *
     * @uses get_userdata()
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type array  $fields (optional)
     * }
     * @return array|IXR_Error (@see wp_getUser)
     */
    public function wp_getProfile($args)
    {
    }
    /**
     * Edit user's profile.
     *
     * @uses wp_update_user()
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type array  $content_struct It can optionally contain:
     *      - 'first_name'
     *      - 'last_name'
     *      - 'website'
     *      - 'display_name'
     *      - 'nickname'
     *      - 'nicename'
     *      - 'bio'
     * }
     * @return true|IXR_Error True, on success.
     */
    public function wp_editProfile($args)
    {
    }
    /**
     * Retrieve page.
     *
     * @since 2.2.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type int    $page_id
     *     @type string $username
     *     @type string $password
     * }
     * @return array|IXR_Error
     */
    public function wp_getPage($args)
    {
    }
    /**
     * Retrieve Pages.
     *
     * @since 2.2.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type int    $num_pages
     * }
     * @return array|IXR_Error
     */
    public function wp_getPages($args)
    {
    }
    /**
     * Create new page.
     *
     * @since 2.2.0
     *
     * @see wp_xmlrpc_server::mw_newPost()
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type array  $content_struct
     * }
     * @return int|IXR_Error
     */
    public function wp_newPage($args)
    {
    }
    /**
     * Delete page.
     *
     * @since 2.2.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type int    $page_id
     * }
     * @return true|IXR_Error True, if success.
     */
    public function wp_deletePage($args)
    {
    }
    /**
     * Edit page.
     *
     * @since 2.2.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type int    $page_id
     *     @type string $username
     *     @type string $password
     *     @type string $content
     *     @type string $publish
     * }
     * @return array|IXR_Error
     */
    public function wp_editPage($args)
    {
    }
    /**
     * Retrieve page list.
     *
     * @since 2.2.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     * }
     * @return array|IXR_Error
     */
    public function wp_getPageList($args)
    {
    }
    /**
     * Retrieve authors list.
     *
     * @since 2.2.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     * }
     * @return array|IXR_Error
     */
    public function wp_getAuthors($args)
    {
    }
    /**
     * Get list of all tags
     *
     * @since 2.7.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     * }
     * @return array|IXR_Error
     */
    public function wp_getTags($args)
    {
    }
    /**
     * Create new category.
     *
     * @since 2.2.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type array  $category
     * }
     * @return int|IXR_Error Category ID.
     */
    public function wp_newCategory($args)
    {
    }
    /**
     * Remove category.
     *
     * @since 2.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type int    $category_id
     * }
     * @return bool|IXR_Error See wp_delete_term() for return info.
     */
    public function wp_deleteCategory($args)
    {
    }
    /**
     * Retrieve category list.
     *
     * @since 2.2.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type array  $category
     *     @type int    $max_results
     * }
     * @return array|IXR_Error
     */
    public function wp_suggestCategories($args)
    {
    }
    /**
     * Retrieve comment.
     *
     * @since 2.7.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type int    $comment_id
     * }
     * @return array|IXR_Error
     */
    public function wp_getComment($args)
    {
    }
    /**
     * Retrieve comments.
     *
     * Besides the common blog_id (unused), username, and password arguments, it takes a filter
     * array as last argument.
     *
     * Accepted 'filter' keys are 'status', 'post_id', 'offset', and 'number'.
     *
     * The defaults are as follows:
     * - 'status' - Default is ''. Filter by status (e.g., 'approve', 'hold')
     * - 'post_id' - Default is ''. The post where the comment is posted. Empty string shows all comments.
     * - 'number' - Default is 10. Total number of media items to retrieve.
     * - 'offset' - Default is 0. See WP_Query::query() for more.
     *
     * @since 2.7.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type array  $struct
     * }
     * @return array|IXR_Error Contains a collection of comments. See wp_xmlrpc_server::wp_getComment() for a description of each item contents
     */
    public function wp_getComments($args)
    {
    }
    /**
     * Delete a comment.
     *
     * By default, the comment will be moved to the trash instead of deleted.
     * See wp_delete_comment() for more information on this behavior.
     *
     * @since 2.7.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type int    $comment_ID
     * }
     * @return bool|IXR_Error See wp_delete_comment().
     */
    public function wp_deleteComment($args)
    {
    }
    /**
     * Edit comment.
     *
     * Besides the common blog_id (unused), username, and password arguments, it takes a
     * comment_id integer and a content_struct array as last argument.
     *
     * The allowed keys in the content_struct array are:
     *  - 'author'
     *  - 'author_url'
     *  - 'author_email'
     *  - 'content'
     *  - 'date_created_gmt'
     *  - 'status'. Common statuses are 'approve', 'hold', 'spam'. See get_comment_statuses() for more details
     *
     * @since 2.7.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type int    $comment_ID
     *     @type array  $content_struct
     * }
     * @return true|IXR_Error True, on success.
     */
    public function wp_editComment($args)
    {
    }
    /**
     * Create new comment.
     *
     * @since 2.7.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int        $blog_id (unused)
     *     @type string     $username
     *     @type string     $password
     *     @type string|int $post
     *     @type array      $content_struct
     * }
     * @return int|IXR_Error See wp_new_comment().
     */
    public function wp_newComment($args)
    {
    }
    /**
     * Retrieve all of the comment status.
     *
     * @since 2.7.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     * }
     * @return array|IXR_Error
     */
    public function wp_getCommentStatusList($args)
    {
    }
    /**
     * Retrieve comment count.
     *
     * @since 2.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type int    $post_id
     * }
     * @return array|IXR_Error
     */
    public function wp_getCommentCount($args)
    {
    }
    /**
     * Retrieve post statuses.
     *
     * @since 2.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     * }
     * @return array|IXR_Error
     */
    public function wp_getPostStatusList($args)
    {
    }
    /**
     * Retrieve page statuses.
     *
     * @since 2.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     * }
     * @return array|IXR_Error
     */
    public function wp_getPageStatusList($args)
    {
    }
    /**
     * Retrieve page templates.
     *
     * @since 2.6.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     * }
     * @return array|IXR_Error
     */
    public function wp_getPageTemplates($args)
    {
    }
    /**
     * Retrieve blog options.
     *
     * @since 2.6.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type array  $options
     * }
     * @return array|IXR_Error
     */
    public function wp_getOptions($args)
    {
    }
    /**
     * Retrieve blog options value from list.
     *
     * @since 2.6.0
     *
     * @param array $options Options to retrieve.
     * @return array
     */
    public function _getOptions($options)
    {
    }
    /**
     * Update blog options.
     *
     * @since 2.6.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type array  $options
     * }
     * @return array|IXR_Error
     */
    public function wp_setOptions($args)
    {
    }
    /**
     * Retrieve a media item by ID
     *
     * @since 3.1.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type int    $attachment_id
     * }
     * @return array|IXR_Error Associative array contains:
     *  - 'date_created_gmt'
     *  - 'parent'
     *  - 'link'
     *  - 'thumbnail'
     *  - 'title'
     *  - 'caption'
     *  - 'description'
     *  - 'metadata'
     */
    public function wp_getMediaItem($args)
    {
    }
    /**
     * Retrieves a collection of media library items (or attachments)
     *
     * Besides the common blog_id (unused), username, and password arguments, it takes a filter
     * array as last argument.
     *
     * Accepted 'filter' keys are 'parent_id', 'mime_type', 'offset', and 'number'.
     *
     * The defaults are as follows:
     * - 'number' - Default is 5. Total number of media items to retrieve.
     * - 'offset' - Default is 0. See WP_Query::query() for more.
     * - 'parent_id' - Default is ''. The post where the media item is attached. Empty string shows all media items. 0 shows unattached media items.
     * - 'mime_type' - Default is ''. Filter by mime type (e.g., 'image/jpeg', 'application/pdf')
     *
     * @since 3.1.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type array  $struct
     * }
     * @return array|IXR_Error Contains a collection of media items. See wp_xmlrpc_server::wp_getMediaItem() for a description of each item contents
     */
    public function wp_getMediaLibrary($args)
    {
    }
    /**
     * Retrieves a list of post formats used by the site.
     *
     * @since 3.1.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     * }
     * @return array|IXR_Error List of post formats, otherwise IXR_Error object.
     */
    public function wp_getPostFormats($args)
    {
    }
    /**
     * Retrieves a post type
     *
     * @since 3.4.0
     *
     * @see get_post_type_object()
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type string $post_type_name
     *     @type array  $fields (optional)
     * }
     * @return array|IXR_Error Array contains:
     *  - 'labels'
     *  - 'description'
     *  - 'capability_type'
     *  - 'cap'
     *  - 'map_meta_cap'
     *  - 'hierarchical'
     *  - 'menu_position'
     *  - 'taxonomies'
     *  - 'supports'
     */
    public function wp_getPostType($args)
    {
    }
    /**
     * Retrieves a post types
     *
     * @since 3.4.0
     *
     * @see get_post_types()
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type array  $filter (optional)
     *     @type array  $fields (optional)
     * }
     * @return array|IXR_Error
     */
    public function wp_getPostTypes($args)
    {
    }
    /**
     * Retrieve revisions for a specific post.
     *
     * @since 3.5.0
     *
     * The optional $fields parameter specifies what fields will be included
     * in the response array.
     *
     * @uses wp_get_post_revisions()
     * @see wp_getPost() for more on $fields
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type int    $post_id
     *     @type array  $fields (optional)
     * }
     * @return array|IXR_Error contains a collection of posts.
     */
    public function wp_getRevisions($args)
    {
    }
    /**
     * Restore a post revision
     *
     * @since 3.5.0
     *
     * @uses wp_restore_post_revision()
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type int    $revision_id
     * }
     * @return bool|IXR_Error false if there was an error restoring, true if success.
     */
    public function wp_restoreRevision($args)
    {
    }
    /* Blogger API functions.
     * specs on http://plant.blogger.com/api and https://groups.yahoo.com/group/bloggerDev/
     */
    /**
     * Retrieve blogs that user owns.
     *
     * Will make more sense once we support multiple blogs.
     *
     * @since 1.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     * }
     * @return array|IXR_Error
     */
    public function blogger_getUsersBlogs($args)
    {
    }
    /**
     * Private function for retrieving a users blogs for multisite setups
     *
     * @since 3.0.0
     *
     * @param array $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type string $username Username.
     *     @type string $password Password.
     * }
     * @return array|IXR_Error
     */
    protected function _multisite_getUsersBlogs($args)
    {
    }
    /**
     * Retrieve user's data.
     *
     * Gives your client some info about you, so you don't have to.
     *
     * @since 1.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     * }
     * @return array|IXR_Error
     */
    public function blogger_getUserInfo($args)
    {
    }
    /**
     * Retrieve post.
     *
     * @since 1.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type int    $post_ID
     *     @type string $username
     *     @type string $password
     * }
     * @return array|IXR_Error
     */
    public function blogger_getPost($args)
    {
    }
    /**
     * Retrieve list of recent posts.
     *
     * @since 1.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type string $appkey (unused)
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type int    $numberposts (optional)
     * }
     * @return array|IXR_Error
     */
    public function blogger_getRecentPosts($args)
    {
    }
    /**
     * Deprecated.
     *
     * @since 1.5.0
     * @deprecated 3.5.0
     *
     * @param array $args Unused.
     * @return IXR_Error Error object.
     */
    public function blogger_getTemplate($args)
    {
    }
    /**
     * Deprecated.
     *
     * @since 1.5.0
     * @deprecated 3.5.0
     *
     * @param array $args Unused.
     * @return IXR_Error Error object.
     */
    public function blogger_setTemplate($args)
    {
    }
    /**
     * Creates new post.
     *
     * @since 1.5.0
     *
     * @param array $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type string $appkey (unused)
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type string $content
     *     @type string $publish
     * }
     * @return int|IXR_Error
     */
    public function blogger_newPost($args)
    {
    }
    /**
     * Edit a post.
     *
     * @since 1.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type int    $post_ID
     *     @type string $username
     *     @type string $password
     *     @type string $content
     *     @type bool   $publish
     * }
     * @return true|IXR_Error true when done.
     */
    public function blogger_editPost($args)
    {
    }
    /**
     * Remove a post.
     *
     * @since 1.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type int    $post_ID
     *     @type string $username
     *     @type string $password
     * }
     * @return true|IXR_Error True when post is deleted.
     */
    public function blogger_deletePost($args)
    {
    }
    /* MetaWeblog API functions
     * specs on wherever Dave Winer wants them to be
     */
    /**
     * Create a new post.
     *
     * The 'content_struct' argument must contain:
     *  - title
     *  - description
     *  - mt_excerpt
     *  - mt_text_more
     *  - mt_keywords
     *  - mt_tb_ping_urls
     *  - categories
     *
     * Also, it can optionally contain:
     *  - wp_slug
     *  - wp_password
     *  - wp_page_parent_id
     *  - wp_page_order
     *  - wp_author_id
     *  - post_status | page_status - can be 'draft', 'private', 'publish', or 'pending'
     *  - mt_allow_comments - can be 'open' or 'closed'
     *  - mt_allow_pings - can be 'open' or 'closed'
     *  - date_created_gmt
     *  - dateCreated
     *  - wp_post_thumbnail
     *
     * @since 1.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type array  $content_struct
     *     @type int    $publish
     * }
     * @return int|IXR_Error
     */
    public function mw_newPost($args)
    {
    }
    /**
     * Adds an enclosure to a post if it's new.
     *
     * @since 2.8.0
     *
     * @param integer $post_ID   Post ID.
     * @param array   $enclosure Enclosure data.
     */
    public function add_enclosure_if_new($post_ID, $enclosure)
    {
    }
    /**
     * Attach upload to a post.
     *
     * @since 2.1.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param int $post_ID Post ID.
     * @param string $post_content Post Content for attachment.
     */
    public function attach_uploads($post_ID, $post_content)
    {
    }
    /**
     * Edit a post.
     *
     * @since 1.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type array  $content_struct
     *     @type int    $publish
     * }
     * @return bool|IXR_Error True on success.
     */
    public function mw_editPost($args)
    {
    }
    /**
     * Retrieve post.
     *
     * @since 1.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type int    $post_ID
     *     @type string $username
     *     @type string $password
     * }
     * @return array|IXR_Error
     */
    public function mw_getPost($args)
    {
    }
    /**
     * Retrieve list of recent posts.
     *
     * @since 1.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type int    $numberposts
     * }
     * @return array|IXR_Error
     */
    public function mw_getRecentPosts($args)
    {
    }
    /**
     * Retrieve the list of categories on a given blog.
     *
     * @since 1.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     * }
     * @return array|IXR_Error
     */
    public function mw_getCategories($args)
    {
    }
    /**
     * Uploads a file, following your settings.
     *
     * Adapted from a patch by Johann Richard.
     *
     * @link http://mycvs.org/archives/2004/06/30/file-upload-to-wordpress-in-ecto/
     *
     * @since 1.5.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type array  $data
     * }
     * @return array|IXR_Error
     */
    public function mw_newMediaObject($args)
    {
    }
    /* MovableType API functions
     * specs on http://www.movabletype.org/docs/mtmanual_programmatic.html
     */
    /**
     * Retrieve the post titles of recent posts.
     *
     * @since 1.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     *     @type int    $numberposts
     * }
     * @return array|IXR_Error
     */
    public function mt_getRecentPostTitles($args)
    {
    }
    /**
     * Retrieve list of all categories on blog.
     *
     * @since 1.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $blog_id (unused)
     *     @type string $username
     *     @type string $password
     * }
     * @return array|IXR_Error
     */
    public function mt_getCategoryList($args)
    {
    }
    /**
     * Retrieve post categories.
     *
     * @since 1.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $post_ID
     *     @type string $username
     *     @type string $password
     * }
     * @return array|IXR_Error
     */
    public function mt_getPostCategories($args)
    {
    }
    /**
     * Sets categories for a post.
     *
     * @since 1.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $post_ID
     *     @type string $username
     *     @type string $password
     *     @type array  $categories
     * }
     * @return true|IXR_Error True on success.
     */
    public function mt_setPostCategories($args)
    {
    }
    /**
     * Retrieve an array of methods supported by this server.
     *
     * @since 1.5.0
     *
     * @return array
     */
    public function mt_supportedMethods()
    {
    }
    /**
     * Retrieve an empty array because we don't support per-post text filters.
     *
     * @since 1.5.0
     */
    public function mt_supportedTextFilters()
    {
    }
    /**
     * Retrieve trackbacks sent to a given post.
     *
     * @since 1.5.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param int $post_ID
     * @return array|IXR_Error
     */
    public function mt_getTrackbackPings($post_ID)
    {
    }
    /**
     * Sets a post's publish status to 'publish'.
     *
     * @since 1.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type int    $post_ID
     *     @type string $username
     *     @type string $password
     * }
     * @return int|IXR_Error
     */
    public function mt_publishPost($args)
    {
    }
    /* PingBack functions
     * specs on www.hixie.ch/specs/pingback/pingback
     */
    /**
     * Retrieves a pingback and registers it.
     *
     * @since 1.5.0
     *
     * @param array  $args {
     *     Method arguments. Note: arguments must be ordered as documented.
     *
     *     @type string $pagelinkedfrom
     *     @type string $pagelinkedto
     * }
     * @return string|IXR_Error
     */
    public function pingback_ping($args)
    {
    }
    /**
     * Retrieve array of URLs that pingbacked the given URL.
     *
     * Specs on http://www.aquarionics.com/misc/archives/blogite/0198.html
     *
     * @since 1.5.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param string $url
     * @return array|IXR_Error
     */
    public function pingback_extensions_getPingbacks($url)
    {
    }
    /**
     * Sends a pingback error based on the given error code and message.
     *
     * @since 3.6.0
     *
     * @param int    $code    Error code.
     * @param string $message Error message.
     * @return IXR_Error Error object.
     */
    protected function pingback_error($code, $message)
    {
    }
}
/**
 * WordPress environment setup class.
 *
 * @package WordPress
 * @since 2.0.0
 */
class WP
{
    /**
     * Public query variables.
     *
     * Long list of public query variables.
     *
     * @since 2.0.0
     * @var array
     */
    public $public_query_vars = array('m', 'p', 'posts', 'w', 'cat', 'withcomments', 'withoutcomments', 's', 'search', 'exact', 'sentence', 'calendar', 'page', 'paged', 'more', 'tb', 'pb', 'author', 'order', 'orderby', 'year', 'monthnum', 'day', 'hour', 'minute', 'second', 'name', 'category_name', 'tag', 'feed', 'author_name', 'static', 'pagename', 'page_id', 'error', 'attachment', 'attachment_id', 'subpost', 'subpost_id', 'preview', 'robots', 'taxonomy', 'term', 'cpage', 'post_type', 'embed');
    /**
     * Private query variables.
     *
     * Long list of private query variables.
     *
     * @since 2.0.0
     * @var array
     */
    public $private_query_vars = array('offset', 'posts_per_page', 'posts_per_archive_page', 'showposts', 'nopaging', 'post_type', 'post_status', 'category__in', 'category__not_in', 'category__and', 'tag__in', 'tag__not_in', 'tag__and', 'tag_slug__in', 'tag_slug__and', 'tag_id', 'post_mime_type', 'perm', 'comments_per_page', 'post__in', 'post__not_in', 'post_parent', 'post_parent__in', 'post_parent__not_in', 'title', 'fields');
    /**
     * Extra query variables set by the user.
     *
     * @since 2.1.0
     * @var array
     */
    public $extra_query_vars = array();
    /**
     * Query variables for setting up the WordPress Query Loop.
     *
     * @since 2.0.0
     * @var array
     */
    public $query_vars;
    /**
     * String parsed to set the query variables.
     *
     * @since 2.0.0
     * @var string
     */
    public $query_string;
    /**
     * The request path, e.g. 2015/05/06.
     *
     * @since 2.0.0
     * @var string
     */
    public $request;
    /**
     * Rewrite rule the request matched.
     *
     * @since 2.0.0
     * @var string
     */
    public $matched_rule;
    /**
     * Rewrite query the request matched.
     *
     * @since 2.0.0
     * @var string
     */
    public $matched_query;
    /**
     * Whether already did the permalink.
     *
     * @since 2.0.0
     * @var bool
     */
    public $did_permalink = \false;
    /**
     * Add name to list of public query variables.
     *
     * @since 2.1.0
     *
     * @param string $qv Query variable name.
     */
    public function add_query_var($qv)
    {
    }
    /**
     * Removes a query variable from a list of public query variables.
     *
     * @since 4.5.0
     *
     * @param string $name Query variable name.
     */
    public function remove_query_var($name)
    {
    }
    /**
     * Set the value of a query variable.
     *
     * @since 2.3.0
     *
     * @param string $key Query variable name.
     * @param mixed $value Query variable value.
     */
    public function set_query_var($key, $value)
    {
    }
    /**
     * Parse request to find correct WordPress query.
     *
     * Sets up the query variables based on the request. There are also many
     * filters and actions that can be used to further manipulate the result.
     *
     * @since 2.0.0
     *
     * @global WP_Rewrite $wp_rewrite
     *
     * @param array|string $extra_query_vars Set the extra query variables.
     */
    public function parse_request($extra_query_vars = '')
    {
    }
    /**
     * Sends additional HTTP headers for caching, content type, etc.
     *
     * Sets the Content-Type header. Sets the 'error' status (if passed) and optionally exits.
     * If showing a feed, it will also send Last-Modified, ETag, and 304 status if needed.
     *
     * @since 2.0.0
     * @since 4.4.0 `X-Pingback` header is added conditionally after posts have been queried in handle_404().
     */
    public function send_headers()
    {
    }
    /**
     * Sets the query string property based off of the query variable property.
     *
     * The {@see 'query_string'} filter is deprecated, but still works. Plugins should
     * use the {@see 'request'} filter instead.
     *
     * @since 2.0.0
     */
    public function build_query_string()
    {
    }
    /**
     * Set up the WordPress Globals.
     *
     * The query_vars property will be extracted to the GLOBALS. So care should
     * be taken when naming global variables that might interfere with the
     * WordPress environment.
     *
     * @since 2.0.0
     *
     * @global WP_Query     $wp_query
     * @global string       $query_string Query string for the loop.
     * @global array        $posts The found posts.
     * @global WP_Post|null $post The current post, if available.
     * @global string       $request The SQL statement for the request.
     * @global int          $more Only set, if single page or post.
     * @global int          $single If single page or post. Only set, if single page or post.
     * @global WP_User      $authordata Only set, if author archive.
     */
    public function register_globals()
    {
    }
    /**
     * Set up the current user.
     *
     * @since 2.0.0
     */
    public function init()
    {
    }
    /**
     * Set up the Loop based on the query variables.
     *
     * @since 2.0.0
     *
     * @global WP_Query $wp_the_query
     */
    public function query_posts()
    {
    }
    /**
     * Set the Headers for 404, if nothing is found for requested URL.
     *
     * Issue a 404 if a request doesn't match any posts and doesn't match
     * any object (e.g. an existing-but-empty category, tag, author) and a 404 was not already
     * issued, and if the request was not a search or the homepage.
     *
     * Otherwise, issue a 200.
     *
     * This sets headers after posts have been queried. handle_404() really means "handle status."
     * By inspecting the result of querying posts, seemingly successful requests can be switched to
     * a 404 so that canonical redirection logic can kick in.
     *
     * @since 2.0.0
     *
     * @global WP_Query $wp_query
     */
    public function handle_404()
    {
    }
    /**
     * Sets up all of the variables required by the WordPress environment.
     *
     * The action {@see 'wp'} has one parameter that references the WP object. It
     * allows for accessing the properties and methods to further manipulate the
     * object.
     *
     * @since 2.0.0
     *
     * @param string|array $query_args Passed to parse_request().
     */
    public function main($query_args = '')
    {
    }
}
/**
 * Dependencies API: WP_Dependencies base class
 *
 * @since 2.6.0
 *
 * @package WordPress
 * @subpackage Dependencies
 */
/**
 * Core base class extended to register items.
 *
 * @since 2.6.0
 *
 * @see _WP_Dependency
 */
class WP_Dependencies
{
    /**
     * An array of registered handle objects.
     *
     * @since 2.6.8
     * @var array
     */
    public $registered = array();
    /**
     * An array of queued _WP_Dependency handle objects.
     *
     * @since 2.6.8
     * @var array
     */
    public $queue = array();
    /**
     * An array of _WP_Dependency handle objects to queue.
     *
     * @since 2.6.0
     * @var array
     */
    public $to_do = array();
    /**
     * An array of _WP_Dependency handle objects already queued.
     *
     * @since 2.6.0
     * @var array
     */
    public $done = array();
    /**
     * An array of additional arguments passed when a handle is registered.
     *
     * Arguments are appended to the item query string.
     *
     * @since 2.6.0
     * @var array
     */
    public $args = array();
    /**
     * An array of handle groups to enqueue.
     *
     * @since 2.8.0
     * @var array
     */
    public $groups = array();
    /**
     * A handle group to enqueue.
     *
     * @since 2.8.0
     * @deprecated 4.5.0
     * @var int
     */
    public $group = 0;
    /**
     * Processes the items and dependencies.
     *
     * Processes the items passed to it or the queue, and their dependencies.
     *
     * @since 2.6.0
     * @since 2.8.0 Added the `$group` parameter.
     *
     * @param mixed $handles Optional. Items to be processed: Process queue (false), process item (string), process items (array of strings).
     * @param mixed $group   Group level: level (int), no groups (false).
     * @return array Handles of items that have been processed.
     */
    public function do_items($handles = \false, $group = \false)
    {
    }
    /**
     * Processes a dependency.
     *
     * @since 2.6.0
     *
     * @param string $handle Name of the item. Should be unique.
     * @return bool True on success, false if not set.
     */
    public function do_item($handle)
    {
    }
    /**
     * Determines dependencies.
     *
     * Recursively builds an array of items to process taking
     * dependencies into account. Does NOT catch infinite loops.
     *
     * @since 2.1.0
     * @since 2.6.0 Moved from `WP_Scripts`.
     * @since 2.8.0 Added the `$group` parameter.
     *
     * @param mixed     $handles   Item handle and argument (string) or item handles and arguments (array of strings).
     * @param bool      $recursion Internal flag that function is calling itself.
     * @param int|false $group     Group level: (int) level, (false) no groups.
     * @return bool True on success, false on failure.
     */
    public function all_deps($handles, $recursion = \false, $group = \false)
    {
    }
    /**
     * Register an item.
     *
     * Registers the item if no item of that name already exists.
     *
     * @since 2.1.0
     * @since 2.6.0 Moved from `WP_Scripts`.
     *
     * @param string           $handle Name of the item. Should be unique.
     * @param string           $src    Full URL of the item, or path of the item relative to the WordPress root directory.
     * @param array            $deps   Optional. An array of registered item handles this item depends on. Default empty array.
     * @param string|bool|null $ver    Optional. String specifying item version number, if it has one, which is added to the URL
     *                                 as a query string for cache busting purposes. If version is set to false, a version
     *                                 number is automatically added equal to current installed WordPress version.
     *                                 If set to null, no version is added.
     * @param mixed            $args   Optional. Custom property of the item. NOT the class property $args. Examples: $media, $in_footer.
     * @return bool Whether the item has been registered. True on success, false on failure.
     */
    public function add($handle, $src, $deps = array(), $ver = \false, $args = \null)
    {
    }
    /**
     * Add extra item data.
     *
     * Adds data to a registered item.
     *
     * @since 2.6.0
     *
     * @param string $handle Name of the item. Should be unique.
     * @param string $key    The data key.
     * @param mixed  $value  The data value.
     * @return bool True on success, false on failure.
     */
    public function add_data($handle, $key, $value)
    {
    }
    /**
     * Get extra item data.
     *
     * Gets data associated with a registered item.
     *
     * @since 3.3.0
     *
     * @param string $handle Name of the item. Should be unique.
     * @param string $key    The data key.
     * @return mixed Extra item data (string), false otherwise.
     */
    public function get_data($handle, $key)
    {
    }
    /**
     * Un-register an item or items.
     *
     * @since 2.1.0
     * @since 2.6.0 Moved from `WP_Scripts`.
     *
     * @param mixed $handles Item handle and argument (string) or item handles and arguments (array of strings).
     * @return void
     */
    public function remove($handles)
    {
    }
    /**
     * Queue an item or items.
     *
     * Decodes handles and arguments, then queues handles and stores
     * arguments in the class property $args. For example in extending
     * classes, $args is appended to the item url as a query string.
     * Note $args is NOT the $args property of items in the $registered array.
     *
     * @since 2.1.0
     * @since 2.6.0 Moved from `WP_Scripts`.
     *
     * @param mixed $handles Item handle and argument (string) or item handles and arguments (array of strings).
     */
    public function enqueue($handles)
    {
    }
    /**
     * Dequeue an item or items.
     *
     * Decodes handles and arguments, then dequeues handles
     * and removes arguments from the class property $args.
     *
     * @since 2.1.0
     * @since 2.6.0 Moved from `WP_Scripts`.
     *
     * @param mixed $handles Item handle and argument (string) or item handles and arguments (array of strings).
     */
    public function dequeue($handles)
    {
    }
    /**
     * Recursively search the passed dependency tree for $handle
     *
     * @since 4.0.0
     *
     * @param array  $queue  An array of queued _WP_Dependency handle objects.
     * @param string $handle Name of the item. Should be unique.
     * @return bool Whether the handle is found after recursively searching the dependency tree.
     */
    protected function recurse_deps($queue, $handle)
    {
    }
    /**
     * Query list for an item.
     *
     * @since 2.1.0
     * @since 2.6.0 Moved from `WP_Scripts`.
     *
     * @param string $handle Name of the item. Should be unique.
     * @param string $list   Property name of list array.
     * @return bool|_WP_Dependency Found, or object Item data.
     */
    public function query($handle, $list = 'registered')
    {
    }
    /**
     * Set item group, unless already in a lower group.
     *
     * @since 2.8.0
     *
     * @param string $handle    Name of the item. Should be unique.
     * @param bool   $recursion Internal flag that calling function was called recursively.
     * @param mixed  $group     Group level.
     * @return bool Not already in the group or a lower group
     */
    public function set_group($handle, $recursion, $group)
    {
    }
}
/**
 * Dependencies API: WP_Scripts class
 *
 * @since 2.6.0
 *
 * @package WordPress
 * @subpackage Dependencies
 */
/**
 * Core class used to register scripts.
 *
 * @since 2.1.0
 *
 * @see WP_Dependencies
 */
class WP_Scripts extends \WP_Dependencies
{
    /**
     * Base URL for scripts.
     *
     * Full URL with trailing slash.
     *
     * @since 2.6.0
     * @var string
     */
    public $base_url;
    /**
     * URL of the content directory.
     *
     * @since 2.8.0
     * @var string
     */
    public $content_url;
    /**
     * Default version string for stylesheets.
     *
     * @since 2.6.0
     * @var string
     */
    public $default_version;
    /**
     * Holds handles of scripts which are enqueued in footer.
     *
     * @since 2.8.0
     * @var array
     */
    public $in_footer = array();
    /**
     * Holds a list of script handles which will be concatenated.
     *
     * @since 2.8.0
     * @var string
     */
    public $concat = '';
    /**
     * Holds a string which contains script handles and their version.
     *
     * @since 2.8.0
     * @deprecated 3.4.0
     * @var string
     */
    public $concat_version = '';
    /**
     * Whether to perform concatenation.
     *
     * @since 2.8.0
     * @var bool
     */
    public $do_concat = \false;
    /**
     * Holds HTML markup of scripts and additional data if concatenation
     * is enabled.
     *
     * @since 2.8.0
     * @var string
     */
    public $print_html = '';
    /**
     * Holds inline code if concatenation is enabled.
     *
     * @since 2.8.0
     * @var string
     */
    public $print_code = '';
    /**
     * Holds a list of script handles which are not in the default directory
     * if concatenation is enabled.
     *
     * Unused in core.
     *
     * @since 2.8.0
     * @var string
     */
    public $ext_handles = '';
    /**
     * Holds a string which contains handles and versions of scripts which
     * are not in the default directory if concatenation is enabled.
     *
     * Unused in core.
     *
     * @since 2.8.0
     * @var string
     */
    public $ext_version = '';
    /**
     * List of default directories.
     *
     * @since 2.8.0
     * @var array
     */
    public $default_dirs;
    /**
     * Constructor.
     *
     * @since 2.6.0
     */
    public function __construct()
    {
    }
    /**
     * Initialize the class.
     *
     * @since 3.4.0
     */
    public function init()
    {
    }
    /**
     * Prints scripts.
     *
     * Prints the scripts passed to it or the print queue. Also prints all necessary dependencies.
     *
     * @since 2.1.0
     * @since 2.8.0 Added the `$group` parameter.
     *
     * @param mixed $handles Optional. Scripts to be printed. (void) prints queue, (string) prints
     *                       that script, (array of strings) prints those scripts. Default false.
     * @param int   $group   Optional. If scripts were queued in groups prints this group number.
     *                       Default false.
     * @return array Scripts that have been printed.
     */
    public function print_scripts($handles = \false, $group = \false)
    {
    }
    /**
     * Prints extra scripts of a registered script.
     *
     * @since 2.1.0
     * @since 2.8.0 Added the `$echo` parameter.
     * @deprecated 3.3.0
     *
     * @see print_extra_script()
     *
     * @param string $handle The script's registered handle.
     * @param bool   $echo   Optional. Whether to echo the extra script instead of just returning it.
     *                       Default true.
     * @return bool|string|void Void if no data exists, extra scripts if `$echo` is true, true otherwise.
     */
    public function print_scripts_l10n($handle, $echo = \true)
    {
    }
    /**
     * Prints extra scripts of a registered script.
     *
     * @since 3.3.0
     *
     * @param string $handle The script's registered handle.
     * @param bool   $echo   Optional. Whether to echo the extra script instead of just returning it.
     *                       Default true.
     * @return bool|string|void Void if no data exists, extra scripts if `$echo` is true, true otherwise.
     */
    public function print_extra_script($handle, $echo = \true)
    {
    }
    /**
     * Processes a script dependency.
     *
     * @since 2.6.0
     * @since 2.8.0 Added the `$group` parameter.
     *
     * @see WP_Dependencies::do_item()
     *
     * @param string $handle    The script's registered handle.
     * @param int|false $group  Optional. Group level: (int) level, (false) no groups. Default false.
     * @return bool True on success, false on failure.
     */
    public function do_item($handle, $group = \false)
    {
    }
    /**
     * Adds extra code to a registered script.
     *
     * @since 4.5.0
     *
     * @param string $handle   Name of the script to add the inline script to. Must be lowercase.
     * @param string $data     String containing the javascript to be added.
     * @param string $position Optional. Whether to add the inline script before the handle
     *                         or after. Default 'after'.
     * @return bool True on success, false on failure.
     */
    public function add_inline_script($handle, $data, $position = 'after')
    {
    }
    /**
     * Prints inline scripts registered for a specific handle.
     *
     * @since 4.5.0
     *
     * @param string $handle   Name of the script to add the inline script to. Must be lowercase.
     * @param string $position Optional. Whether to add the inline script before the handle
     *                         or after. Default 'after'.
     * @param bool $echo       Optional. Whether to echo the script instead of just returning it.
     *                         Default true.
     * @return string|false Script on success, false otherwise.
     */
    public function print_inline_script($handle, $position = 'after', $echo = \true)
    {
    }
    /**
     * Localizes a script, only if the script has already been added.
     *
     * @since 2.1.0
     *
     * @param string $handle
     * @param string $object_name
     * @param array $l10n
     * @return bool
     */
    public function localize($handle, $object_name, $l10n)
    {
    }
    /**
     * Sets handle group.
     *
     * @since 2.8.0
     *
     * @see WP_Dependencies::set_group()
     *
     * @param string    $handle    Name of the item. Should be unique.
     * @param bool      $recursion Internal flag that calling function was called recursively.
     * @param int|false $group     Optional. Group level: (int) level, (false) no groups. Default false.
     * @return bool Not already in the group or a lower group
     */
    public function set_group($handle, $recursion, $group = \false)
    {
    }
    /**
     * Determines script dependencies.
     *
     * @since 2.1.0
     *
     * @see WP_Dependencies::all_deps()
     *
     * @param mixed     $handles   Item handle and argument (string) or item handles and arguments (array of strings).
     * @param bool      $recursion Internal flag that function is calling itself.
     * @param int|false $group     Optional. Group level: (int) level, (false) no groups. Default false.
     * @return bool True on success, false on failure.
     */
    public function all_deps($handles, $recursion = \false, $group = \false)
    {
    }
    /**
     * Processes items and dependencies for the head group.
     *
     * @since 2.8.0
     *
     * @see WP_Dependencies::do_items()
     *
     * @return array Handles of items that have been processed.
     */
    public function do_head_items()
    {
    }
    /**
     * Processes items and dependencies for the footer group.
     *
     * @since 2.8.0
     *
     * @see WP_Dependencies::do_items()
     *
     * @return array Handles of items that have been processed.
     */
    public function do_footer_items()
    {
    }
    /**
     * Whether a handle's source is in a default directory.
     *
     * @since 2.8.0
     *
     * @param string $src The source of the enqueued script.
     * @return bool True if found, false if not.
     */
    public function in_default_dir($src)
    {
    }
    /**
     * Resets class properties.
     *
     * @since 2.8.0
     */
    public function reset()
    {
    }
}
/**
 * Dependencies API: WP_Styles class
 *
 * @since 2.6.0
 *
 * @package WordPress
 * @subpackage Dependencies
 */
/**
 * Core class used to register styles.
 *
 * @since 2.6.0
 *
 * @see WP_Dependencies
 */
class WP_Styles extends \WP_Dependencies
{
    /**
     * Base URL for styles.
     *
     * Full URL with trailing slash.
     *
     * @since 2.6.0
     * @var string
     */
    public $base_url;
    /**
     * URL of the content directory.
     *
     * @since 2.8.0
     * @var string
     */
    public $content_url;
    /**
     * Default version string for stylesheets.
     *
     * @since 2.6.0
     * @var string
     */
    public $default_version;
    /**
     * The current text direction.
     *
     * @since 2.6.0
     * @var string
     */
    public $text_direction = 'ltr';
    /**
     * Holds a list of style handles which will be concatenated.
     *
     * @since 2.8.0
     * @var string
     */
    public $concat = '';
    /**
     * Holds a string which contains style handles and their version.
     *
     * @since 2.8.0
     * @deprecated 3.4.0
     * @var string
     */
    public $concat_version = '';
    /**
     * Whether to perform concatenation.
     *
     * @since 2.8.0
     * @var bool
     */
    public $do_concat = \false;
    /**
     * Holds HTML markup of styles and additional data if concatenation
     * is enabled.
     *
     * @since 2.8.0
     * @var string
     */
    public $print_html = '';
    /**
     * Holds inline styles if concatenation is enabled.
     *
     * @since 3.3.0
     * @var string
     */
    public $print_code = '';
    /**
     * List of default directories.
     *
     * @since 2.8.0
     * @var array
     */
    public $default_dirs;
    /**
     * Constructor.
     *
     * @since 2.6.0
     */
    public function __construct()
    {
    }
    /**
     * Processes a style dependency.
     *
     * @since 2.6.0
     *
     * @see WP_Dependencies::do_item()
     *
     * @param string $handle The style's registered handle.
     * @return bool True on success, false on failure.
     */
    public function do_item($handle)
    {
    }
    /**
     * Adds extra CSS styles to a registered stylesheet.
     *
     * @since 3.3.0
     *
     * @param string $handle The style's registered handle.
     * @param string $code   String containing the CSS styles to be added.
     * @return bool True on success, false on failure.
     */
    public function add_inline_style($handle, $code)
    {
    }
    /**
     * Prints extra CSS styles of a registered stylesheet.
     *
     * @since 3.3.0
     *
     * @param string $handle The style's registered handle.
     * @param bool   $echo   Optional. Whether to echo the inline style instead of just returning it.
     *                       Default true.
     * @return string|bool False if no data exists, inline styles if `$echo` is true, true otherwise.
     */
    public function print_inline_style($handle, $echo = \true)
    {
    }
    /**
     * Determines style dependencies.
     *
     * @since 2.6.0
     *
     * @see WP_Dependencies::all_deps()
     *
     * @param mixed     $handles   Item handle and argument (string) or item handles and arguments (array of strings).
     * @param bool      $recursion Internal flag that function is calling itself.
     * @param int|false $group     Group level: (int) level, (false) no groups.
     * @return bool True on success, false on failure.
     */
    public function all_deps($handles, $recursion = \false, $group = \false)
    {
    }
    /**
     * Generates an enqueued style's fully-qualified URL.
     *
     * @since 2.6.0
     *
     * @param string $src The source of the enqueued style.
     * @param string $ver The version of the enqueued style.
     * @param string $handle The style's registered handle.
     * @return string Style's fully-qualified URL.
     */
    public function _css_href($src, $ver, $handle)
    {
    }
    /**
     * Whether a handle's source is in a default directory.
     *
     * @since 2.8.0
     *
     * @param string $src The source of the enqueued style.
     * @return bool True if found, false if not.
     */
    public function in_default_dir($src)
    {
    }
    /**
     * Processes items and dependencies for the footer group.
     *
     * HTML 5 allows styles in the body, grab late enqueued items and output them in the footer.
     *
     * @since 3.3.0
     *
     * @see WP_Dependencies::do_items()
     *
     * @return array Handles of items that have been processed.
     */
    public function do_footer_items()
    {
    }
    /**
     * Resets class properties.
     *
     * @since 3.3.0
     */
    public function reset()
    {
    }
}
/**
 * Customize API: WP_Customize_Media_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customize Media Control class.
 *
 * @since 4.2.0
 *
 * @see WP_Customize_Control
 */
class WP_Customize_Media_Control extends \WP_Customize_Control
{
    /**
     * Control type.
     *
     * @since 4.2.0
     * @var string
     */
    public $type = 'media';
    /**
     * Media control mime type.
     *
     * @since 4.2.0
     * @var string
     */
    public $mime_type = '';
    /**
     * Button labels.
     *
     * @since 4.2.0
     * @var array
     */
    public $button_labels = array();
    /**
     * Constructor.
     *
     * @since 4.1.0
     * @since 4.2.0 Moved from WP_Customize_Upload_Control.
     *
     * @param WP_Customize_Manager $manager Customizer bootstrap instance.
     * @param string               $id      Control ID.
     * @param array                $args    Optional. Arguments to override class property defaults.
     */
    public function __construct($manager, $id, $args = array())
    {
    }
    /**
     * Enqueue control related scripts/styles.
     *
     * @since 3.4.0
     * @since 4.2.0 Moved from WP_Customize_Upload_Control.
     */
    public function enqueue()
    {
    }
    /**
     * Refresh the parameters passed to the JavaScript via JSON.
     *
     * @since 3.4.0
     * @since 4.2.0 Moved from WP_Customize_Upload_Control.
     *
     * @see WP_Customize_Control::to_json()
     */
    public function to_json()
    {
    }
    /**
     * Don't render any content for this control from PHP.
     *
     * @since 3.4.0
     * @since 4.2.0 Moved from WP_Customize_Upload_Control.
     *
     * @see WP_Customize_Media_Control::content_template()
     */
    public function render_content()
    {
    }
    /**
     * Render a JS template for the content of the media control.
     *
     * @since 4.1.0
     * @since 4.2.0 Moved from WP_Customize_Upload_Control.
     */
    public function content_template()
    {
    }
    /**
     * Get default button labels.
     *
     * Provides an array of the default button labels based on the mime type of the current control.
     *
     * @since 4.9.0
     *
     * @return array An associative array of default button labels.
     */
    public function get_default_button_labels()
    {
    }
}
/**
 * Customize API: WP_Customize_Upload_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customize Upload Control Class.
 *
 * @since 3.4.0
 *
 * @see WP_Customize_Media_Control
 */
class WP_Customize_Upload_Control extends \WP_Customize_Media_Control
{
    public $type = 'upload';
    public $mime_type = '';
    public $button_labels = array();
    public $removed = '';
    // unused
    public $context;
    // unused
    public $extensions = array();
    // unused
    /**
     * Refresh the parameters passed to the JavaScript via JSON.
     *
     * @since 3.4.0
     *
     * @uses WP_Customize_Media_Control::to_json()
     */
    public function to_json()
    {
    }
}
/**
 * Customize API: WP_Customize_Image_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customize Image Control class.
 *
 * @since 3.4.0
 *
 * @see WP_Customize_Upload_Control
 */
class WP_Customize_Image_Control extends \WP_Customize_Upload_Control
{
    public $type = 'image';
    public $mime_type = 'image';
    /**
     * @since 3.4.2
     * @deprecated 4.1.0
     */
    public function prepare_control()
    {
    }
    /**
     * @since 3.4.0
     * @deprecated 4.1.0
     *
     * @param string $id
     * @param string $label
     * @param mixed $callback
     */
    public function add_tab($id, $label, $callback)
    {
    }
    /**
     * @since 3.4.0
     * @deprecated 4.1.0
     *
     * @param string $id
     */
    public function remove_tab($id)
    {
    }
    /**
     * @since 3.4.0
     * @deprecated 4.1.0
     *
     * @param string $url
     * @param string $thumbnail_url
     */
    public function print_tab_image($url, $thumbnail_url = \null)
    {
    }
}
/**
 * Customize API: WP_Customize_Background_Image_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customize Background Image Control class.
 *
 * @since 3.4.0
 *
 * @see WP_Customize_Image_Control
 */
class WP_Customize_Background_Image_Control extends \WP_Customize_Image_Control
{
    public $type = 'background';
    /**
     * Constructor.
     *
     * @since 3.4.0
     * @uses WP_Customize_Image_Control::__construct()
     *
     * @param WP_Customize_Manager $manager Customizer bootstrap instance.
     */
    public function __construct($manager)
    {
    }
    /**
     * Enqueue control related scripts/styles.
     *
     * @since 4.1.0
     */
    public function enqueue()
    {
    }
}
/**
 * Customize API: WP_Customize_Background_Image_Setting class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customizer Background Image Setting class.
 *
 * @since 3.4.0
 *
 * @see WP_Customize_Setting
 */
final class WP_Customize_Background_Image_Setting extends \WP_Customize_Setting
{
    public $id = 'background_image_thumb';
    /**
     * @since 3.4.0
     *
     * @param $value
     */
    public function update($value)
    {
    }
}
/**
 * Customize API: WP_Customize_Background_Position_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.7.0
 */
/**
 * Customize Background Position Control class.
 *
 * @since 4.7.0
 *
 * @see WP_Customize_Control
 */
class WP_Customize_Background_Position_Control extends \WP_Customize_Control
{
    /**
     * Type.
     *
     * @since 4.7.0
     * @var string
     */
    public $type = 'background_position';
    /**
     * Don't render the control content from PHP, as it's rendered via JS on load.
     *
     * @since 4.7.0
     */
    public function render_content()
    {
    }
    /**
     * Render a JS template for the content of the position control.
     *
     * @since 4.7.0
     */
    public function content_template()
    {
    }
}
/**
 * Customize API: WP_Customize_Code_Editor_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.9.0
 */
/**
 * Customize Code Editor Control class.
 *
 * @since 4.9.0
 *
 * @see WP_Customize_Control
 */
class WP_Customize_Code_Editor_Control extends \WP_Customize_Control
{
    /**
     * Customize control type.
     *
     * @since 4.9.0
     * @var string
     */
    public $type = 'code_editor';
    /**
     * Type of code that is being edited.
     *
     * @since 4.9.0
     * @var string
     */
    public $code_type = '';
    /**
     * Code editor settings.
     *
     * @see wp_enqueue_code_editor()
     * @since 4.9.0
     * @var array|false
     */
    public $editor_settings = array();
    /**
     * Enqueue control related scripts/styles.
     *
     * @since 4.9.0
     */
    public function enqueue()
    {
    }
    /**
     * Refresh the parameters passed to the JavaScript via JSON.
     *
     * @since 4.9.0
     * @see WP_Customize_Control::json()
     *
     * @return array Array of parameters passed to the JavaScript.
     */
    public function json()
    {
    }
    /**
     * Don't render the control content from PHP, as it's rendered via JS on load.
     *
     * @since 4.9.0
     */
    public function render_content()
    {
    }
    /**
     * Render a JS template for control display.
     *
     * @since 4.9.0
     */
    public function content_template()
    {
    }
}
/**
 * Customize API: WP_Customize_Color_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customize Color Control class.
 *
 * @since 3.4.0
 *
 * @see WP_Customize_Control
 */
class WP_Customize_Color_Control extends \WP_Customize_Control
{
    /**
     * Type.
     *
     * @var string
     */
    public $type = 'color';
    /**
     * Statuses.
     *
     * @var array
     */
    public $statuses;
    /**
     * Mode.
     *
     * @since 4.7.0
     * @var string
     */
    public $mode = 'full';
    /**
     * Constructor.
     *
     * @since 3.4.0
     * @uses WP_Customize_Control::__construct()
     *
     * @param WP_Customize_Manager $manager Customizer bootstrap instance.
     * @param string               $id      Control ID.
     * @param array                $args    Optional. Arguments to override class property defaults.
     */
    public function __construct($manager, $id, $args = array())
    {
    }
    /**
     * Enqueue scripts/styles for the color picker.
     *
     * @since 3.4.0
     */
    public function enqueue()
    {
    }
    /**
     * Refresh the parameters passed to the JavaScript via JSON.
     *
     * @since 3.4.0
     * @uses WP_Customize_Control::to_json()
     */
    public function to_json()
    {
    }
    /**
     * Don't render the control content from PHP, as it's rendered via JS on load.
     *
     * @since 3.4.0
     */
    public function render_content()
    {
    }
    /**
     * Render a JS template for the content of the color picker control.
     *
     * @since 4.1.0
     */
    public function content_template()
    {
    }
}
/**
 * Customize API: WP_Customize_Cropped_Image_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customize Cropped Image Control class.
 *
 * @since 4.3.0
 *
 * @see WP_Customize_Image_Control
 */
class WP_Customize_Cropped_Image_Control extends \WP_Customize_Image_Control
{
    /**
     * Control type.
     *
     * @since 4.3.0
     * @var string
     */
    public $type = 'cropped_image';
    /**
     * Suggested width for cropped image.
     *
     * @since 4.3.0
     * @var int
     */
    public $width = 150;
    /**
     * Suggested height for cropped image.
     *
     * @since 4.3.0
     * @var int
     */
    public $height = 150;
    /**
     * Whether the width is flexible.
     *
     * @since 4.3.0
     * @var bool
     */
    public $flex_width = \false;
    /**
     * Whether the height is flexible.
     *
     * @since 4.3.0
     * @var bool
     */
    public $flex_height = \false;
    /**
     * Enqueue control related scripts/styles.
     *
     * @since 4.3.0
     */
    public function enqueue()
    {
    }
    /**
     * Refresh the parameters passed to the JavaScript via JSON.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Control::to_json()
     */
    public function to_json()
    {
    }
}
/**
 * Customize API: WP_Customize_Custom_CSS_Setting class
 *
 * This handles validation, sanitization and saving of the value.
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.7.0
 */
/**
 * Custom Setting to handle WP Custom CSS.
 *
 * @since 4.7.0
 *
 * @see WP_Customize_Setting
 */
final class WP_Customize_Custom_CSS_Setting extends \WP_Customize_Setting
{
    /**
     * The setting type.
     *
     * @since 4.7.0
     * @var string
     */
    public $type = 'custom_css';
    /**
     * Setting Transport
     *
     * @since 4.7.0
     * @var string
     */
    public $transport = 'postMessage';
    /**
     * Capability required to edit this setting.
     *
     * @since 4.7.0
     * @var string
     */
    public $capability = 'edit_css';
    /**
     * Stylesheet
     *
     * @since 4.7.0
     * @var string
     */
    public $stylesheet = '';
    /**
     * WP_Customize_Custom_CSS_Setting constructor.
     *
     * @since 4.7.0
     *
     * @throws Exception If the setting ID does not match the pattern `custom_css[$stylesheet]`.
     *
     * @param WP_Customize_Manager $manager The Customize Manager class.
     * @param string               $id      An specific ID of the setting. Can be a
     *                                      theme mod or option name.
     * @param array                $args    Setting arguments.
     */
    public function __construct($manager, $id, $args = array())
    {
    }
    /**
     * Add filter to preview post value.
     *
     * @since 4.7.9
     *
     * @return bool False when preview short-circuits due no change needing to be previewed.
     */
    public function preview()
    {
    }
    /**
     * Filter `wp_get_custom_css` for applying the customized value.
     *
     * This is used in the preview when `wp_get_custom_css()` is called for rendering the styles.
     *
     * @since 4.7.0
     * @see wp_get_custom_css()
     *
     * @param string $css        Original CSS.
     * @param string $stylesheet Current stylesheet.
     * @return string CSS.
     */
    public function filter_previewed_wp_get_custom_css($css, $stylesheet)
    {
    }
    /**
     * Fetch the value of the setting. Will return the previewed value when `preview()` is called.
     *
     * @since 4.7.0
     * @see WP_Customize_Setting::value()
     *
     * @return string
     */
    public function value()
    {
    }
    /**
     * Validate CSS.
     *
     * Checks for imbalanced braces, brackets, and comments.
     * Notifications are rendered when the customizer state is saved.
     *
     * @since 4.7.0
     * @since 4.9.0 Checking for balanced characters has been moved client-side via linting in code editor.
     *
     * @param string $css The input string.
     * @return true|WP_Error True if the input was validated, otherwise WP_Error.
     */
    public function validate($css)
    {
    }
    /**
     * Store the CSS setting value in the custom_css custom post type for the stylesheet.
     *
     * @since 4.7.0
     *
     * @param string $css The input value.
     * @return int|false The post ID or false if the value could not be saved.
     */
    public function update($css)
    {
    }
}
/**
 * Customize API: WP_Customize_Date_Time_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.9.0
 */
/**
 * Customize Date Time Control class.
 *
 * @since 4.9.0
 *
 * @see WP_Customize_Control
 */
class WP_Customize_Date_Time_Control extends \WP_Customize_Control
{
    /**
     * Customize control type.
     *
     * @since 4.9.0
     * @var string
     */
    public $type = 'date_time';
    /**
     * Minimum Year.
     *
     * @since 4.9.0
     * @var integer
     */
    public $min_year = 1000;
    /**
     * Maximum Year.
     *
     * @since 4.9.0
     * @var integer
     */
    public $max_year = 9999;
    /**
     * Allow past date, if set to false user can only select future date.
     *
     * @since 4.9.0
     * @var boolean
     */
    public $allow_past_date = \true;
    /**
     * Whether hours, minutes, and meridian should be shown.
     *
     * @since 4.9.0
     * @var boolean
     */
    public $include_time = \true;
    /**
     * If set to false the control will appear in 24 hour format,
     * the value will still be saved in Y-m-d H:i:s format.
     *
     * @since 4.9.0
     * @var boolean
     */
    public $twelve_hour_format = \true;
    /**
     * Don't render the control's content - it's rendered with a JS template.
     *
     * @since 4.9.0
     */
    public function render_content()
    {
    }
    /**
     * Export data to JS.
     *
     * @since 4.9.0
     * @return array
     */
    public function json()
    {
    }
    /**
     * Renders a JS template for the content of date time control.
     *
     * @since 4.9.0
     */
    public function content_template()
    {
    }
    /**
     * Generate options for the month Select.
     *
     * Based on touch_time().
     *
     * @since 4.9.0
     * @see touch_time()
     *
     * @return array
     */
    public function get_month_choices()
    {
    }
    /**
     * Get timezone info.
     *
     * @since 4.9.0
     *
     * @return array abbr and description.
     */
    public function get_timezone_info()
    {
    }
    /**
     * Format GMT Offset.
     *
     * @since 4.9.0
     * @see wp_timezone_choice()
     *
     * @param float $offset Offset in hours.
     * @return string Formatted offset.
     */
    public function format_gmt_offset($offset)
    {
    }
}
/**
 * Customize API: WP_Customize_Filter_Setting class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * A setting that is used to filter a value, but will not save the results.
 *
 * Results should be properly handled using another setting or callback.
 *
 * @since 3.4.0
 *
 * @see WP_Customize_Setting
 */
class WP_Customize_Filter_Setting extends \WP_Customize_Setting
{
    /**
     * Saves the value of the setting, using the related API.
     *
     * @since 3.4.0
     *
     * @param mixed $value The value to update.
     */
    public function update($value)
    {
    }
}
/**
 * Customize API: WP_Customize_Header_Image_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customize Header Image Control class.
 *
 * @since 3.4.0
 *
 * @see WP_Customize_Image_Control
 */
class WP_Customize_Header_Image_Control extends \WP_Customize_Image_Control
{
    public $type = 'header';
    public $uploaded_headers;
    public $default_headers;
    /**
     * Constructor.
     *
     * @since 3.4.0
     *
     * @param WP_Customize_Manager $manager Customizer bootstrap instance.
     */
    public function __construct($manager)
    {
    }
    /**
     */
    public function enqueue()
    {
    }
    /**
     *
     * @global Custom_Image_Header $custom_image_header
     */
    public function prepare_control()
    {
    }
    /**
     */
    public function print_header_image_template()
    {
    }
    /**
     * @return string|void
     */
    public function get_current_image_src()
    {
    }
    /**
     */
    public function render_content()
    {
    }
}
/**
 * Customize API: WP_Customize_Header_Image_Setting class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * A setting that is used to filter a value, but will not save the results.
 *
 * Results should be properly handled using another setting or callback.
 *
 * @since 3.4.0
 *
 * @see WP_Customize_Setting
 */
final class WP_Customize_Header_Image_Setting extends \WP_Customize_Setting
{
    public $id = 'header_image_data';
    /**
     * @since 3.4.0
     *
     * @global Custom_Image_Header $custom_image_header
     *
     * @param $value
     */
    public function update($value)
    {
    }
}
/**
 * Customize API: WP_Customize_Nav_Menu_Auto_Add_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customize control to represent the auto_add field for a given menu.
 *
 * @since 4.3.0
 *
 * @see WP_Customize_Control
 */
class WP_Customize_Nav_Menu_Auto_Add_Control extends \WP_Customize_Control
{
    /**
     * Type of control, used by JS.
     *
     * @since 4.3.0
     * @var string
     */
    public $type = 'nav_menu_auto_add';
    /**
     * No-op since we're using JS template.
     *
     * @since 4.3.0
     */
    protected function render_content()
    {
    }
    /**
     * Render the Underscore template for this control.
     *
     * @since 4.3.0
     */
    protected function content_template()
    {
    }
}
/**
 * Customize API: WP_Customize_Nav_Menu_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customize Nav Menu Control Class.
 *
 * @since 4.3.0
 */
class WP_Customize_Nav_Menu_Control extends \WP_Customize_Control
{
    /**
     * Control type.
     *
     * @since 4.3.0
     * @var string
     */
    public $type = 'nav_menu';
    /**
     * Don't render the control's content - it uses a JS template instead.
     *
     * @since 4.3.0
     */
    public function render_content()
    {
    }
    /**
     * JS/Underscore template for the control UI.
     *
     * @since 4.3.0
     */
    public function content_template()
    {
    }
    /**
     * Return parameters for this control.
     *
     * @since 4.3.0
     *
     * @return array Exported parameters.
     */
    public function json()
    {
    }
}
/**
 * Customize API: WP_Customize_Nav_Menu_Item_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customize control to represent the name field for a given menu.
 *
 * @since 4.3.0
 */
class WP_Customize_Nav_Menu_Item_Control extends \WP_Customize_Control
{
    /**
     * Control type.
     *
     * @since 4.3.0
     * @var string
     */
    public $type = 'nav_menu_item';
    /**
     * The nav menu item setting.
     *
     * @since 4.3.0
     * @var WP_Customize_Nav_Menu_Item_Setting
     */
    public $setting;
    /**
     * Constructor.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Control::__construct()
     *
     * @param WP_Customize_Manager $manager Customizer bootstrap instance.
     * @param string               $id      The control ID.
     * @param array                $args    Optional. Overrides class property defaults.
     */
    public function __construct($manager, $id, $args = array())
    {
    }
    /**
     * Don't render the control's content - it's rendered with a JS template.
     *
     * @since 4.3.0
     */
    public function render_content()
    {
    }
    /**
     * JS/Underscore template for the control UI.
     *
     * @since 4.3.0
     */
    public function content_template()
    {
    }
    /**
     * Return parameters for this control.
     *
     * @since 4.3.0
     *
     * @return array Exported parameters.
     */
    public function json()
    {
    }
}
/**
 * Customize API: WP_Customize_Nav_Menu_Item_Setting class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customize Setting to represent a nav_menu.
 *
 * Subclass of WP_Customize_Setting to represent a nav_menu taxonomy term, and
 * the IDs for the nav_menu_items associated with the nav menu.
 *
 * @since 4.3.0
 *
 * @see WP_Customize_Setting
 */
class WP_Customize_Nav_Menu_Item_Setting extends \WP_Customize_Setting
{
    const ID_PATTERN = '/^nav_menu_item\\[(?P<id>-?\\d+)\\]$/';
    const POST_TYPE = 'nav_menu_item';
    const TYPE = 'nav_menu_item';
    /**
     * Setting type.
     *
     * @since 4.3.0
     * @var string
     */
    public $type = self::TYPE;
    /**
     * Default setting value.
     *
     * @since 4.3.0
     * @var array
     *
     * @see wp_setup_nav_menu_item()
     */
    public $default = array(
        // The $menu_item_data for wp_update_nav_menu_item().
        'object_id' => 0,
        'object' => '',
        // Taxonomy name.
        'menu_item_parent' => 0,
        // A.K.A. menu-item-parent-id; note that post_parent is different, and not included.
        'position' => 0,
        // A.K.A. menu_order.
        'type' => 'custom',
        // Note that type_label is not included here.
        'title' => '',
        'url' => '',
        'target' => '',
        'attr_title' => '',
        'description' => '',
        'classes' => '',
        'xfn' => '',
        'status' => 'publish',
        'original_title' => '',
        'nav_menu_term_id' => 0,
        // This will be supplied as the $menu_id arg for wp_update_nav_menu_item().
        '_invalid' => \false,
    );
    /**
     * Default transport.
     *
     * @since 4.3.0
     * @since 4.5.0 Default changed to 'refresh'
     * @var string
     */
    public $transport = 'refresh';
    /**
     * The post ID represented by this setting instance. This is the db_id.
     *
     * A negative value represents a placeholder ID for a new menu not yet saved.
     *
     * @since 4.3.0
     * @var int
     */
    public $post_id;
    /**
     * Storage of pre-setup menu item to prevent wasted calls to wp_setup_nav_menu_item().
     *
     * @since 4.3.0
     * @var array
     */
    protected $value;
    /**
     * Previous (placeholder) post ID used before creating a new menu item.
     *
     * This value will be exported to JS via the customize_save_response filter
     * so that JavaScript can update the settings to refer to the newly-assigned
     * post ID. This value is always negative to indicate it does not refer to
     * a real post.
     *
     * @since 4.3.0
     * @var int
     *
     * @see WP_Customize_Nav_Menu_Item_Setting::update()
     * @see WP_Customize_Nav_Menu_Item_Setting::amend_customize_save_response()
     */
    public $previous_post_id;
    /**
     * When previewing or updating a menu item, this stores the previous nav_menu_term_id
     * which ensures that we can apply the proper filters.
     *
     * @since 4.3.0
     * @var int
     */
    public $original_nav_menu_term_id;
    /**
     * Whether or not update() was called.
     *
     * @since 4.3.0
     * @var bool
     */
    protected $is_updated = \false;
    /**
     * Status for calling the update method, used in customize_save_response filter.
     *
     * See {@see 'customize_save_response'}.
     *
     * When status is inserted, the placeholder post ID is stored in $previous_post_id.
     * When status is error, the error is stored in $update_error.
     *
     * @since 4.3.0
     * @var string updated|inserted|deleted|error
     *
     * @see WP_Customize_Nav_Menu_Item_Setting::update()
     * @see WP_Customize_Nav_Menu_Item_Setting::amend_customize_save_response()
     */
    public $update_status;
    /**
     * Any error object returned by wp_update_nav_menu_item() when setting is updated.
     *
     * @since 4.3.0
     * @var WP_Error
     *
     * @see WP_Customize_Nav_Menu_Item_Setting::update()
     * @see WP_Customize_Nav_Menu_Item_Setting::amend_customize_save_response()
     */
    public $update_error;
    /**
     * Constructor.
     *
     * Any supplied $args override class property defaults.
     *
     * @since 4.3.0
     *
     * @param WP_Customize_Manager $manager Bootstrap Customizer instance.
     * @param string               $id      An specific ID of the setting. Can be a
     *                                      theme mod or option name.
     * @param array                $args    Optional. Setting arguments.
     *
     * @throws Exception If $id is not valid for this setting type.
     */
    public function __construct(\WP_Customize_Manager $manager, $id, array $args = array())
    {
    }
    /**
     * Clear the cached value when this nav menu item is updated.
     *
     * @since 4.3.0
     *
     * @param int $menu_id       The term ID for the menu.
     * @param int $menu_item_id  The post ID for the menu item.
     */
    public function flush_cached_value($menu_id, $menu_item_id)
    {
    }
    /**
     * Get the instance data for a given nav_menu_item setting.
     *
     * @since 4.3.0
     *
     * @see wp_setup_nav_menu_item()
     *
     * @return array|false Instance data array, or false if the item is marked for deletion.
     */
    public function value()
    {
    }
    /**
     * Get original title.
     *
     * @since 4.7.0
     *
     * @param object $item Nav menu item.
     * @return string The original title.
     */
    protected function get_original_title($item)
    {
    }
    /**
     * Get type label.
     *
     * @since 4.7.0
     *
     * @param object $item Nav menu item.
     * @returns string The type label.
     */
    protected function get_type_label($item)
    {
    }
    /**
     * Ensure that the value is fully populated with the necessary properties.
     *
     * Translates some properties added by wp_setup_nav_menu_item() and removes others.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Nav_Menu_Item_Setting::value()
     */
    protected function populate_value()
    {
    }
    /**
     * Handle previewing the setting.
     *
     * @since 4.3.0
     * @since 4.4.0 Added boolean return value.
     *
     * @see WP_Customize_Manager::post_value()
     *
     * @return bool False if method short-circuited due to no-op.
     */
    public function preview()
    {
    }
    /**
     * Filters the wp_get_nav_menu_items() result to supply the previewed menu items.
     *
     * @since 4.3.0
     *
     * @see wp_get_nav_menu_items()
     *
     * @param array  $items An array of menu item post objects.
     * @param object $menu  The menu object.
     * @param array  $args  An array of arguments used to retrieve menu item objects.
     * @return array Array of menu items,
     */
    public function filter_wp_get_nav_menu_items($items, $menu, $args)
    {
    }
    /**
     * Re-apply the tail logic also applied on $items by wp_get_nav_menu_items().
     *
     * @since 4.3.0
     * @static
     *
     * @see wp_get_nav_menu_items()
     *
     * @param array  $items An array of menu item post objects.
     * @param object $menu  The menu object.
     * @param array  $args  An array of arguments used to retrieve menu item objects.
     * @return array Array of menu items,
     */
    public static function sort_wp_get_nav_menu_items($items, $menu, $args)
    {
    }
    /**
     * Get the value emulated into a WP_Post and set up as a nav_menu_item.
     *
     * @since 4.3.0
     *
     * @return WP_Post With wp_setup_nav_menu_item() applied.
     */
    public function value_as_wp_post_nav_menu_item()
    {
    }
    /**
     * Sanitize an input.
     *
     * Note that parent::sanitize() erroneously does wp_unslash() on $value, but
     * we remove that in this override.
     *
     * @since 4.3.0
     *
     * @param array $menu_item_value The value to sanitize.
     * @return array|false|null|WP_Error Null or WP_Error if an input isn't valid. False if it is marked for deletion.
     *                                   Otherwise the sanitized value.
     */
    public function sanitize($menu_item_value)
    {
    }
    /**
     * Creates/updates the nav_menu_item post for this setting.
     *
     * Any created menu items will have their assigned post IDs exported to the client
     * via the {@see 'customize_save_response'} filter. Likewise, any errors will be
     * exported to the client via the customize_save_response() filter.
     *
     * To delete a menu, the client can send false as the value.
     *
     * @since 4.3.0
     *
     * @see wp_update_nav_menu_item()
     *
     * @param array|false $value The menu item array to update. If false, then the menu item will be deleted
     *                           entirely. See WP_Customize_Nav_Menu_Item_Setting::$default for what the value
     *                           should consist of.
     * @return null|void
     */
    protected function update($value)
    {
    }
    /**
     * Export data for the JS client.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Nav_Menu_Item_Setting::update()
     *
     * @param array $data Additional information passed back to the 'saved' event on `wp.customize`.
     * @return array Save response data.
     */
    public function amend_customize_save_response($data)
    {
    }
}
/**
 * Customize API: WP_Customize_Nav_Menu_Location_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customize Menu Location Control Class.
 *
 * This custom control is only needed for JS.
 *
 * @since 4.3.0
 *
 * @see WP_Customize_Control
 */
class WP_Customize_Nav_Menu_Location_Control extends \WP_Customize_Control
{
    /**
     * Control type.
     *
     * @since 4.3.0
     * @var string
     */
    public $type = 'nav_menu_location';
    /**
     * Location ID.
     *
     * @since 4.3.0
     * @var string
     */
    public $location_id = '';
    /**
     * Refresh the parameters passed to JavaScript via JSON.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Control::to_json()
     */
    public function to_json()
    {
    }
    /**
     * Render content just like a normal select control.
     *
     * @since 4.3.0
     * @since 4.9.0 Added a button to create menus.
     */
    public function render_content()
    {
    }
}
/**
 * Customize API: WP_Customize_Nav_Menu_Locations_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.9.0
 */
/**
 * Customize Nav Menu Locations Control Class.
 *
 * @since 4.9.0
 */
class WP_Customize_Nav_Menu_Locations_Control extends \WP_Customize_Control
{
    /**
     * Control type.
     *
     * @since 4.9.0
     * @var string
     */
    public $type = 'nav_menu_locations';
    /**
     * Don't render the control's content - it uses a JS template instead.
     *
     * @since 4.9.0
     */
    public function render_content()
    {
    }
    /**
     * JS/Underscore template for the control UI.
     *
     * @since 4.9.0
     */
    public function content_template()
    {
    }
}
/**
 * Customize API: WP_Customize_Nav_Menu_Name_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customize control to represent the name field for a given menu.
 *
 * @since 4.3.0
 *
 * @see WP_Customize_Control
 */
class WP_Customize_Nav_Menu_Name_Control extends \WP_Customize_Control
{
    /**
     * Type of control, used by JS.
     *
     * @since 4.3.0
     * @var string
     */
    public $type = 'nav_menu_name';
    /**
     * No-op since we're using JS template.
     *
     * @since 4.3.0
     */
    protected function render_content()
    {
    }
    /**
     * Render the Underscore template for this control.
     *
     * @since 4.3.0
     */
    protected function content_template()
    {
    }
}
/**
 * Customize API: WP_Customize_Nav_Menu_Section class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customize Menu Section Class
 *
 * Custom section only needed in JS.
 *
 * @since 4.3.0
 *
 * @see WP_Customize_Section
 */
class WP_Customize_Nav_Menu_Section extends \WP_Customize_Section
{
    /**
     * Control type.
     *
     * @since 4.3.0
     * @var string
     */
    public $type = 'nav_menu';
    /**
     * Get section parameters for JS.
     *
     * @since 4.3.0
     * @return array Exported parameters.
     */
    public function json()
    {
    }
}
/**
 * Customize API: WP_Customize_Nav_Menu_Setting class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customize Setting to represent a nav_menu.
 *
 * Subclass of WP_Customize_Setting to represent a nav_menu taxonomy term, and
 * the IDs for the nav_menu_items associated with the nav menu.
 *
 * @since 4.3.0
 *
 * @see wp_get_nav_menu_object()
 * @see WP_Customize_Setting
 */
class WP_Customize_Nav_Menu_Setting extends \WP_Customize_Setting
{
    const ID_PATTERN = '/^nav_menu\\[(?P<id>-?\\d+)\\]$/';
    const TAXONOMY = 'nav_menu';
    const TYPE = 'nav_menu';
    /**
     * Setting type.
     *
     * @since 4.3.0
     * @var string
     */
    public $type = self::TYPE;
    /**
     * Default setting value.
     *
     * @since 4.3.0
     * @var array
     *
     * @see wp_get_nav_menu_object()
     */
    public $default = array('name' => '', 'description' => '', 'parent' => 0, 'auto_add' => \false);
    /**
     * Default transport.
     *
     * @since 4.3.0
     * @var string
     */
    public $transport = 'postMessage';
    /**
     * The term ID represented by this setting instance.
     *
     * A negative value represents a placeholder ID for a new menu not yet saved.
     *
     * @since 4.3.0
     * @var int
     */
    public $term_id;
    /**
     * Previous (placeholder) term ID used before creating a new menu.
     *
     * This value will be exported to JS via the {@see 'customize_save_response'} filter
     * so that JavaScript can update the settings to refer to the newly-assigned
     * term ID. This value is always negative to indicate it does not refer to
     * a real term.
     *
     * @since 4.3.0
     * @var int
     *
     * @see WP_Customize_Nav_Menu_Setting::update()
     * @see WP_Customize_Nav_Menu_Setting::amend_customize_save_response()
     */
    public $previous_term_id;
    /**
     * Whether or not update() was called.
     *
     * @since 4.3.0
     * @var bool
     */
    protected $is_updated = \false;
    /**
     * Status for calling the update method, used in customize_save_response filter.
     *
     * See {@see 'customize_save_response'}.
     *
     * When status is inserted, the placeholder term ID is stored in `$previous_term_id`.
     * When status is error, the error is stored in `$update_error`.
     *
     * @since 4.3.0
     * @var string updated|inserted|deleted|error
     *
     * @see WP_Customize_Nav_Menu_Setting::update()
     * @see WP_Customize_Nav_Menu_Setting::amend_customize_save_response()
     */
    public $update_status;
    /**
     * Any error object returned by wp_update_nav_menu_object() when setting is updated.
     *
     * @since 4.3.0
     * @var WP_Error
     *
     * @see WP_Customize_Nav_Menu_Setting::update()
     * @see WP_Customize_Nav_Menu_Setting::amend_customize_save_response()
     */
    public $update_error;
    /**
     * Constructor.
     *
     * Any supplied $args override class property defaults.
     *
     * @since 4.3.0
     *
     * @param WP_Customize_Manager $manager Bootstrap Customizer instance.
     * @param string               $id      An specific ID of the setting. Can be a
     *                                      theme mod or option name.
     * @param array                $args    Optional. Setting arguments.
     *
     * @throws Exception If $id is not valid for this setting type.
     */
    public function __construct(\WP_Customize_Manager $manager, $id, array $args = array())
    {
    }
    /**
     * Get the instance data for a given widget setting.
     *
     * @since 4.3.0
     *
     * @see wp_get_nav_menu_object()
     *
     * @return array Instance data.
     */
    public function value()
    {
    }
    /**
     * Handle previewing the setting.
     *
     * @since 4.3.0
     * @since 4.4.0 Added boolean return value
     *
     * @see WP_Customize_Manager::post_value()
     *
     * @return bool False if method short-circuited due to no-op.
     */
    public function preview()
    {
    }
    /**
     * Filters the wp_get_nav_menus() result to ensure the inserted menu object is included, and the deleted one is removed.
     *
     * @since 4.3.0
     *
     * @see wp_get_nav_menus()
     *
     * @param array $menus An array of menu objects.
     * @param array $args  An array of arguments used to retrieve menu objects.
     * @return array
     */
    public function filter_wp_get_nav_menus($menus, $args)
    {
    }
    /**
     * Temporary non-closure passing of orderby value to function.
     *
     * @since 4.3.0
     * @var string
     *
     * @see WP_Customize_Nav_Menu_Setting::filter_wp_get_nav_menus()
     * @see WP_Customize_Nav_Menu_Setting::_sort_menus_by_orderby()
     */
    protected $_current_menus_sort_orderby;
    /**
     * Sort menu objects by the class-supplied orderby property.
     *
     * This is a workaround for a lack of closures.
     *
     * @since 4.3.0
     * @deprecated 4.7.0 Use wp_list_sort()
     *
     * @param object $menu1
     * @param object $menu2
     * @return int
     *
     * @see WP_Customize_Nav_Menu_Setting::filter_wp_get_nav_menus()
     */
    protected function _sort_menus_by_orderby($menu1, $menu2)
    {
    }
    /**
     * Filters the wp_get_nav_menu_object() result to supply the previewed menu object.
     *
     * Requesting a nav_menu object by anything but ID is not supported.
     *
     * @since 4.3.0
     *
     * @see wp_get_nav_menu_object()
     *
     * @param object|null $menu_obj Object returned by wp_get_nav_menu_object().
     * @param string      $menu_id  ID of the nav_menu term. Requests by slug or name will be ignored.
     * @return object|null
     */
    public function filter_wp_get_nav_menu_object($menu_obj, $menu_id)
    {
    }
    /**
     * Filters the nav_menu_options option to include this menu's auto_add preference.
     *
     * @since 4.3.0
     *
     * @param array $nav_menu_options Nav menu options including auto_add.
     * @return array (Kaybe) modified nav menu options.
     */
    public function filter_nav_menu_options($nav_menu_options)
    {
    }
    /**
     * Sanitize an input.
     *
     * Note that parent::sanitize() erroneously does wp_unslash() on $value, but
     * we remove that in this override.
     *
     * @since 4.3.0
     *
     * @param array $value The value to sanitize.
     * @return array|false|null Null if an input isn't valid. False if it is marked for deletion.
     *                          Otherwise the sanitized value.
     */
    public function sanitize($value)
    {
    }
    /**
     * Storage for data to be sent back to client in customize_save_response filter.
     *
     * See {@see 'customize_save_response'}.
     *
     * @since 4.3.0
     * @var array
     *
     * @see WP_Customize_Nav_Menu_Setting::amend_customize_save_response()
     */
    protected $_widget_nav_menu_updates = array();
    /**
     * Create/update the nav_menu term for this setting.
     *
     * Any created menus will have their assigned term IDs exported to the client
     * via the {@see 'customize_save_response'} filter. Likewise, any errors will be exported
     * to the client via the customize_save_response() filter.
     *
     * To delete a menu, the client can send false as the value.
     *
     * @since 4.3.0
     *
     * @see wp_update_nav_menu_object()
     *
     * @param array|false $value {
     *     The value to update. Note that slug cannot be updated via wp_update_nav_menu_object().
     *     If false, then the menu will be deleted entirely.
     *
     *     @type string $name        The name of the menu to save.
     *     @type string $description The term description. Default empty string.
     *     @type int    $parent      The id of the parent term. Default 0.
     *     @type bool   $auto_add    Whether pages will auto_add to this menu. Default false.
     * }
     * @return null|void
     */
    protected function update($value)
    {
    }
    /**
     * Updates a nav_menu_options array.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Nav_Menu_Setting::filter_nav_menu_options()
     * @see WP_Customize_Nav_Menu_Setting::update()
     *
     * @param array $nav_menu_options Array as returned by get_option( 'nav_menu_options' ).
     * @param int   $menu_id          The term ID for the given menu.
     * @param bool  $auto_add         Whether to auto-add or not.
     * @return array (Maybe) modified nav_menu_otions array.
     */
    protected function filter_nav_menu_options_value($nav_menu_options, $menu_id, $auto_add)
    {
    }
    /**
     * Export data for the JS client.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Nav_Menu_Setting::update()
     *
     * @param array $data Additional information passed back to the 'saved' event on `wp.customize`.
     * @return array Export data.
     */
    public function amend_customize_save_response($data)
    {
    }
}
/**
 * Customize API: WP_Customize_Nav_Menus_Panel class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customize Nav Menus Panel Class
 *
 * Needed to add screen options.
 *
 * @since 4.3.0
 *
 * @see WP_Customize_Panel
 */
class WP_Customize_Nav_Menus_Panel extends \WP_Customize_Panel
{
    /**
     * Control type.
     *
     * @since 4.3.0
     * @var string
     */
    public $type = 'nav_menus';
    /**
     * Render screen options for Menus.
     *
     * @since 4.3.0
     */
    public function render_screen_options()
    {
    }
    /**
     * Returns the advanced options for the nav menus page.
     *
     * Link title attribute added as it's a relatively advanced concept for new users.
     *
     * @since 4.3.0
     * @deprecated 4.5.0 Deprecated in favor of wp_nav_menu_manage_columns().
     */
    public function wp_nav_menu_manage_columns()
    {
    }
    /**
     * An Underscore (JS) template for this panel's content (but not its container).
     *
     * Class variables for this panel class are available in the `data` JS object;
     * export custom variables by overriding WP_Customize_Panel::json().
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Panel::print_template()
     */
    protected function content_template()
    {
    }
}
/**
 * Customize API: WP_Customize_New_Menu_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 * @deprecated 4.9.0 This file is no longer used as of the menu creation UX introduced in #40104.
 */
/**
 * Customize control class for new menus.
 *
 * @since 4.3.0
 * @deprecated 4.9.0 This class is no longer used as of the menu creation UX introduced in #40104.
 *
 * @see WP_Customize_Control
 */
class WP_Customize_New_Menu_Control extends \WP_Customize_Control
{
    /**
     * Control type.
     *
     * @since 4.3.0
     * @var string
     */
    public $type = 'new_menu';
    /**
     * Constructor.
     *
     * @since 4.9.0
     *
     * @param WP_Customize_Manager $manager Manager.
     * @param string               $id      ID.
     * @param array                $args    Args.
     */
    public function __construct(\WP_Customize_Manager $manager, $id, array $args = array())
    {
    }
    /**
     * Render the control's content.
     *
     * @since 4.3.0
     */
    public function render_content()
    {
    }
}
/**
 * Customize API: WP_Customize_New_Menu_Section class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 * @deprecated 4.9.0 This file is no longer used as of the menu creation UX introduced in #40104.
 */
/**
 * Customize Menu Section Class
 *
 * @since 4.3.0
 * @deprecated 4.9.0 This class is no longer used as of the menu creation UX introduced in #40104.
 *
 * @see WP_Customize_Section
 */
class WP_Customize_New_Menu_Section extends \WP_Customize_Section
{
    /**
     * Control type.
     *
     * @since 4.3.0
     * @var string
     */
    public $type = 'new_menu';
    /**
     * Constructor.
     *
     * Any supplied $args override class property defaults.
     *
     * @since 4.9.0
     *
     * @param WP_Customize_Manager $manager Customizer bootstrap instance.
     * @param string               $id      An specific ID of the section.
     * @param array                $args    Section arguments.
     */
    public function __construct(\WP_Customize_Manager $manager, $id, array $args = array())
    {
    }
    /**
     * Render the section, and the controls that have been added to it.
     *
     * @since 4.3.0
     */
    protected function render()
    {
    }
}
/**
 * Customize API: WP_Customize_Partial class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.5.0
 */
/**
 * Core Customizer class for implementing selective refresh partials.
 *
 * Representation of a rendered region in the previewed page that gets
 * selectively refreshed when an associated setting is changed.
 * This class is analogous of WP_Customize_Control.
 *
 * @since 4.5.0
 */
class WP_Customize_Partial
{
    /**
     * Component.
     *
     * @since 4.5.0
     * @var WP_Customize_Selective_Refresh
     */
    public $component;
    /**
     * Unique identifier for the partial.
     *
     * If the partial is used to display a single setting, this would generally
     * be the same as the associated setting's ID.
     *
     * @since 4.5.0
     * @var string
     */
    public $id;
    /**
     * Parsed ID.
     *
     * @since 4.5.0
     * @var array {
     *     @type string $base ID base.
     *     @type array  $keys Keys for multidimensional.
     * }
     */
    protected $id_data = array();
    /**
     * Type of this partial.
     *
     * @since 4.5.0
     * @var string
     */
    public $type = 'default';
    /**
     * The jQuery selector to find the container element for the partial.
     *
     * @since 4.5.0
     * @var string
     */
    public $selector;
    /**
     * IDs for settings tied to the partial.
     *
     * @since 4.5.0
     * @var array
     */
    public $settings;
    /**
     * The ID for the setting that this partial is primarily responsible for rendering.
     *
     * If not supplied, it will default to the ID of the first setting.
     *
     * @since 4.5.0
     * @var string
     */
    public $primary_setting;
    /**
     * Capability required to edit this partial.
     *
     * Normally this is empty and the capability is derived from the capabilities
     * of the associated `$settings`.
     *
     * @since 4.5.0
     * @var string
     */
    public $capability;
    /**
     * Render callback.
     *
     * @since 4.5.0
     * @see WP_Customize_Partial::render()
     * @var callable Callback is called with one argument, the instance of
     *                 WP_Customize_Partial. The callback can either echo the
     *                 partial or return the partial as a string, or return false if error.
     */
    public $render_callback;
    /**
     * Whether the container element is included in the partial, or if only the contents are rendered.
     *
     * @since 4.5.0
     * @var bool
     */
    public $container_inclusive = \false;
    /**
     * Whether to refresh the entire preview in case a partial cannot be refreshed.
     *
     * A partial render is considered a failure if the render_callback returns false.
     *
     * @since 4.5.0
     * @var bool
     */
    public $fallback_refresh = \true;
    /**
     * Constructor.
     *
     * Supplied `$args` override class property defaults.
     *
     * If `$args['settings']` is not defined, use the $id as the setting ID.
     *
     * @since 4.5.0
     *
     * @param WP_Customize_Selective_Refresh $component Customize Partial Refresh plugin instance.
     * @param string                         $id        Control ID.
     * @param array                          $args      {
     *     Optional. Arguments to override class property defaults.
     *
     *     @type array|string $settings All settings IDs tied to the partial. If undefined, `$id` will be used.
     * }
     */
    public function __construct(\WP_Customize_Selective_Refresh $component, $id, $args = array())
    {
    }
    /**
     * Retrieves parsed ID data for multidimensional setting.
     *
     * @since 4.5.0
     *
     * @return array {
     *     ID data for multidimensional partial.
     *
     *     @type string $base ID base.
     *     @type array  $keys Keys for multidimensional array.
     * }
     */
    public final function id_data()
    {
    }
    /**
     * Renders the template partial involving the associated settings.
     *
     * @since 4.5.0
     *
     * @param array $container_context Optional. Array of context data associated with the target container (placement).
     *                                 Default empty array.
     * @return string|array|false The rendered partial as a string, raw data array (for client-side JS template),
     *                            or false if no render applied.
     */
    public final function render($container_context = array())
    {
    }
    /**
     * Default callback used when invoking WP_Customize_Control::render().
     *
     * Note that this method may echo the partial *or* return the partial as
     * a string or array, but not both. Output buffering is performed when this
     * is called. Subclasses can override this with their specific logic, or they
     * may provide an 'render_callback' argument to the constructor.
     *
     * This method may return an HTML string for straight DOM injection, or it
     * may return an array for supporting Partial JS subclasses to render by
     * applying to client-side templating.
     *
     * @since 4.5.0
     *
     * @param WP_Customize_Partial $partial Partial.
     * @param array                $context Context.
     * @return string|array|false
     */
    public function render_callback(\WP_Customize_Partial $partial, $context = array())
    {
    }
    /**
     * Retrieves the data to export to the client via JSON.
     *
     * @since 4.5.0
     *
     * @return array Array of parameters passed to the JavaScript.
     */
    public function json()
    {
    }
    /**
     * Checks if the user can refresh this partial.
     *
     * Returns false if the user cannot manipulate one of the associated settings,
     * or if one of the associated settings does not exist.
     *
     * @since 4.5.0
     *
     * @return bool False if user can't edit one of the related settings,
     *                    or if one of the associated settings does not exist.
     */
    public final function check_capabilities()
    {
    }
}
/**
 * Customize API: WP_Customize_Selective_Refresh class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.5.0
 */
/**
 * Core Customizer class for implementing selective refresh.
 *
 * @since 4.5.0
 */
final class WP_Customize_Selective_Refresh
{
    /**
     * Query var used in requests to render partials.
     *
     * @since 4.5.0
     */
    const RENDER_QUERY_VAR = 'wp_customize_render_partials';
    /**
     * Customize manager.
     *
     * @since 4.5.0
     * @var WP_Customize_Manager
     */
    public $manager;
    /**
     * Registered instances of WP_Customize_Partial.
     *
     * @since 4.5.0
     * @var WP_Customize_Partial[]
     */
    protected $partials = array();
    /**
     * Log of errors triggered when partials are rendered.
     *
     * @since 4.5.0
     * @var array
     */
    protected $triggered_errors = array();
    /**
     * Keep track of the current partial being rendered.
     *
     * @since 4.5.0
     * @var string
     */
    protected $current_partial_id;
    /**
     * Plugin bootstrap for Partial Refresh functionality.
     *
     * @since 4.5.0
     *
     * @param WP_Customize_Manager $manager Manager instance.
     */
    public function __construct(\WP_Customize_Manager $manager)
    {
    }
    /**
     * Retrieves the registered partials.
     *
     * @since 4.5.0
     *
     * @return array Partials.
     */
    public function partials()
    {
    }
    /**
     * Adds a partial.
     *
     * @since 4.5.0
     *
     * @param WP_Customize_Partial|string $id   Customize Partial object, or Panel ID.
     * @param array                       $args {
     *  Optional. Array of properties for the new Partials object. Default empty array.
     *
     *  @type string   $type                  Type of the partial to be created.
     *  @type string   $selector              The jQuery selector to find the container element for the partial, that is, a partial's placement.
     *  @type array    $settings              IDs for settings tied to the partial.
     *  @type string   $primary_setting       The ID for the setting that this partial is primarily responsible for
     *                                        rendering. If not supplied, it will default to the ID of the first setting.
     *  @type string   $capability            Capability required to edit this partial.
     *                                        Normally this is empty and the capability is derived from the capabilities
     *                                        of the associated `$settings`.
     *  @type callable $render_callback       Render callback.
     *                                        Callback is called with one argument, the instance of WP_Customize_Partial.
     *                                        The callback can either echo the partial or return the partial as a string,
     *                                        or return false if error.
     *  @type bool     $container_inclusive   Whether the container element is included in the partial, or if only
     *                                        the contents are rendered.
     *  @type bool     $fallback_refresh      Whether to refresh the entire preview in case a partial cannot be refreshed.
     *                                        A partial render is considered a failure if the render_callback returns
     *                                        false.
     * }
     * @return WP_Customize_Partial             The instance of the panel that was added.
     */
    public function add_partial($id, $args = array())
    {
    }
    /**
     * Retrieves a partial.
     *
     * @since 4.5.0
     *
     * @param string $id Customize Partial ID.
     * @return WP_Customize_Partial|null The partial, if set. Otherwise null.
     */
    public function get_partial($id)
    {
    }
    /**
     * Removes a partial.
     *
     * @since 4.5.0
     *
     * @param string $id Customize Partial ID.
     */
    public function remove_partial($id)
    {
    }
    /**
     * Initializes the Customizer preview.
     *
     * @since 4.5.0
     */
    public function init_preview()
    {
    }
    /**
     * Enqueues preview scripts.
     *
     * @since 4.5.0
     */
    public function enqueue_preview_scripts()
    {
    }
    /**
     * Exports data in preview after it has finished rendering so that partials can be added at runtime.
     *
     * @since 4.5.0
     */
    public function export_preview_data()
    {
    }
    /**
     * Registers dynamically-created partials.
     *
     * @since 4.5.0
     *
     * @see WP_Customize_Manager::add_dynamic_settings()
     *
     * @param array $partial_ids The partial ID to add.
     * @return array Added WP_Customize_Partial instances.
     */
    public function add_dynamic_partials($partial_ids)
    {
    }
    /**
     * Checks whether the request is for rendering partials.
     *
     * Note that this will not consider whether the request is authorized or valid,
     * just that essentially the route is a match.
     *
     * @since 4.5.0
     *
     * @return bool Whether the request is for rendering partials.
     */
    public function is_render_partials_request()
    {
    }
    /**
     * Handles PHP errors triggered during rendering the partials.
     *
     * These errors will be relayed back to the client in the Ajax response.
     *
     * @since 4.5.0
     *
     * @param int    $errno   Error number.
     * @param string $errstr  Error string.
     * @param string $errfile Error file.
     * @param string $errline Error line.
     * @return true Always true.
     */
    public function handle_error($errno, $errstr, $errfile = \null, $errline = \null)
    {
    }
    /**
     * Handles the Ajax request to return the rendered partials for the requested placements.
     *
     * @since 4.5.0
     */
    public function handle_render_partials_request()
    {
    }
}
/**
 * Customize API: WP_Customize_Sidebar_Section class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customizer section representing widget area (sidebar).
 *
 * @since 4.1.0
 *
 * @see WP_Customize_Section
 */
class WP_Customize_Sidebar_Section extends \WP_Customize_Section
{
    /**
     * Type of this section.
     *
     * @since 4.1.0
     * @var string
     */
    public $type = 'sidebar';
    /**
     * Unique identifier.
     *
     * @since 4.1.0
     * @var string
     */
    public $sidebar_id;
    /**
     * Gather the parameters passed to client JavaScript via JSON.
     *
     * @since 4.1.0
     *
     * @return array The array to be exported to the client as JSON.
     */
    public function json()
    {
    }
    /**
     * Whether the current sidebar is rendered on the page.
     *
     * @since 4.1.0
     *
     * @return bool Whether sidebar is rendered.
     */
    public function active_callback()
    {
    }
}
/**
 * Customize API: WP_Customize_Site_Icon_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customize Site Icon control class.
 *
 * Used only for custom functionality in JavaScript.
 *
 * @since 4.3.0
 *
 * @see WP_Customize_Cropped_Image_Control
 */
class WP_Customize_Site_Icon_Control extends \WP_Customize_Cropped_Image_Control
{
    /**
     * Control type.
     *
     * @since 4.3.0
     * @var string
     */
    public $type = 'site_icon';
    /**
     * Constructor.
     *
     * @since 4.3.0
     *
     * @param WP_Customize_Manager $manager Customizer bootstrap instance.
     * @param string               $id      Control ID.
     * @param array                $args    Optional. Arguments to override class property defaults.
     */
    public function __construct($manager, $id, $args = array())
    {
    }
    /**
     * Renders a JS template for the content of the site icon control.
     *
     * @since 4.5.0
     */
    public function content_template()
    {
    }
}
/**
 * Customize API: WP_Customize_Theme_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customize Theme Control class.
 *
 * @since 4.2.0
 *
 * @see WP_Customize_Control
 */
class WP_Customize_Theme_Control extends \WP_Customize_Control
{
    /**
     * Customize control type.
     *
     * @since 4.2.0
     * @var string
     */
    public $type = 'theme';
    /**
     * Theme object.
     *
     * @since 4.2.0
     * @var WP_Theme
     */
    public $theme;
    /**
     * Refresh the parameters passed to the JavaScript via JSON.
     *
     * @since 4.2.0
     *
     * @see WP_Customize_Control::to_json()
     */
    public function to_json()
    {
    }
    /**
     * Don't render the control content from PHP, as it's rendered via JS on load.
     *
     * @since 4.2.0
     */
    public function render_content()
    {
    }
    /**
     * Render a JS template for theme display.
     *
     * @since 4.2.0
     */
    public function content_template()
    {
    }
}
/**
 * Customize API: WP_Customize_Themes_Panel class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.9.0
 */
/**
 * Customize Themes Panel Class
 *
 * @since 4.9.0
 *
 * @see WP_Customize_Panel
 */
class WP_Customize_Themes_Panel extends \WP_Customize_Panel
{
    /**
     * Panel type.
     *
     * @since 4.9.0
     * @var string
     */
    public $type = 'themes';
    /**
     * An Underscore (JS) template for rendering this panel's container.
     *
     * The themes panel renders a custom panel heading with the current theme and a switch themes button.
     *
     * @see WP_Customize_Panel::print_template()
     *
     * @since 4.9.0
     */
    protected function render_template()
    {
    }
    /**
     * An Underscore (JS) template for this panel's content (but not its container).
     *
     * Class variables for this panel class are available in the `data` JS object;
     * export custom variables by overriding WP_Customize_Panel::json().
     *
     * @since 4.9.0
     *
     * @see WP_Customize_Panel::print_template()
     */
    protected function content_template()
    {
    }
}
/**
 * Customize API: WP_Customize_Themes_Section class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Customize Themes Section class.
 *
 * A UI container for theme controls, which are displayed within sections.
 *
 * @since 4.2.0
 *
 * @see WP_Customize_Section
 */
class WP_Customize_Themes_Section extends \WP_Customize_Section
{
    /**
     * Section type.
     *
     * @since 4.2.0
     * @var string
     */
    public $type = 'themes';
    /**
     * Theme section action.
     *
     * Defines the type of themes to load (installed, wporg, etc.).
     *
     * @since 4.9.0
     * @var string
     */
    public $action = '';
    /**
     * Theme section filter type.
     *
     * Determines whether filters are applied to loaded (local) themes or by initiating a new remote query (remote).
     * When filtering is local, the initial themes query is not paginated by default.
     *
     * @since 4.9.0
     * @var string
     */
    public $filter_type = 'local';
    /**
     * Get section parameters for JS.
     *
     * @since 4.9.0
     * @return array Exported parameters.
     */
    public function json()
    {
    }
    /**
     * Render a themes section as a JS template.
     *
     * The template is only rendered by PHP once, so all actions are prepared at once on the server side.
     *
     * @since 4.9.0
     */
    protected function render_template()
    {
    }
    /**
     * Render the filter bar portion of a themes section as a JS template.
     *
     * The template is only rendered by PHP once, so all actions are prepared at once on the server side.
     * The filter bar container is rendered by @see `render_template()`.
     *
     * @since 4.9.0
     */
    protected function filter_bar_content_template()
    {
    }
    /**
     * Render the filter drawer portion of a themes section as a JS template.
     *
     * The filter bar container is rendered by @see `render_template()`.
     *
     * @since 4.9.0
     */
    protected function filter_drawer_content_template()
    {
    }
}
/**
 * Customize API: WP_Widget_Area_Customize_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 3.4.0
 */
/**
 * Widget Area Customize Control class.
 *
 * @since 3.9.0
 *
 * @see WP_Customize_Control
 */
class WP_Widget_Area_Customize_Control extends \WP_Customize_Control
{
    /**
     * Customize control type.
     *
     * @since 3.9.0
     * @var string
     */
    public $type = 'sidebar_widgets';
    /**
     * Sidebar ID.
     *
     * @since 3.9.0
     * @var int|string
     */
    public $sidebar_id;
    /**
     * Refreshes the parameters passed to the JavaScript via JSON.
     *
     * @since 3.9.0
     */
    public function to_json()
    {
    }
    /**
     * Renders the control's content.
     *
     * @since 3.9.0
     */
    public function render_content()
    {
    }
}
/**
 * Customize API: WP_Widget_Form_Customize_Control class
 *
 * @package WordPress
 * @subpackage Customize
 * @since 4.4.0
 */
/**
 * Widget Form Customize Control class.
 *
 * @since 3.9.0
 *
 * @see WP_Customize_Control
 */
class WP_Widget_Form_Customize_Control extends \WP_Customize_Control
{
    public $type = 'widget_form';
    public $widget_id;
    public $widget_id_base;
    public $sidebar_id;
    public $is_new = \false;
    public $width;
    public $height;
    public $is_wide = \false;
    /**
     * Gather control params for exporting to JavaScript.
     *
     * @since 3.9.0
     *
     * @global array $wp_registered_widgets
     */
    public function to_json()
    {
    }
    /**
     * Override render_content to be no-op since content is exported via to_json for deferred embedding.
     *
     * @since 3.9.0
     */
    public function render_content()
    {
    }
    /**
     * Whether the current widget is rendered on the page.
     *
     * @since 4.0.0
     *
     * @return bool Whether the widget is rendered.
     */
    public function active_callback()
    {
    }
}
/**
 * Class for generating SQL clauses that filter a primary query according to date.
 *
 * WP_Date_Query is a helper that allows primary query classes, such as WP_Query, to filter
 * their results by date columns, by generating `WHERE` subclauses to be attached to the
 * primary SQL query string.
 *
 * Attempting to filter by an invalid date value (eg month=13) will generate SQL that will
 * return no results. In these cases, a _doing_it_wrong() error notice is also thrown.
 * See WP_Date_Query::validate_date_values().
 *
 * @link https://codex.wordpress.org/Function_Reference/WP_Query Codex page.
 *
 * @since 3.7.0
 */
class WP_Date_Query
{
    /**
     * Array of date queries.
     *
     * See WP_Date_Query::__construct() for information on date query arguments.
     *
     * @since 3.7.0
     * @var array
     */
    public $queries = array();
    /**
     * The default relation between top-level queries. Can be either 'AND' or 'OR'.
     *
     * @since 3.7.0
     * @var string
     */
    public $relation = 'AND';
    /**
     * The column to query against. Can be changed via the query arguments.
     *
     * @since 3.7.0
     * @var string
     */
    public $column = 'post_date';
    /**
     * The value comparison operator. Can be changed via the query arguments.
     *
     * @since 3.7.0
     * @var array
     */
    public $compare = '=';
    /**
     * Supported time-related parameter keys.
     *
     * @since 4.1.0
     * @var array
     */
    public $time_keys = array('after', 'before', 'year', 'month', 'monthnum', 'week', 'w', 'dayofyear', 'day', 'dayofweek', 'dayofweek_iso', 'hour', 'minute', 'second');
    /**
     * Constructor.
     *
     * Time-related parameters that normally require integer values ('year', 'month', 'week', 'dayofyear', 'day',
     * 'dayofweek', 'dayofweek_iso', 'hour', 'minute', 'second') accept arrays of integers for some values of
     * 'compare'. When 'compare' is 'IN' or 'NOT IN', arrays are accepted; when 'compare' is 'BETWEEN' or 'NOT
     * BETWEEN', arrays of two valid values are required. See individual argument descriptions for accepted values.
     *
     * @since 3.7.0
     * @since 4.0.0 The $inclusive logic was updated to include all times within the date range.
     * @since 4.1.0 Introduced 'dayofweek_iso' time type parameter.
     *
     * @param array $date_query {
     *     Array of date query clauses.
     *
     *     @type array {
     *         @type string $column   Optional. The column to query against. If undefined, inherits the value of
     *                                the `$default_column` parameter. Accepts 'post_date', 'post_date_gmt',
     *                                'post_modified','post_modified_gmt', 'comment_date', 'comment_date_gmt'.
     *                                Default 'post_date'.
     *         @type string $compare  Optional. The comparison operator. Accepts '=', '!=', '>', '>=', '<', '<=',
     *                                'IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'. Default '='.
     *         @type string $relation Optional. The boolean relationship between the date queries. Accepts 'OR' or 'AND'.
     *                                Default 'OR'.
     *         @type array {
     *             Optional. An array of first-order clause parameters, or another fully-formed date query.
     *
     *             @type string|array $before {
     *                 Optional. Date to retrieve posts before. Accepts `strtotime()`-compatible string,
     *                 or array of 'year', 'month', 'day' values.
     *
     *                 @type string $year  The four-digit year. Default empty. Accepts any four-digit year.
     *                 @type string $month Optional when passing array.The month of the year.
     *                                     Default (string:empty)|(array:1). Accepts numbers 1-12.
     *                 @type string $day   Optional when passing array.The day of the month.
     *                                     Default (string:empty)|(array:1). Accepts numbers 1-31.
     *             }
     *             @type string|array $after {
     *                 Optional. Date to retrieve posts after. Accepts `strtotime()`-compatible string,
     *                 or array of 'year', 'month', 'day' values.
     *
     *                 @type string $year  The four-digit year. Accepts any four-digit year. Default empty.
     *                 @type string $month Optional when passing array. The month of the year. Accepts numbers 1-12.
     *                                     Default (string:empty)|(array:12).
     *                 @type string $day   Optional when passing array.The day of the month. Accepts numbers 1-31.
     *                                     Default (string:empty)|(array:last day of month).
     *             }
     *             @type string       $column        Optional. Used to add a clause comparing a column other than the
     *                                               column specified in the top-level `$column` parameter. Accepts
     *                                               'post_date', 'post_date_gmt', 'post_modified', 'post_modified_gmt',
     *                                               'comment_date', 'comment_date_gmt'. Default is the value of
     *                                               top-level `$column`.
     *             @type string       $compare       Optional. The comparison operator. Accepts '=', '!=', '>', '>=',
     *                                               '<', '<=', 'IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'. 'IN',
     *                                               'NOT IN', 'BETWEEN', and 'NOT BETWEEN'. Comparisons support
     *                                               arrays in some time-related parameters. Default '='.
     *             @type bool         $inclusive     Optional. Include results from dates specified in 'before' or
     *                                               'after'. Default false.
     *             @type int|array    $year          Optional. The four-digit year number. Accepts any four-digit year
     *                                               or an array of years if `$compare` supports it. Default empty.
     *             @type int|array    $month         Optional. The two-digit month number. Accepts numbers 1-12 or an
     *                                               array of valid numbers if `$compare` supports it. Default empty.
     *             @type int|array    $week          Optional. The week number of the year. Accepts numbers 0-53 or an
     *                                               array of valid numbers if `$compare` supports it. Default empty.
     *             @type int|array    $dayofyear     Optional. The day number of the year. Accepts numbers 1-366 or an
     *                                               array of valid numbers if `$compare` supports it.
     *             @type int|array    $day           Optional. The day of the month. Accepts numbers 1-31 or an array
     *                                               of valid numbers if `$compare` supports it. Default empty.
     *             @type int|array    $dayofweek     Optional. The day number of the week. Accepts numbers 1-7 (1 is
     *                                               Sunday) or an array of valid numbers if `$compare` supports it.
     *                                               Default empty.
     *             @type int|array    $dayofweek_iso Optional. The day number of the week (ISO). Accepts numbers 1-7
     *                                               (1 is Monday) or an array of valid numbers if `$compare` supports it.
     *                                               Default empty.
     *             @type int|array    $hour          Optional. The hour of the day. Accepts numbers 0-23 or an array
     *                                               of valid numbers if `$compare` supports it. Default empty.
     *             @type int|array    $minute        Optional. The minute of the hour. Accepts numbers 0-60 or an array
     *                                               of valid numbers if `$compare` supports it. Default empty.
     *             @type int|array    $second        Optional. The second of the minute. Accepts numbers 0-60 or an
     *                                               array of valid numbers if `$compare` supports it. Default empty.
     *         }
     *     }
     * }
     * @param array $default_column Optional. Default column to query against. Default 'post_date'.
     *                              Accepts 'post_date', 'post_date_gmt', 'post_modified', 'post_modified_gmt',
     *                              'comment_date', 'comment_date_gmt'.
     */
    public function __construct($date_query, $default_column = 'post_date')
    {
    }
    /**
     * Recursive-friendly query sanitizer.
     *
     * Ensures that each query-level clause has a 'relation' key, and that
     * each first-order clause contains all the necessary keys from
     * `$defaults`.
     *
     * @since 4.1.0
     *
     * @param array $queries
     * @param array $parent_query
     *
     * @return array Sanitized queries.
     */
    public function sanitize_query($queries, $parent_query = \null)
    {
    }
    /**
     * Determine whether this is a first-order clause.
     *
     * Checks to see if the current clause has any time-related keys.
     * If so, it's first-order.
     *
     * @since 4.1.0
     *
     * @param  array $query Query clause.
     * @return bool True if this is a first-order clause.
     */
    protected function is_first_order_clause($query)
    {
    }
    /**
     * Determines and validates what comparison operator to use.
     *
     * @since 3.7.0
     *
     * @param array $query A date query or a date subquery.
     * @return string The comparison operator.
     */
    public function get_compare($query)
    {
    }
    /**
     * Validates the given date_query values and triggers errors if something is not valid.
     *
     * Note that date queries with invalid date ranges are allowed to
     * continue (though of course no items will be found for impossible dates).
     * This method only generates debug notices for these cases.
     *
     * @since  4.1.0
     *
     * @param  array $date_query The date_query array.
     * @return bool  True if all values in the query are valid, false if one or more fail.
     */
    public function validate_date_values($date_query = array())
    {
    }
    /**
     * Validates a column name parameter.
     *
     * Column names without a table prefix (like 'post_date') are checked against a whitelist of
     * known tables, and then, if found, have a table prefix (such as 'wp_posts.') prepended.
     * Prefixed column names (such as 'wp_posts.post_date') bypass this whitelist check,
     * and are only sanitized to remove illegal characters.
     *
     * @since 3.7.0
     *
     * @param string $column The user-supplied column name.
     * @return string A validated column name value.
     */
    public function validate_column($column)
    {
    }
    /**
     * Generate WHERE clause to be appended to a main query.
     *
     * @since 3.7.0
     *
     * @return string MySQL WHERE clause.
     */
    public function get_sql()
    {
    }
    /**
     * Generate SQL clauses to be appended to a main query.
     *
     * Called by the public WP_Date_Query::get_sql(), this method is abstracted
     * out to maintain parity with the other Query classes.
     *
     * @since 4.1.0
     *
     * @return array {
     *     Array containing JOIN and WHERE SQL clauses to append to the main query.
     *
     *     @type string $join  SQL fragment to append to the main JOIN clause.
     *     @type string $where SQL fragment to append to the main WHERE clause.
     * }
     */
    protected function get_sql_clauses()
    {
    }
    /**
     * Generate SQL clauses for a single query array.
     *
     * If nested subqueries are found, this method recurses the tree to
     * produce the properly nested SQL.
     *
     * @since 4.1.0
     *
     * @param array $query Query to parse.
     * @param int   $depth Optional. Number of tree levels deep we currently are.
     *                     Used to calculate indentation. Default 0.
     * @return array {
     *     Array containing JOIN and WHERE SQL clauses to append to a single query array.
     *
     *     @type string $join  SQL fragment to append to the main JOIN clause.
     *     @type string $where SQL fragment to append to the main WHERE clause.
     * }
     */
    protected function get_sql_for_query($query, $depth = 0)
    {
    }
    /**
     * Turns a single date clause into pieces for a WHERE clause.
     *
     * A wrapper for get_sql_for_clause(), included here for backward
     * compatibility while retaining the naming convention across Query classes.
     *
     * @since  3.7.0
     *
     * @param  array $query Date query arguments.
     * @return array {
     *     Array containing JOIN and WHERE SQL clauses to append to the main query.
     *
     *     @type string $join  SQL fragment to append to the main JOIN clause.
     *     @type string $where SQL fragment to append to the main WHERE clause.
     * }
     */
    protected function get_sql_for_subquery($query)
    {
    }
    /**
     * Turns a first-order date query into SQL for a WHERE clause.
     *
     * @since  4.1.0
     *
     * @param  array $query        Date query clause.
     * @param  array $parent_query Parent query of the current date query.
     * @return array {
     *     Array containing JOIN and WHERE SQL clauses to append to the main query.
     *
     *     @type string $join  SQL fragment to append to the main JOIN clause.
     *     @type string $where SQL fragment to append to the main WHERE clause.
     * }
     */
    protected function get_sql_for_clause($query, $parent_query)
    {
    }
    /**
     * Builds and validates a value string based on the comparison operator.
     *
     * @since 3.7.0
     *
     * @param string $compare The compare operator to use
     * @param string|array $value The value
     * @return string|false|int The value to be used in SQL or false on error.
     */
    public function build_value($compare, $value)
    {
    }
    /**
     * Builds a MySQL format date/time based on some query parameters.
     *
     * You can pass an array of values (year, month, etc.) with missing parameter values being defaulted to
     * either the maximum or minimum values (controlled by the $default_to parameter). Alternatively you can
     * pass a string that will be run through strtotime().
     *
     * @since 3.7.0
     *
     * @param string|array $datetime       An array of parameters or a strotime() string
     * @param bool         $default_to_max Whether to round up incomplete dates. Supported by values
     *                                     of $datetime that are arrays, or string values that are a
     *                                     subset of MySQL date format ('Y', 'Y-m', 'Y-m-d', 'Y-m-d H:i').
     *                                     Default: false.
     * @return string|false A MySQL format date/time or false on failure
     */
    public function build_mysql_datetime($datetime, $default_to_max = \false)
    {
    }
    /**
     * Builds a query string for comparing time values (hour, minute, second).
     *
     * If just hour, minute, or second is set than a normal comparison will be done.
     * However if multiple values are passed, a pseudo-decimal time will be created
     * in order to be able to accurately compare against.
     *
     * @since 3.7.0
     *
     * @param string $column The column to query against. Needs to be pre-validated!
     * @param string $compare The comparison operator. Needs to be pre-validated!
     * @param int|null $hour Optional. An hour value (0-23).
     * @param int|null $minute Optional. A minute value (0-59).
     * @param int|null $second Optional. A second value (0-59).
     * @return string|false A query part or false on failure.
     */
    public function build_time_query($column, $compare, $hour = \null, $minute = \null, $second = \null)
    {
    }
}
class wp_atom_server
{
    public function __call($name, $arguments)
    {
    }
    public static function __callStatic($name, $arguments)
    {
    }
}
/**
 * Translation_Entry class encapsulates a translatable string
 */
class Translation_Entry
{
    /**
     * Whether the entry contains a string and its plural form, default is false
     *
     * @var boolean
     */
    var $is_plural = \false;
    var $context = \null;
    var $singular = \null;
    var $plural = \null;
    var $translations = array();
    var $translator_comments = '';
    var $extracted_comments = '';
    var $references = array();
    var $flags = array();
    /**
     * @param array $args associative array, support following keys:
     * 	- singular (string) -- the string to translate, if omitted and empty entry will be created
     * 	- plural (string) -- the plural form of the string, setting this will set {@link $is_plural} to true
     * 	- translations (array) -- translations of the string and possibly -- its plural forms
     * 	- context (string) -- a string differentiating two equal strings used in different contexts
     * 	- translator_comments (string) -- comments left by translators
     * 	- extracted_comments (string) -- comments left by developers
     * 	- references (array) -- places in the code this strings is used, in relative_to_root_path/file.php:linenum form
     * 	- flags (array) -- flags like php-format
     */
    function __construct($args = array())
    {
    }
    /**
     * PHP4 constructor.
     */
    public function Translation_Entry($args = array())
    {
    }
    /**
     * Generates a unique key for this entry
     *
     * @return string|bool the key or false if the entry is empty
     */
    function key()
    {
    }
    /**
     * @param object $other
     */
    function merge_with(&$other)
    {
    }
}
class Translations
{
    var $entries = array();
    var $headers = array();
    /**
     * Add entry to the PO structure
     *
     * @param array|Translation_Entry $entry
     * @return bool true on success, false if the entry doesn't have a key
     */
    function add_entry($entry)
    {
    }
    /**
     * @param array|Translation_Entry $entry
     * @return bool
     */
    function add_entry_or_merge($entry)
    {
    }
    /**
     * Sets $header PO header to $value
     *
     * If the header already exists, it will be overwritten
     *
     * TODO: this should be out of this class, it is gettext specific
     *
     * @param string $header header name, without trailing :
     * @param string $value header value, without trailing \n
     */
    function set_header($header, $value)
    {
    }
    /**
     * @param array $headers
     */
    function set_headers($headers)
    {
    }
    /**
     * @param string $header
     */
    function get_header($header)
    {
    }
    /**
     * @param Translation_Entry $entry
     */
    function translate_entry(&$entry)
    {
    }
    /**
     * @param string $singular
     * @param string $context
     * @return string
     */
    function translate($singular, $context = \null)
    {
    }
    /**
     * Given the number of items, returns the 0-based index of the plural form to use
     *
     * Here, in the base Translations class, the common logic for English is implemented:
     * 	0 if there is one element, 1 otherwise
     *
     * This function should be overridden by the sub-classes. For example MO/PO can derive the logic
     * from their headers.
     *
     * @param integer $count number of items
     */
    function select_plural_form($count)
    {
    }
    /**
     * @return int
     */
    function get_plural_forms_count()
    {
    }
    /**
     * @param string $singular
     * @param string $plural
     * @param int    $count
     * @param string $context
     */
    function translate_plural($singular, $plural, $count, $context = \null)
    {
    }
    /**
     * Merge $other in the current object.
     *
     * @param Object $other Another Translation object, whose translations will be merged in this one (passed by reference).
     * @return void
     **/
    function merge_with(&$other)
    {
    }
    /**
     * @param object $other
     */
    function merge_originals_with(&$other)
    {
    }
}
class Gettext_Translations extends \Translations
{
    /**
     * The gettext implementation of select_plural_form.
     *
     * It lives in this class, because there are more than one descendand, which will use it and
     * they can't share it effectively.
     *
     * @param int $count
     */
    function gettext_select_plural_form($count)
    {
    }
    /**
     * @param string $header
     * @return array
     */
    function nplurals_and_expression_from_header($header)
    {
    }
    /**
     * Makes a function, which will return the right translation index, according to the
     * plural forms header
     * @param int    $nplurals
     * @param string $expression
     */
    function make_plural_form_function($nplurals, $expression)
    {
    }
    /**
     * Adds parentheses to the inner parts of ternary operators in
     * plural expressions, because PHP evaluates ternary oerators from left to right
     *
     * @param string $expression the expression without parentheses
     * @return string the expression with parentheses added
     */
    function parenthesize_plural_exression($expression)
    {
    }
    /**
     * @param string $translation
     * @return array
     */
    function make_headers($translation)
    {
    }
    /**
     * @param string $header
     * @param string $value
     */
    function set_header($header, $value)
    {
    }
}
class MO extends \Gettext_Translations
{
    var $_nplurals = 2;
    /**
     * Loaded MO file.
     *
     * @var string
     */
    private $filename = '';
    /**
     * Returns the loaded MO file.
     *
     * @return string The loaded MO file.
     */
    public function get_filename()
    {
    }
    /**
     * Fills up with the entries from MO file $filename
     *
     * @param string $filename MO file to load
     */
    function import_from_file($filename)
    {
    }
    /**
     * @param string $filename
     * @return bool
     */
    function export_to_file($filename)
    {
    }
    /**
     * @return string|false
     */
    function export()
    {
    }
    /**
     * @param Translation_Entry $entry
     * @return bool
     */
    function is_entry_good_for_export($entry)
    {
    }
    /**
     * @param resource $fh
     * @return true
     */
    function export_to_file_handle($fh)
    {
    }
    /**
     * @param Translation_Entry $entry
     * @return string
     */
    function export_original($entry)
    {
    }
    /**
     * @param Translation_Entry $entry
     * @return string
     */
    function export_translations($entry)
    {
    }
    /**
     * @return string
     */
    function export_headers()
    {
    }
    /**
     * @param int $magic
     * @return string|false
     */
    function get_byteorder($magic)
    {
    }
    /**
     * @param POMO_FileReader $reader
     */
    function import_from_reader($reader)
    {
    }
    /**
     * Build a Translation_Entry from original string and translation strings,
     * found in a MO file
     *
     * @static
     * @param string $original original string to translate from MO file. Might contain
     * 	0x04 as context separator or 0x00 as singular/plural separator
     * @param string $translation translation string from MO file. Might contain
     * 	0x00 as a plural translations separator
     */
    function &make_entry($original, $translation)
    {
    }
    /**
     * @param int $count
     * @return string
     */
    function select_plural_form($count)
    {
    }
    /**
     * @return int
     */
    function get_plural_forms_count()
    {
    }
}
/**
 * A gettext Plural-Forms parser.
 *
 * @since 4.9.0
 */
class Plural_Forms
{
    /**
     * Operator characters.
     *
     * @since 4.9.0
     * @var string OP_CHARS Operator characters.
     */
    const OP_CHARS = '|&><!=%?:';
    /**
     * Valid number characters.
     *
     * @since 4.9.0
     * @var string NUM_CHARS Valid number characters.
     */
    const NUM_CHARS = '0123456789';
    /**
     * Operator precedence.
     *
     * Operator precedence from highest to lowest. Higher numbers indicate
     * higher precedence, and are executed first.
     *
     * @see https://en.wikipedia.org/wiki/Operators_in_C_and_C%2B%2B#Operator_precedence
     *
     * @since 4.9.0
     * @var array $op_precedence Operator precedence from highest to lowest.
     */
    protected static $op_precedence = array('%' => 6, '<' => 5, '<=' => 5, '>' => 5, '>=' => 5, '==' => 4, '!=' => 4, '&&' => 3, '||' => 2, '?:' => 1, '?' => 1, '(' => 0, ')' => 0);
    /**
     * Tokens generated from the string.
     *
     * @since 4.9.0
     * @var array $tokens List of tokens.
     */
    protected $tokens = array();
    /**
     * Cache for repeated calls to the function.
     *
     * @since 4.9.0
     * @var array $cache Map of $n => $result
     */
    protected $cache = array();
    /**
     * Constructor.
     *
     * @since 4.9.0
     *
     * @param string $str Plural function (just the bit after `plural=` from Plural-Forms)
     */
    public function __construct($str)
    {
    }
    /**
     * Parse a Plural-Forms string into tokens.
     *
     * Uses the shunting-yard algorithm to convert the string to Reverse Polish
     * Notation tokens.
     *
     * @since 4.9.0
     *
     * @param string $str String to parse.
     */
    protected function parse($str)
    {
    }
    /**
     * Get the plural form for a number.
     *
     * Caches the value for repeated calls.
     *
     * @since 4.9.0
     *
     * @param int $num Number to get plural form for.
     * @return int Plural form value.
     */
    public function get($num)
    {
    }
    /**
     * Execute the plural form function.
     *
     * @since 4.9.0
     *
     * @param int $n Variable "n" to substitute.
     * @return int Plural form value.
     */
    public function execute($n)
    {
    }
}
class PO extends \Gettext_Translations
{
    var $comments_before_headers = '';
    /**
     * Exports headers to a PO entry
     *
     * @return string msgid/msgstr PO entry for this PO file headers, doesn't contain newline at the end
     */
    function export_headers()
    {
    }
    /**
     * Exports all entries to PO format
     *
     * @return string sequence of mgsgid/msgstr PO strings, doesn't containt newline at the end
     */
    function export_entries()
    {
    }
    /**
     * Exports the whole PO file as a string
     *
     * @param bool $include_headers whether to include the headers in the export
     * @return string ready for inclusion in PO file string for headers and all the enrtries
     */
    function export($include_headers = \true)
    {
    }
    /**
     * Same as {@link export}, but writes the result to a file
     *
     * @param string $filename where to write the PO string
     * @param bool $include_headers whether to include tje headers in the export
     * @return bool true on success, false on error
     */
    function export_to_file($filename, $include_headers = \true)
    {
    }
    /**
     * Text to include as a comment before the start of the PO contents
     *
     * Doesn't need to include # in the beginning of lines, these are added automatically
     */
    function set_comment_before_headers($text)
    {
    }
    /**
     * Formats a string in PO-style
     *
     * @static
     * @param string $string the string to format
     * @return string the poified string
     */
    public static function poify($string)
    {
    }
    /**
     * Gives back the original string from a PO-formatted string
     *
     * @static
     * @param string $string PO-formatted string
     * @return string enascaped string
     */
    public static function unpoify($string)
    {
    }
    /**
     * Inserts $with in the beginning of every new line of $string and
     * returns the modified string
     *
     * @static
     * @param string $string prepend lines in this string
     * @param string $with prepend lines with this string
     */
    public static function prepend_each_line($string, $with)
    {
    }
    /**
     * Prepare a text as a comment -- wraps the lines and prepends #
     * and a special character to each line
     *
     * @access private
     * @param string $text the comment text
     * @param string $char character to denote a special PO comment,
     * 	like :, default is a space
     */
    public static function comment_block($text, $char = ' ')
    {
    }
    /**
     * Builds a string from the entry for inclusion in PO file
     *
     * @static
     * @param Translation_Entry $entry the entry to convert to po string (passed by reference).
     * @return false|string PO-style formatted string for the entry or
     * 	false if the entry is empty
     */
    public static function export_entry(&$entry)
    {
    }
    public static function match_begin_and_end_newlines($translation, $original)
    {
    }
    /**
     * @param string $filename
     * @return boolean
     */
    function import_from_file($filename)
    {
    }
    /**
     * Helper function for read_entry
     * @param string $context
     * @return bool
     */
    protected static function is_final($context)
    {
    }
    /**
     * @param resource $f
     * @param int      $lineno
     * @return null|false|array
     */
    function read_entry($f, $lineno = 0)
    {
    }
    /**
     * @staticvar string   $last_line
     * @staticvar boolean  $use_last_line
     *
     * @param     resource $f
     * @param     string   $action
     * @return boolean
     */
    function read_line($f, $action = 'read')
    {
    }
    /**
     * @param Translation_Entry $entry
     * @param string            $po_comment_line
     */
    function add_comment_to_entry(&$entry, $po_comment_line)
    {
    }
    /**
     * @param string $s
     * @return sring
     */
    public static function trim_quotes($s)
    {
    }
}
class POMO_Reader
{
    var $endian = 'little';
    var $_post = '';
    /**
     * PHP5 constructor.
     */
    function __construct()
    {
    }
    /**
     * PHP4 constructor.
     */
    public function POMO_Reader()
    {
    }
    /**
     * Sets the endianness of the file.
     *
     * @param $endian string 'big' or 'little'
     */
    function setEndian($endian)
    {
    }
    /**
     * Reads a 32bit Integer from the Stream
     *
     * @return mixed The integer, corresponding to the next 32 bits from
     * 	the stream of false if there are not enough bytes or on error
     */
    function readint32()
    {
    }
    /**
     * Reads an array of 32-bit Integers from the Stream
     *
     * @param integer count How many elements should be read
     * @return mixed Array of integers or false if there isn't
     * 	enough data or on error
     */
    function readint32array($count)
    {
    }
    /**
     * @param string $string
     * @param int    $start
     * @param int    $length
     * @return string
     */
    function substr($string, $start, $length)
    {
    }
    /**
     * @param string $string
     * @return int
     */
    function strlen($string)
    {
    }
    /**
     * @param string $string
     * @param int    $chunk_size
     * @return array
     */
    function str_split($string, $chunk_size)
    {
    }
    /**
     * @return int
     */
    function pos()
    {
    }
    /**
     * @return true
     */
    function is_resource()
    {
    }
    /**
     * @return true
     */
    function close()
    {
    }
}
class POMO_FileReader extends \POMO_Reader
{
    /**
     * @param string $filename
     */
    function __construct($filename)
    {
    }
    /**
     * PHP4 constructor.
     */
    public function POMO_FileReader($filename)
    {
    }
    /**
     * @param int $bytes
     */
    function read($bytes)
    {
    }
    /**
     * @param int $pos
     * @return boolean
     */
    function seekto($pos)
    {
    }
    /**
     * @return bool
     */
    function is_resource()
    {
    }
    /**
     * @return bool
     */
    function feof()
    {
    }
    /**
     * @return bool
     */
    function close()
    {
    }
    /**
     * @return string
     */
    function read_all()
    {
    }
}
/**
 * Provides file-like methods for manipulating a string instead
 * of a physical file.
 */
class POMO_StringReader extends \POMO_Reader
{
    var $_str = '';
    /**
     * PHP5 constructor.
     */
    function __construct($str = '')
    {
    }
    /**
     * PHP4 constructor.
     */
    public function POMO_StringReader($str = '')
    {
    }
    /**
     * @param string $bytes
     * @return string
     */
    function read($bytes)
    {
    }
    /**
     * @param int $pos
     * @return int
     */
    function seekto($pos)
    {
    }
    /**
     * @return int
     */
    function length()
    {
    }
    /**
     * @return string
     */
    function read_all()
    {
    }
}